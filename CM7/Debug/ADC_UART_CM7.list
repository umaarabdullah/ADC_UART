
ADC_UART_CM7.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000298  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008564  080002a0  080002a0  000102a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000078  08008804  08008804  00018804  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800887c  0800887c  00020060  2**0
                  CONTENTS
  4 .ARM          00000008  0800887c  0800887c  0001887c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008884  08008884  00020060  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008884  08008884  00018884  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08008888  08008888  00018888  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000060  24000000  0800888c  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a0  24000060  080088ec  00020060  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  24000300  080088ec  00020300  2**0
                  ALLOC
 11 .ARM.attributes 0000002e  00000000  00000000  00020060  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  0002008e  2**0
                  CONTENTS, READONLY
 13 .debug_info   0001506c  00000000  00000000  000200d1  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000260c  00000000  00000000  0003513d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000f38  00000000  00000000  00037750  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000bb0  00000000  00000000  00038688  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  000408a4  00000000  00000000  00039238  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00013ded  00000000  00000000  00079adc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    001a8dfb  00000000  00000000  0008d8c9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  00004588  00000000  00000000  002366c4  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000005c  00000000  00000000  0023ac4c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080002a0 <__do_global_dtors_aux>:
 80002a0:	b510      	push	{r4, lr}
 80002a2:	4c05      	ldr	r4, [pc, #20]	; (80002b8 <__do_global_dtors_aux+0x18>)
 80002a4:	7823      	ldrb	r3, [r4, #0]
 80002a6:	b933      	cbnz	r3, 80002b6 <__do_global_dtors_aux+0x16>
 80002a8:	4b04      	ldr	r3, [pc, #16]	; (80002bc <__do_global_dtors_aux+0x1c>)
 80002aa:	b113      	cbz	r3, 80002b2 <__do_global_dtors_aux+0x12>
 80002ac:	4804      	ldr	r0, [pc, #16]	; (80002c0 <__do_global_dtors_aux+0x20>)
 80002ae:	f3af 8000 	nop.w
 80002b2:	2301      	movs	r3, #1
 80002b4:	7023      	strb	r3, [r4, #0]
 80002b6:	bd10      	pop	{r4, pc}
 80002b8:	24000060 	.word	0x24000060
 80002bc:	00000000 	.word	0x00000000
 80002c0:	080087ec 	.word	0x080087ec

080002c4 <frame_dummy>:
 80002c4:	b508      	push	{r3, lr}
 80002c6:	4b03      	ldr	r3, [pc, #12]	; (80002d4 <frame_dummy+0x10>)
 80002c8:	b11b      	cbz	r3, 80002d2 <frame_dummy+0xe>
 80002ca:	4903      	ldr	r1, [pc, #12]	; (80002d8 <frame_dummy+0x14>)
 80002cc:	4803      	ldr	r0, [pc, #12]	; (80002dc <frame_dummy+0x18>)
 80002ce:	f3af 8000 	nop.w
 80002d2:	bd08      	pop	{r3, pc}
 80002d4:	00000000 	.word	0x00000000
 80002d8:	24000064 	.word	0x24000064
 80002dc:	080087ec 	.word	0x080087ec

080002e0 <strlen>:
 80002e0:	4603      	mov	r3, r0
 80002e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	d1fb      	bne.n	80002e2 <strlen+0x2>
 80002ea:	1a18      	subs	r0, r3, r0
 80002ec:	3801      	subs	r0, #1
 80002ee:	4770      	bx	lr

080002f0 <memchr>:
 80002f0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80002f4:	2a10      	cmp	r2, #16
 80002f6:	db2b      	blt.n	8000350 <memchr+0x60>
 80002f8:	f010 0f07 	tst.w	r0, #7
 80002fc:	d008      	beq.n	8000310 <memchr+0x20>
 80002fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000302:	3a01      	subs	r2, #1
 8000304:	428b      	cmp	r3, r1
 8000306:	d02d      	beq.n	8000364 <memchr+0x74>
 8000308:	f010 0f07 	tst.w	r0, #7
 800030c:	b342      	cbz	r2, 8000360 <memchr+0x70>
 800030e:	d1f6      	bne.n	80002fe <memchr+0xe>
 8000310:	b4f0      	push	{r4, r5, r6, r7}
 8000312:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000316:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800031a:	f022 0407 	bic.w	r4, r2, #7
 800031e:	f07f 0700 	mvns.w	r7, #0
 8000322:	2300      	movs	r3, #0
 8000324:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000328:	3c08      	subs	r4, #8
 800032a:	ea85 0501 	eor.w	r5, r5, r1
 800032e:	ea86 0601 	eor.w	r6, r6, r1
 8000332:	fa85 f547 	uadd8	r5, r5, r7
 8000336:	faa3 f587 	sel	r5, r3, r7
 800033a:	fa86 f647 	uadd8	r6, r6, r7
 800033e:	faa5 f687 	sel	r6, r5, r7
 8000342:	b98e      	cbnz	r6, 8000368 <memchr+0x78>
 8000344:	d1ee      	bne.n	8000324 <memchr+0x34>
 8000346:	bcf0      	pop	{r4, r5, r6, r7}
 8000348:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800034c:	f002 0207 	and.w	r2, r2, #7
 8000350:	b132      	cbz	r2, 8000360 <memchr+0x70>
 8000352:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000356:	3a01      	subs	r2, #1
 8000358:	ea83 0301 	eor.w	r3, r3, r1
 800035c:	b113      	cbz	r3, 8000364 <memchr+0x74>
 800035e:	d1f8      	bne.n	8000352 <memchr+0x62>
 8000360:	2000      	movs	r0, #0
 8000362:	4770      	bx	lr
 8000364:	3801      	subs	r0, #1
 8000366:	4770      	bx	lr
 8000368:	2d00      	cmp	r5, #0
 800036a:	bf06      	itte	eq
 800036c:	4635      	moveq	r5, r6
 800036e:	3803      	subeq	r0, #3
 8000370:	3807      	subne	r0, #7
 8000372:	f015 0f01 	tst.w	r5, #1
 8000376:	d107      	bne.n	8000388 <memchr+0x98>
 8000378:	3001      	adds	r0, #1
 800037a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800037e:	bf02      	ittt	eq
 8000380:	3001      	addeq	r0, #1
 8000382:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000386:	3001      	addeq	r0, #1
 8000388:	bcf0      	pop	{r4, r5, r6, r7}
 800038a:	3801      	subs	r0, #1
 800038c:	4770      	bx	lr
 800038e:	bf00      	nop

08000390 <__aeabi_uldivmod>:
 8000390:	b953      	cbnz	r3, 80003a8 <__aeabi_uldivmod+0x18>
 8000392:	b94a      	cbnz	r2, 80003a8 <__aeabi_uldivmod+0x18>
 8000394:	2900      	cmp	r1, #0
 8000396:	bf08      	it	eq
 8000398:	2800      	cmpeq	r0, #0
 800039a:	bf1c      	itt	ne
 800039c:	f04f 31ff 	movne.w	r1, #4294967295
 80003a0:	f04f 30ff 	movne.w	r0, #4294967295
 80003a4:	f000 b970 	b.w	8000688 <__aeabi_idiv0>
 80003a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80003ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80003b0:	f000 f806 	bl	80003c0 <__udivmoddi4>
 80003b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80003b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80003bc:	b004      	add	sp, #16
 80003be:	4770      	bx	lr

080003c0 <__udivmoddi4>:
 80003c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80003c4:	9e08      	ldr	r6, [sp, #32]
 80003c6:	460d      	mov	r5, r1
 80003c8:	4604      	mov	r4, r0
 80003ca:	460f      	mov	r7, r1
 80003cc:	2b00      	cmp	r3, #0
 80003ce:	d14a      	bne.n	8000466 <__udivmoddi4+0xa6>
 80003d0:	428a      	cmp	r2, r1
 80003d2:	4694      	mov	ip, r2
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0xe2>
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	b143      	cbz	r3, 80003ee <__udivmoddi4+0x2e>
 80003dc:	fa02 fc03 	lsl.w	ip, r2, r3
 80003e0:	f1c3 0220 	rsb	r2, r3, #32
 80003e4:	409f      	lsls	r7, r3
 80003e6:	fa20 f202 	lsr.w	r2, r0, r2
 80003ea:	4317      	orrs	r7, r2
 80003ec:	409c      	lsls	r4, r3
 80003ee:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 80003f2:	fa1f f58c 	uxth.w	r5, ip
 80003f6:	fbb7 f1fe 	udiv	r1, r7, lr
 80003fa:	0c22      	lsrs	r2, r4, #16
 80003fc:	fb0e 7711 	mls	r7, lr, r1, r7
 8000400:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000404:	fb01 f005 	mul.w	r0, r1, r5
 8000408:	4290      	cmp	r0, r2
 800040a:	d90a      	bls.n	8000422 <__udivmoddi4+0x62>
 800040c:	eb1c 0202 	adds.w	r2, ip, r2
 8000410:	f101 37ff 	add.w	r7, r1, #4294967295
 8000414:	f080 811c 	bcs.w	8000650 <__udivmoddi4+0x290>
 8000418:	4290      	cmp	r0, r2
 800041a:	f240 8119 	bls.w	8000650 <__udivmoddi4+0x290>
 800041e:	3902      	subs	r1, #2
 8000420:	4462      	add	r2, ip
 8000422:	1a12      	subs	r2, r2, r0
 8000424:	b2a4      	uxth	r4, r4
 8000426:	fbb2 f0fe 	udiv	r0, r2, lr
 800042a:	fb0e 2210 	mls	r2, lr, r0, r2
 800042e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000432:	fb00 f505 	mul.w	r5, r0, r5
 8000436:	42a5      	cmp	r5, r4
 8000438:	d90a      	bls.n	8000450 <__udivmoddi4+0x90>
 800043a:	eb1c 0404 	adds.w	r4, ip, r4
 800043e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000442:	f080 8107 	bcs.w	8000654 <__udivmoddi4+0x294>
 8000446:	42a5      	cmp	r5, r4
 8000448:	f240 8104 	bls.w	8000654 <__udivmoddi4+0x294>
 800044c:	4464      	add	r4, ip
 800044e:	3802      	subs	r0, #2
 8000450:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000454:	1b64      	subs	r4, r4, r5
 8000456:	2100      	movs	r1, #0
 8000458:	b11e      	cbz	r6, 8000462 <__udivmoddi4+0xa2>
 800045a:	40dc      	lsrs	r4, r3
 800045c:	2300      	movs	r3, #0
 800045e:	e9c6 4300 	strd	r4, r3, [r6]
 8000462:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000466:	428b      	cmp	r3, r1
 8000468:	d908      	bls.n	800047c <__udivmoddi4+0xbc>
 800046a:	2e00      	cmp	r6, #0
 800046c:	f000 80ed 	beq.w	800064a <__udivmoddi4+0x28a>
 8000470:	2100      	movs	r1, #0
 8000472:	e9c6 0500 	strd	r0, r5, [r6]
 8000476:	4608      	mov	r0, r1
 8000478:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800047c:	fab3 f183 	clz	r1, r3
 8000480:	2900      	cmp	r1, #0
 8000482:	d149      	bne.n	8000518 <__udivmoddi4+0x158>
 8000484:	42ab      	cmp	r3, r5
 8000486:	d302      	bcc.n	800048e <__udivmoddi4+0xce>
 8000488:	4282      	cmp	r2, r0
 800048a:	f200 80f8 	bhi.w	800067e <__udivmoddi4+0x2be>
 800048e:	1a84      	subs	r4, r0, r2
 8000490:	eb65 0203 	sbc.w	r2, r5, r3
 8000494:	2001      	movs	r0, #1
 8000496:	4617      	mov	r7, r2
 8000498:	2e00      	cmp	r6, #0
 800049a:	d0e2      	beq.n	8000462 <__udivmoddi4+0xa2>
 800049c:	e9c6 4700 	strd	r4, r7, [r6]
 80004a0:	e7df      	b.n	8000462 <__udivmoddi4+0xa2>
 80004a2:	b902      	cbnz	r2, 80004a6 <__udivmoddi4+0xe6>
 80004a4:	deff      	udf	#255	; 0xff
 80004a6:	fab2 f382 	clz	r3, r2
 80004aa:	2b00      	cmp	r3, #0
 80004ac:	f040 8090 	bne.w	80005d0 <__udivmoddi4+0x210>
 80004b0:	1a8a      	subs	r2, r1, r2
 80004b2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80004b6:	fa1f fe8c 	uxth.w	lr, ip
 80004ba:	2101      	movs	r1, #1
 80004bc:	fbb2 f5f7 	udiv	r5, r2, r7
 80004c0:	fb07 2015 	mls	r0, r7, r5, r2
 80004c4:	0c22      	lsrs	r2, r4, #16
 80004c6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80004ca:	fb0e f005 	mul.w	r0, lr, r5
 80004ce:	4290      	cmp	r0, r2
 80004d0:	d908      	bls.n	80004e4 <__udivmoddi4+0x124>
 80004d2:	eb1c 0202 	adds.w	r2, ip, r2
 80004d6:	f105 38ff 	add.w	r8, r5, #4294967295
 80004da:	d202      	bcs.n	80004e2 <__udivmoddi4+0x122>
 80004dc:	4290      	cmp	r0, r2
 80004de:	f200 80cb 	bhi.w	8000678 <__udivmoddi4+0x2b8>
 80004e2:	4645      	mov	r5, r8
 80004e4:	1a12      	subs	r2, r2, r0
 80004e6:	b2a4      	uxth	r4, r4
 80004e8:	fbb2 f0f7 	udiv	r0, r2, r7
 80004ec:	fb07 2210 	mls	r2, r7, r0, r2
 80004f0:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 80004f4:	fb0e fe00 	mul.w	lr, lr, r0
 80004f8:	45a6      	cmp	lr, r4
 80004fa:	d908      	bls.n	800050e <__udivmoddi4+0x14e>
 80004fc:	eb1c 0404 	adds.w	r4, ip, r4
 8000500:	f100 32ff 	add.w	r2, r0, #4294967295
 8000504:	d202      	bcs.n	800050c <__udivmoddi4+0x14c>
 8000506:	45a6      	cmp	lr, r4
 8000508:	f200 80bb 	bhi.w	8000682 <__udivmoddi4+0x2c2>
 800050c:	4610      	mov	r0, r2
 800050e:	eba4 040e 	sub.w	r4, r4, lr
 8000512:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000516:	e79f      	b.n	8000458 <__udivmoddi4+0x98>
 8000518:	f1c1 0720 	rsb	r7, r1, #32
 800051c:	408b      	lsls	r3, r1
 800051e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000522:	ea4c 0c03 	orr.w	ip, ip, r3
 8000526:	fa05 f401 	lsl.w	r4, r5, r1
 800052a:	fa20 f307 	lsr.w	r3, r0, r7
 800052e:	40fd      	lsrs	r5, r7
 8000530:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000534:	4323      	orrs	r3, r4
 8000536:	fbb5 f8f9 	udiv	r8, r5, r9
 800053a:	fa1f fe8c 	uxth.w	lr, ip
 800053e:	fb09 5518 	mls	r5, r9, r8, r5
 8000542:	0c1c      	lsrs	r4, r3, #16
 8000544:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000548:	fb08 f50e 	mul.w	r5, r8, lr
 800054c:	42a5      	cmp	r5, r4
 800054e:	fa02 f201 	lsl.w	r2, r2, r1
 8000552:	fa00 f001 	lsl.w	r0, r0, r1
 8000556:	d90b      	bls.n	8000570 <__udivmoddi4+0x1b0>
 8000558:	eb1c 0404 	adds.w	r4, ip, r4
 800055c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000560:	f080 8088 	bcs.w	8000674 <__udivmoddi4+0x2b4>
 8000564:	42a5      	cmp	r5, r4
 8000566:	f240 8085 	bls.w	8000674 <__udivmoddi4+0x2b4>
 800056a:	f1a8 0802 	sub.w	r8, r8, #2
 800056e:	4464      	add	r4, ip
 8000570:	1b64      	subs	r4, r4, r5
 8000572:	b29d      	uxth	r5, r3
 8000574:	fbb4 f3f9 	udiv	r3, r4, r9
 8000578:	fb09 4413 	mls	r4, r9, r3, r4
 800057c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 8000580:	fb03 fe0e 	mul.w	lr, r3, lr
 8000584:	45a6      	cmp	lr, r4
 8000586:	d908      	bls.n	800059a <__udivmoddi4+0x1da>
 8000588:	eb1c 0404 	adds.w	r4, ip, r4
 800058c:	f103 35ff 	add.w	r5, r3, #4294967295
 8000590:	d26c      	bcs.n	800066c <__udivmoddi4+0x2ac>
 8000592:	45a6      	cmp	lr, r4
 8000594:	d96a      	bls.n	800066c <__udivmoddi4+0x2ac>
 8000596:	3b02      	subs	r3, #2
 8000598:	4464      	add	r4, ip
 800059a:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 800059e:	fba3 9502 	umull	r9, r5, r3, r2
 80005a2:	eba4 040e 	sub.w	r4, r4, lr
 80005a6:	42ac      	cmp	r4, r5
 80005a8:	46c8      	mov	r8, r9
 80005aa:	46ae      	mov	lr, r5
 80005ac:	d356      	bcc.n	800065c <__udivmoddi4+0x29c>
 80005ae:	d053      	beq.n	8000658 <__udivmoddi4+0x298>
 80005b0:	b156      	cbz	r6, 80005c8 <__udivmoddi4+0x208>
 80005b2:	ebb0 0208 	subs.w	r2, r0, r8
 80005b6:	eb64 040e 	sbc.w	r4, r4, lr
 80005ba:	fa04 f707 	lsl.w	r7, r4, r7
 80005be:	40ca      	lsrs	r2, r1
 80005c0:	40cc      	lsrs	r4, r1
 80005c2:	4317      	orrs	r7, r2
 80005c4:	e9c6 7400 	strd	r7, r4, [r6]
 80005c8:	4618      	mov	r0, r3
 80005ca:	2100      	movs	r1, #0
 80005cc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80005d0:	f1c3 0120 	rsb	r1, r3, #32
 80005d4:	fa02 fc03 	lsl.w	ip, r2, r3
 80005d8:	fa20 f201 	lsr.w	r2, r0, r1
 80005dc:	fa25 f101 	lsr.w	r1, r5, r1
 80005e0:	409d      	lsls	r5, r3
 80005e2:	432a      	orrs	r2, r5
 80005e4:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80005e8:	fa1f fe8c 	uxth.w	lr, ip
 80005ec:	fbb1 f0f7 	udiv	r0, r1, r7
 80005f0:	fb07 1510 	mls	r5, r7, r0, r1
 80005f4:	0c11      	lsrs	r1, r2, #16
 80005f6:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 80005fa:	fb00 f50e 	mul.w	r5, r0, lr
 80005fe:	428d      	cmp	r5, r1
 8000600:	fa04 f403 	lsl.w	r4, r4, r3
 8000604:	d908      	bls.n	8000618 <__udivmoddi4+0x258>
 8000606:	eb1c 0101 	adds.w	r1, ip, r1
 800060a:	f100 38ff 	add.w	r8, r0, #4294967295
 800060e:	d22f      	bcs.n	8000670 <__udivmoddi4+0x2b0>
 8000610:	428d      	cmp	r5, r1
 8000612:	d92d      	bls.n	8000670 <__udivmoddi4+0x2b0>
 8000614:	3802      	subs	r0, #2
 8000616:	4461      	add	r1, ip
 8000618:	1b49      	subs	r1, r1, r5
 800061a:	b292      	uxth	r2, r2
 800061c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000620:	fb07 1115 	mls	r1, r7, r5, r1
 8000624:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000628:	fb05 f10e 	mul.w	r1, r5, lr
 800062c:	4291      	cmp	r1, r2
 800062e:	d908      	bls.n	8000642 <__udivmoddi4+0x282>
 8000630:	eb1c 0202 	adds.w	r2, ip, r2
 8000634:	f105 38ff 	add.w	r8, r5, #4294967295
 8000638:	d216      	bcs.n	8000668 <__udivmoddi4+0x2a8>
 800063a:	4291      	cmp	r1, r2
 800063c:	d914      	bls.n	8000668 <__udivmoddi4+0x2a8>
 800063e:	3d02      	subs	r5, #2
 8000640:	4462      	add	r2, ip
 8000642:	1a52      	subs	r2, r2, r1
 8000644:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000648:	e738      	b.n	80004bc <__udivmoddi4+0xfc>
 800064a:	4631      	mov	r1, r6
 800064c:	4630      	mov	r0, r6
 800064e:	e708      	b.n	8000462 <__udivmoddi4+0xa2>
 8000650:	4639      	mov	r1, r7
 8000652:	e6e6      	b.n	8000422 <__udivmoddi4+0x62>
 8000654:	4610      	mov	r0, r2
 8000656:	e6fb      	b.n	8000450 <__udivmoddi4+0x90>
 8000658:	4548      	cmp	r0, r9
 800065a:	d2a9      	bcs.n	80005b0 <__udivmoddi4+0x1f0>
 800065c:	ebb9 0802 	subs.w	r8, r9, r2
 8000660:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000664:	3b01      	subs	r3, #1
 8000666:	e7a3      	b.n	80005b0 <__udivmoddi4+0x1f0>
 8000668:	4645      	mov	r5, r8
 800066a:	e7ea      	b.n	8000642 <__udivmoddi4+0x282>
 800066c:	462b      	mov	r3, r5
 800066e:	e794      	b.n	800059a <__udivmoddi4+0x1da>
 8000670:	4640      	mov	r0, r8
 8000672:	e7d1      	b.n	8000618 <__udivmoddi4+0x258>
 8000674:	46d0      	mov	r8, sl
 8000676:	e77b      	b.n	8000570 <__udivmoddi4+0x1b0>
 8000678:	3d02      	subs	r5, #2
 800067a:	4462      	add	r2, ip
 800067c:	e732      	b.n	80004e4 <__udivmoddi4+0x124>
 800067e:	4608      	mov	r0, r1
 8000680:	e70a      	b.n	8000498 <__udivmoddi4+0xd8>
 8000682:	4464      	add	r4, ip
 8000684:	3802      	subs	r0, #2
 8000686:	e742      	b.n	800050e <__udivmoddi4+0x14e>

08000688 <__aeabi_idiv0>:
 8000688:	4770      	bx	lr
 800068a:	bf00      	nop

0800068c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800068c:	b480      	push	{r7}
 800068e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << (10*2))|(3UL << (11*2)));  /* set CP10 and CP11 Full Access */
 8000690:	4b3d      	ldr	r3, [pc, #244]	; (8000788 <SystemInit+0xfc>)
 8000692:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000696:	4a3c      	ldr	r2, [pc, #240]	; (8000788 <SystemInit+0xfc>)
 8000698:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800069c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
  #endif

    /*SEVONPEND enabled so that an interrupt coming from the CPU(n) interrupt signal is
     detectable by the CPU after a WFI/WFE instruction.*/
 SCB->SCR |= SCB_SCR_SEVONPEND_Msk;
 80006a0:	4b39      	ldr	r3, [pc, #228]	; (8000788 <SystemInit+0xfc>)
 80006a2:	691b      	ldr	r3, [r3, #16]
 80006a4:	4a38      	ldr	r2, [pc, #224]	; (8000788 <SystemInit+0xfc>)
 80006a6:	f043 0310 	orr.w	r3, r3, #16
 80006aa:	6113      	str	r3, [r2, #16]

#if defined(CORE_CM7)
  /* Reset the RCC clock configuration to the default reset state ------------*/
   /* Increasing the CPU frequency */
  if(FLASH_LATENCY_DEFAULT  > (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006ac:	4b37      	ldr	r3, [pc, #220]	; (800078c <SystemInit+0x100>)
 80006ae:	681b      	ldr	r3, [r3, #0]
 80006b0:	f003 030f 	and.w	r3, r3, #15
 80006b4:	2b06      	cmp	r3, #6
 80006b6:	d807      	bhi.n	80006c8 <SystemInit+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006b8:	4b34      	ldr	r3, [pc, #208]	; (800078c <SystemInit+0x100>)
 80006ba:	681b      	ldr	r3, [r3, #0]
 80006bc:	f023 030f 	bic.w	r3, r3, #15
 80006c0:	4a32      	ldr	r2, [pc, #200]	; (800078c <SystemInit+0x100>)
 80006c2:	f043 0307 	orr.w	r3, r3, #7
 80006c6:	6013      	str	r3, [r2, #0]
  }

  /* Set HSION bit */
  RCC->CR |= RCC_CR_HSION;
 80006c8:	4b31      	ldr	r3, [pc, #196]	; (8000790 <SystemInit+0x104>)
 80006ca:	681b      	ldr	r3, [r3, #0]
 80006cc:	4a30      	ldr	r2, [pc, #192]	; (8000790 <SystemInit+0x104>)
 80006ce:	f043 0301 	orr.w	r3, r3, #1
 80006d2:	6013      	str	r3, [r2, #0]

  /* Reset CFGR register */
  RCC->CFGR = 0x00000000;
 80006d4:	4b2e      	ldr	r3, [pc, #184]	; (8000790 <SystemInit+0x104>)
 80006d6:	2200      	movs	r2, #0
 80006d8:	611a      	str	r2, [r3, #16]

  /* Reset HSEON, HSECSSON, CSION, HSI48ON, CSIKERON, PLL1ON, PLL2ON and PLL3ON bits */
  RCC->CR &= 0xEAF6ED7FU;
 80006da:	4b2d      	ldr	r3, [pc, #180]	; (8000790 <SystemInit+0x104>)
 80006dc:	681a      	ldr	r2, [r3, #0]
 80006de:	492c      	ldr	r1, [pc, #176]	; (8000790 <SystemInit+0x104>)
 80006e0:	4b2c      	ldr	r3, [pc, #176]	; (8000794 <SystemInit+0x108>)
 80006e2:	4013      	ands	r3, r2
 80006e4:	600b      	str	r3, [r1, #0]

   /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLASH_LATENCY_DEFAULT  < (READ_BIT((FLASH->ACR), FLASH_ACR_LATENCY)))
 80006e6:	4b29      	ldr	r3, [pc, #164]	; (800078c <SystemInit+0x100>)
 80006e8:	681b      	ldr	r3, [r3, #0]
 80006ea:	f003 0308 	and.w	r3, r3, #8
 80006ee:	2b00      	cmp	r3, #0
 80006f0:	d007      	beq.n	8000702 <SystemInit+0x76>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    MODIFY_REG(FLASH->ACR, FLASH_ACR_LATENCY, (uint32_t)(FLASH_LATENCY_DEFAULT));
 80006f2:	4b26      	ldr	r3, [pc, #152]	; (800078c <SystemInit+0x100>)
 80006f4:	681b      	ldr	r3, [r3, #0]
 80006f6:	f023 030f 	bic.w	r3, r3, #15
 80006fa:	4a24      	ldr	r2, [pc, #144]	; (800078c <SystemInit+0x100>)
 80006fc:	f043 0307 	orr.w	r3, r3, #7
 8000700:	6013      	str	r3, [r2, #0]
  }

  /* Reset D1CFGR register */
  RCC->D1CFGR = 0x00000000;
 8000702:	4b23      	ldr	r3, [pc, #140]	; (8000790 <SystemInit+0x104>)
 8000704:	2200      	movs	r2, #0
 8000706:	619a      	str	r2, [r3, #24]

  /* Reset D2CFGR register */
  RCC->D2CFGR = 0x00000000;
 8000708:	4b21      	ldr	r3, [pc, #132]	; (8000790 <SystemInit+0x104>)
 800070a:	2200      	movs	r2, #0
 800070c:	61da      	str	r2, [r3, #28]

  /* Reset D3CFGR register */
  RCC->D3CFGR = 0x00000000;
 800070e:	4b20      	ldr	r3, [pc, #128]	; (8000790 <SystemInit+0x104>)
 8000710:	2200      	movs	r2, #0
 8000712:	621a      	str	r2, [r3, #32]

  /* Reset PLLCKSELR register */
  RCC->PLLCKSELR = 0x02020200;
 8000714:	4b1e      	ldr	r3, [pc, #120]	; (8000790 <SystemInit+0x104>)
 8000716:	4a20      	ldr	r2, [pc, #128]	; (8000798 <SystemInit+0x10c>)
 8000718:	629a      	str	r2, [r3, #40]	; 0x28

  /* Reset PLLCFGR register */
  RCC->PLLCFGR = 0x01FF0000;
 800071a:	4b1d      	ldr	r3, [pc, #116]	; (8000790 <SystemInit+0x104>)
 800071c:	4a1f      	ldr	r2, [pc, #124]	; (800079c <SystemInit+0x110>)
 800071e:	62da      	str	r2, [r3, #44]	; 0x2c
  /* Reset PLL1DIVR register */
  RCC->PLL1DIVR = 0x01010280;
 8000720:	4b1b      	ldr	r3, [pc, #108]	; (8000790 <SystemInit+0x104>)
 8000722:	4a1f      	ldr	r2, [pc, #124]	; (80007a0 <SystemInit+0x114>)
 8000724:	631a      	str	r2, [r3, #48]	; 0x30
  /* Reset PLL1FRACR register */
  RCC->PLL1FRACR = 0x00000000;
 8000726:	4b1a      	ldr	r3, [pc, #104]	; (8000790 <SystemInit+0x104>)
 8000728:	2200      	movs	r2, #0
 800072a:	635a      	str	r2, [r3, #52]	; 0x34

  /* Reset PLL2DIVR register */
  RCC->PLL2DIVR = 0x01010280;
 800072c:	4b18      	ldr	r3, [pc, #96]	; (8000790 <SystemInit+0x104>)
 800072e:	4a1c      	ldr	r2, [pc, #112]	; (80007a0 <SystemInit+0x114>)
 8000730:	639a      	str	r2, [r3, #56]	; 0x38

  /* Reset PLL2FRACR register */

  RCC->PLL2FRACR = 0x00000000;
 8000732:	4b17      	ldr	r3, [pc, #92]	; (8000790 <SystemInit+0x104>)
 8000734:	2200      	movs	r2, #0
 8000736:	63da      	str	r2, [r3, #60]	; 0x3c
  /* Reset PLL3DIVR register */
  RCC->PLL3DIVR = 0x01010280;
 8000738:	4b15      	ldr	r3, [pc, #84]	; (8000790 <SystemInit+0x104>)
 800073a:	4a19      	ldr	r2, [pc, #100]	; (80007a0 <SystemInit+0x114>)
 800073c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Reset PLL3FRACR register */
  RCC->PLL3FRACR = 0x00000000;
 800073e:	4b14      	ldr	r3, [pc, #80]	; (8000790 <SystemInit+0x104>)
 8000740:	2200      	movs	r2, #0
 8000742:	645a      	str	r2, [r3, #68]	; 0x44

  /* Reset HSEBYP bit */
  RCC->CR &= 0xFFFBFFFFU;
 8000744:	4b12      	ldr	r3, [pc, #72]	; (8000790 <SystemInit+0x104>)
 8000746:	681b      	ldr	r3, [r3, #0]
 8000748:	4a11      	ldr	r2, [pc, #68]	; (8000790 <SystemInit+0x104>)
 800074a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800074e:	6013      	str	r3, [r2, #0]

  /* Disable all interrupts */
  RCC->CIER = 0x00000000;
 8000750:	4b0f      	ldr	r3, [pc, #60]	; (8000790 <SystemInit+0x104>)
 8000752:	2200      	movs	r2, #0
 8000754:	661a      	str	r2, [r3, #96]	; 0x60

  /* Enable CortexM7 HSEM EXTI line (line 78)*/
  EXTI_D2->EMR3 |= 0x4000UL;
 8000756:	4b13      	ldr	r3, [pc, #76]	; (80007a4 <SystemInit+0x118>)
 8000758:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800075a:	4a12      	ldr	r2, [pc, #72]	; (80007a4 <SystemInit+0x118>)
 800075c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000760:	6253      	str	r3, [r2, #36]	; 0x24

  if((DBGMCU->IDCODE & 0xFFFF0000U) < 0x20000000U)
 8000762:	4b11      	ldr	r3, [pc, #68]	; (80007a8 <SystemInit+0x11c>)
 8000764:	681a      	ldr	r2, [r3, #0]
 8000766:	4b11      	ldr	r3, [pc, #68]	; (80007ac <SystemInit+0x120>)
 8000768:	4013      	ands	r3, r2
 800076a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800076e:	d202      	bcs.n	8000776 <SystemInit+0xea>
  {
    /* if stm32h7 revY*/
    /* Change  the switch matrix read issuing capability to 1 for the AXI SRAM target (Target 7) */
    *((__IO uint32_t*)0x51008108) = 0x000000001U;
 8000770:	4b0f      	ldr	r3, [pc, #60]	; (80007b0 <SystemInit+0x124>)
 8000772:	2201      	movs	r2, #1
 8000774:	601a      	str	r2, [r3, #0]
  /*
   * Disable the FMC bank1 (enabled after reset).
   * This, prevents CPU speculation access on this bank which blocks the use of FMC during
   * 24us. During this time the others FMC master (such as LTDC) cannot use it!
   */
  FMC_Bank1_R->BTCR[0] = 0x000030D2;
 8000776:	4b0f      	ldr	r3, [pc, #60]	; (80007b4 <SystemInit+0x128>)
 8000778:	f243 02d2 	movw	r2, #12498	; 0x30d2
 800077c:	601a      	str	r2, [r3, #0]
#endif /* USER_VECT_TAB_ADDRESS */

#else
#error Please #define CORE_CM4 or CORE_CM7
#endif /* CORE_CM4 */
}
 800077e:	bf00      	nop
 8000780:	46bd      	mov	sp, r7
 8000782:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000786:	4770      	bx	lr
 8000788:	e000ed00 	.word	0xe000ed00
 800078c:	52002000 	.word	0x52002000
 8000790:	58024400 	.word	0x58024400
 8000794:	eaf6ed7f 	.word	0xeaf6ed7f
 8000798:	02020200 	.word	0x02020200
 800079c:	01ff0000 	.word	0x01ff0000
 80007a0:	01010280 	.word	0x01010280
 80007a4:	580000c0 	.word	0x580000c0
 80007a8:	5c001000 	.word	0x5c001000
 80007ac:	ffff0000 	.word	0xffff0000
 80007b0:	51008108 	.word	0x51008108
 80007b4:	52004000 	.word	0x52004000

080007b8 <HAL_ADC_ConvCpltCallback>:

/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef *hadc){
 80007b8:	b580      	push	{r7, lr}
 80007ba:	b082      	sub	sp, #8
 80007bc:	af00      	add	r7, sp, #0
 80007be:	6078      	str	r0, [r7, #4]
	adc_valid = 1;
 80007c0:	4b06      	ldr	r3, [pc, #24]	; (80007dc <HAL_ADC_ConvCpltCallback+0x24>)
 80007c2:	2201      	movs	r2, #1
 80007c4:	701a      	strb	r2, [r3, #0]
	adc_result = HAL_ADC_GetValue(&hadc1);
 80007c6:	4806      	ldr	r0, [pc, #24]	; (80007e0 <HAL_ADC_ConvCpltCallback+0x28>)
 80007c8:	f001 f924 	bl	8001a14 <HAL_ADC_GetValue>
 80007cc:	4603      	mov	r3, r0
 80007ce:	4a05      	ldr	r2, [pc, #20]	; (80007e4 <HAL_ADC_ConvCpltCallback+0x2c>)
 80007d0:	6013      	str	r3, [r2, #0]
}
 80007d2:	bf00      	nop
 80007d4:	3708      	adds	r7, #8
 80007d6:	46bd      	mov	sp, r7
 80007d8:	bd80      	pop	{r7, pc}
 80007da:	bf00      	nop
 80007dc:	240001ac 	.word	0x240001ac
 80007e0:	2400007c 	.word	0x2400007c
 80007e4:	240001a8 	.word	0x240001a8

080007e8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80007e8:	b580      	push	{r7, lr}
 80007ea:	b082      	sub	sp, #8
 80007ec:	af00      	add	r7, sp, #0
  int32_t timeout;
/* USER CODE END Boot_Mode_Sequence_0 */

/* USER CODE BEGIN Boot_Mode_Sequence_1 */
  /* Wait until CPU2 boots and enters in stop mode or timeout*/
  timeout = 0xFFFF;
 80007ee:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80007f2:	607b      	str	r3, [r7, #4]
  while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) != RESET) && (timeout-- > 0));
 80007f4:	bf00      	nop
 80007f6:	4b32      	ldr	r3, [pc, #200]	; (80008c0 <main+0xd8>)
 80007f8:	681b      	ldr	r3, [r3, #0]
 80007fa:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80007fe:	2b00      	cmp	r3, #0
 8000800:	d004      	beq.n	800080c <main+0x24>
 8000802:	687b      	ldr	r3, [r7, #4]
 8000804:	1e5a      	subs	r2, r3, #1
 8000806:	607a      	str	r2, [r7, #4]
 8000808:	2b00      	cmp	r3, #0
 800080a:	dcf4      	bgt.n	80007f6 <main+0xe>
  if ( timeout < 0 )
 800080c:	687b      	ldr	r3, [r7, #4]
 800080e:	2b00      	cmp	r3, #0
 8000810:	da01      	bge.n	8000816 <main+0x2e>
  {
  Error_Handler();
 8000812:	f000 f9cd 	bl	8000bb0 <Error_Handler>
  }
/* USER CODE END Boot_Mode_Sequence_1 */
  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000816:	f000 fb4f 	bl	8000eb8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800081a:	f000 f85f 	bl	80008dc <SystemClock_Config>
/* USER CODE BEGIN Boot_Mode_Sequence_2 */
/* When system initialization is finished, Cortex-M7 will release Cortex-M4 by means of
HSEM notification */
/*HW semaphore Clock enable*/
__HAL_RCC_HSEM_CLK_ENABLE();
 800081e:	4b28      	ldr	r3, [pc, #160]	; (80008c0 <main+0xd8>)
 8000820:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000824:	4a26      	ldr	r2, [pc, #152]	; (80008c0 <main+0xd8>)
 8000826:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800082a:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 800082e:	4b24      	ldr	r3, [pc, #144]	; (80008c0 <main+0xd8>)
 8000830:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000834:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000838:	603b      	str	r3, [r7, #0]
 800083a:	683b      	ldr	r3, [r7, #0]
/*Take HSEM */
HAL_HSEM_FastTake(HSEM_ID_0);
 800083c:	2000      	movs	r0, #0
 800083e:	f002 fc21 	bl	8003084 <HAL_HSEM_FastTake>
/*Release HSEM in order to notify the CPU2(CM4)*/
HAL_HSEM_Release(HSEM_ID_0,0);
 8000842:	2100      	movs	r1, #0
 8000844:	2000      	movs	r0, #0
 8000846:	f002 fc37 	bl	80030b8 <HAL_HSEM_Release>
/* wait until CPU2 wakes up from stop mode */
timeout = 0xFFFF;
 800084a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800084e:	607b      	str	r3, [r7, #4]
while((__HAL_RCC_GET_FLAG(RCC_FLAG_D2CKRDY) == RESET) && (timeout-- > 0));
 8000850:	bf00      	nop
 8000852:	4b1b      	ldr	r3, [pc, #108]	; (80008c0 <main+0xd8>)
 8000854:	681b      	ldr	r3, [r3, #0]
 8000856:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800085a:	2b00      	cmp	r3, #0
 800085c:	d104      	bne.n	8000868 <main+0x80>
 800085e:	687b      	ldr	r3, [r7, #4]
 8000860:	1e5a      	subs	r2, r3, #1
 8000862:	607a      	str	r2, [r7, #4]
 8000864:	2b00      	cmp	r3, #0
 8000866:	dcf4      	bgt.n	8000852 <main+0x6a>
if ( timeout < 0 )
 8000868:	687b      	ldr	r3, [r7, #4]
 800086a:	2b00      	cmp	r3, #0
 800086c:	da01      	bge.n	8000872 <main+0x8a>
{
Error_Handler();
 800086e:	f000 f99f 	bl	8000bb0 <Error_Handler>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000872:	f000 f973 	bl	8000b5c <MX_GPIO_Init>
  MX_ADC1_Init();
 8000876:	f000 f8ad 	bl	80009d4 <MX_ADC1_Init>
  MX_USART1_UART_Init();
 800087a:	f000 f923 	bl	8000ac4 <MX_USART1_UART_Init>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
	  if(adc_valid == 1){
 800087e:	4b11      	ldr	r3, [pc, #68]	; (80008c4 <main+0xdc>)
 8000880:	781b      	ldrb	r3, [r3, #0]
 8000882:	2b01      	cmp	r3, #1
 8000884:	d117      	bne.n	80008b6 <main+0xce>
		  sprintf(txBuf, "ADC: %d\r\n", (int)adc_result);
 8000886:	4b10      	ldr	r3, [pc, #64]	; (80008c8 <main+0xe0>)
 8000888:	681b      	ldr	r3, [r3, #0]
 800088a:	461a      	mov	r2, r3
 800088c:	490f      	ldr	r1, [pc, #60]	; (80008cc <main+0xe4>)
 800088e:	4810      	ldr	r0, [pc, #64]	; (80008d0 <main+0xe8>)
 8000890:	f007 fb08 	bl	8007ea4 <siprintf>
		  HAL_UART_Transmit(&huart1, (uint8_t *)txBuf, strlen(txBuf), HAL_MAX_DELAY);
 8000894:	480e      	ldr	r0, [pc, #56]	; (80008d0 <main+0xe8>)
 8000896:	f7ff fd23 	bl	80002e0 <strlen>
 800089a:	4603      	mov	r3, r0
 800089c:	b29a      	uxth	r2, r3
 800089e:	f04f 33ff 	mov.w	r3, #4294967295
 80008a2:	490b      	ldr	r1, [pc, #44]	; (80008d0 <main+0xe8>)
 80008a4:	480b      	ldr	r0, [pc, #44]	; (80008d4 <main+0xec>)
 80008a6:	f006 f9e9 	bl	8006c7c <HAL_UART_Transmit>
		  adc_valid = 0;
 80008aa:	4b06      	ldr	r3, [pc, #24]	; (80008c4 <main+0xdc>)
 80008ac:	2200      	movs	r2, #0
 80008ae:	701a      	strb	r2, [r3, #0]
		  HAL_ADC_Start_IT(&hadc1);
 80008b0:	4809      	ldr	r0, [pc, #36]	; (80008d8 <main+0xf0>)
 80008b2:	f000 ff71 	bl	8001798 <HAL_ADC_Start_IT>
	  }
	  HAL_Delay(100);
 80008b6:	2064      	movs	r0, #100	; 0x64
 80008b8:	f000 fb90 	bl	8000fdc <HAL_Delay>
	  if(adc_valid == 1){
 80008bc:	e7df      	b.n	800087e <main+0x96>
 80008be:	bf00      	nop
 80008c0:	58024400 	.word	0x58024400
 80008c4:	240001ac 	.word	0x240001ac
 80008c8:	240001a8 	.word	0x240001a8
 80008cc:	08008804 	.word	0x08008804
 80008d0:	24000174 	.word	0x24000174
 80008d4:	240000e0 	.word	0x240000e0
 80008d8:	2400007c 	.word	0x2400007c

080008dc <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80008dc:	b580      	push	{r7, lr}
 80008de:	b09c      	sub	sp, #112	; 0x70
 80008e0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80008e2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008e6:	224c      	movs	r2, #76	; 0x4c
 80008e8:	2100      	movs	r1, #0
 80008ea:	4618      	mov	r0, r3
 80008ec:	f007 fafa 	bl	8007ee4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80008f0:	1d3b      	adds	r3, r7, #4
 80008f2:	2220      	movs	r2, #32
 80008f4:	2100      	movs	r1, #0
 80008f6:	4618      	mov	r0, r3
 80008f8:	f007 faf4 	bl	8007ee4 <memset>

  /** Supply configuration update enable
  */
  HAL_PWREx_ConfigSupply(PWR_DIRECT_SMPS_SUPPLY);
 80008fc:	2004      	movs	r0, #4
 80008fe:	f002 fbef 	bl	80030e0 <HAL_PWREx_ConfigSupply>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 8000902:	2300      	movs	r3, #0
 8000904:	603b      	str	r3, [r7, #0]
 8000906:	4b31      	ldr	r3, [pc, #196]	; (80009cc <SystemClock_Config+0xf0>)
 8000908:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800090a:	4a30      	ldr	r2, [pc, #192]	; (80009cc <SystemClock_Config+0xf0>)
 800090c:	f023 0301 	bic.w	r3, r3, #1
 8000910:	62d3      	str	r3, [r2, #44]	; 0x2c
 8000912:	4b2e      	ldr	r3, [pc, #184]	; (80009cc <SystemClock_Config+0xf0>)
 8000914:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8000916:	f003 0301 	and.w	r3, r3, #1
 800091a:	603b      	str	r3, [r7, #0]
 800091c:	4b2c      	ldr	r3, [pc, #176]	; (80009d0 <SystemClock_Config+0xf4>)
 800091e:	699b      	ldr	r3, [r3, #24]
 8000920:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 8000924:	4a2a      	ldr	r2, [pc, #168]	; (80009d0 <SystemClock_Config+0xf4>)
 8000926:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800092a:	6193      	str	r3, [r2, #24]
 800092c:	4b28      	ldr	r3, [pc, #160]	; (80009d0 <SystemClock_Config+0xf4>)
 800092e:	699b      	ldr	r3, [r3, #24]
 8000930:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8000934:	603b      	str	r3, [r7, #0]
 8000936:	683b      	ldr	r3, [r7, #0]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_VOSRDY)) {}
 8000938:	bf00      	nop
 800093a:	4b25      	ldr	r3, [pc, #148]	; (80009d0 <SystemClock_Config+0xf4>)
 800093c:	699b      	ldr	r3, [r3, #24]
 800093e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8000942:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8000946:	d1f8      	bne.n	800093a <SystemClock_Config+0x5e>

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8000948:	2301      	movs	r3, #1
 800094a:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 800094c:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8000950:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8000952:	2302      	movs	r3, #2
 8000954:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8000956:	2302      	movs	r3, #2
 8000958:	64fb      	str	r3, [r7, #76]	; 0x4c
  RCC_OscInitStruct.PLL.PLLM = 2;
 800095a:	2302      	movs	r3, #2
 800095c:	653b      	str	r3, [r7, #80]	; 0x50
  RCC_OscInitStruct.PLL.PLLN = 12;
 800095e:	230c      	movs	r3, #12
 8000960:	657b      	str	r3, [r7, #84]	; 0x54
  RCC_OscInitStruct.PLL.PLLP = 2;
 8000962:	2302      	movs	r3, #2
 8000964:	65bb      	str	r3, [r7, #88]	; 0x58
  RCC_OscInitStruct.PLL.PLLQ = 2;
 8000966:	2302      	movs	r3, #2
 8000968:	65fb      	str	r3, [r7, #92]	; 0x5c
  RCC_OscInitStruct.PLL.PLLR = 2;
 800096a:	2302      	movs	r3, #2
 800096c:	663b      	str	r3, [r7, #96]	; 0x60
  RCC_OscInitStruct.PLL.PLLRGE = RCC_PLL1VCIRANGE_3;
 800096e:	230c      	movs	r3, #12
 8000970:	667b      	str	r3, [r7, #100]	; 0x64
  RCC_OscInitStruct.PLL.PLLVCOSEL = RCC_PLL1VCOMEDIUM;
 8000972:	2302      	movs	r3, #2
 8000974:	66bb      	str	r3, [r7, #104]	; 0x68
  RCC_OscInitStruct.PLL.PLLFRACN = 0;
 8000976:	2300      	movs	r3, #0
 8000978:	66fb      	str	r3, [r7, #108]	; 0x6c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800097a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800097e:	4618      	mov	r0, r3
 8000980:	f002 fc08 	bl	8003194 <HAL_RCC_OscConfig>
 8000984:	4603      	mov	r3, r0
 8000986:	2b00      	cmp	r3, #0
 8000988:	d001      	beq.n	800098e <SystemClock_Config+0xb2>
  {
    Error_Handler();
 800098a:	f000 f911 	bl	8000bb0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800098e:	233f      	movs	r3, #63	; 0x3f
 8000990:	607b      	str	r3, [r7, #4]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2
                              |RCC_CLOCKTYPE_D3PCLK1|RCC_CLOCKTYPE_D1PCLK1;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000992:	2303      	movs	r3, #3
 8000994:	60bb      	str	r3, [r7, #8]
  RCC_ClkInitStruct.SYSCLKDivider = RCC_SYSCLK_DIV1;
 8000996:	2300      	movs	r3, #0
 8000998:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_HCLK_DIV1;
 800099a:	2300      	movs	r3, #0
 800099c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB3CLKDivider = RCC_APB3_DIV1;
 800099e:	2300      	movs	r3, #0
 80009a0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_APB1_DIV1;
 80009a2:	2300      	movs	r3, #0
 80009a4:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_APB2_DIV2;
 80009a6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80009aa:	61fb      	str	r3, [r7, #28]
  RCC_ClkInitStruct.APB4CLKDivider = RCC_APB4_DIV1;
 80009ac:	2300      	movs	r3, #0
 80009ae:	623b      	str	r3, [r7, #32]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 80009b0:	1d3b      	adds	r3, r7, #4
 80009b2:	2101      	movs	r1, #1
 80009b4:	4618      	mov	r0, r3
 80009b6:	f003 f847 	bl	8003a48 <HAL_RCC_ClockConfig>
 80009ba:	4603      	mov	r3, r0
 80009bc:	2b00      	cmp	r3, #0
 80009be:	d001      	beq.n	80009c4 <SystemClock_Config+0xe8>
  {
    Error_Handler();
 80009c0:	f000 f8f6 	bl	8000bb0 <Error_Handler>
  }
}
 80009c4:	bf00      	nop
 80009c6:	3770      	adds	r7, #112	; 0x70
 80009c8:	46bd      	mov	sp, r7
 80009ca:	bd80      	pop	{r7, pc}
 80009cc:	58000400 	.word	0x58000400
 80009d0:	58024800 	.word	0x58024800

080009d4 <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	b08a      	sub	sp, #40	; 0x28
 80009d8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_MultiModeTypeDef multimode = {0};
 80009da:	f107 031c 	add.w	r3, r7, #28
 80009de:	2200      	movs	r2, #0
 80009e0:	601a      	str	r2, [r3, #0]
 80009e2:	605a      	str	r2, [r3, #4]
 80009e4:	609a      	str	r2, [r3, #8]
  ADC_ChannelConfTypeDef sConfig = {0};
 80009e6:	463b      	mov	r3, r7
 80009e8:	2200      	movs	r2, #0
 80009ea:	601a      	str	r2, [r3, #0]
 80009ec:	605a      	str	r2, [r3, #4]
 80009ee:	609a      	str	r2, [r3, #8]
 80009f0:	60da      	str	r2, [r3, #12]
 80009f2:	611a      	str	r2, [r3, #16]
 80009f4:	615a      	str	r2, [r3, #20]
 80009f6:	619a      	str	r2, [r3, #24]

  /* USER CODE END ADC1_Init 1 */

  /** Common config
  */
  hadc1.Instance = ADC1;
 80009f8:	4b30      	ldr	r3, [pc, #192]	; (8000abc <MX_ADC1_Init+0xe8>)
 80009fa:	4a31      	ldr	r2, [pc, #196]	; (8000ac0 <MX_ADC1_Init+0xec>)
 80009fc:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_ASYNC_DIV2;
 80009fe:	4b2f      	ldr	r3, [pc, #188]	; (8000abc <MX_ADC1_Init+0xe8>)
 8000a00:	f44f 2280 	mov.w	r2, #262144	; 0x40000
 8000a04:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_16B;
 8000a06:	4b2d      	ldr	r3, [pc, #180]	; (8000abc <MX_ADC1_Init+0xe8>)
 8000a08:	2200      	movs	r2, #0
 8000a0a:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000a0c:	4b2b      	ldr	r3, [pc, #172]	; (8000abc <MX_ADC1_Init+0xe8>)
 8000a0e:	2200      	movs	r2, #0
 8000a10:	60da      	str	r2, [r3, #12]
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000a12:	4b2a      	ldr	r3, [pc, #168]	; (8000abc <MX_ADC1_Init+0xe8>)
 8000a14:	2204      	movs	r2, #4
 8000a16:	611a      	str	r2, [r3, #16]
  hadc1.Init.LowPowerAutoWait = DISABLE;
 8000a18:	4b28      	ldr	r3, [pc, #160]	; (8000abc <MX_ADC1_Init+0xe8>)
 8000a1a:	2200      	movs	r2, #0
 8000a1c:	751a      	strb	r2, [r3, #20]
  hadc1.Init.ContinuousConvMode = DISABLE;
 8000a1e:	4b27      	ldr	r3, [pc, #156]	; (8000abc <MX_ADC1_Init+0xe8>)
 8000a20:	2200      	movs	r2, #0
 8000a22:	755a      	strb	r2, [r3, #21]
  hadc1.Init.NbrOfConversion = 1;
 8000a24:	4b25      	ldr	r3, [pc, #148]	; (8000abc <MX_ADC1_Init+0xe8>)
 8000a26:	2201      	movs	r2, #1
 8000a28:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8000a2a:	4b24      	ldr	r3, [pc, #144]	; (8000abc <MX_ADC1_Init+0xe8>)
 8000a2c:	2200      	movs	r2, #0
 8000a2e:	771a      	strb	r2, [r3, #28]
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000a30:	4b22      	ldr	r3, [pc, #136]	; (8000abc <MX_ADC1_Init+0xe8>)
 8000a32:	2200      	movs	r2, #0
 8000a34:	625a      	str	r2, [r3, #36]	; 0x24
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8000a36:	4b21      	ldr	r3, [pc, #132]	; (8000abc <MX_ADC1_Init+0xe8>)
 8000a38:	2200      	movs	r2, #0
 8000a3a:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.ConversionDataManagement = ADC_CONVERSIONDATA_DR;
 8000a3c:	4b1f      	ldr	r3, [pc, #124]	; (8000abc <MX_ADC1_Init+0xe8>)
 8000a3e:	2200      	movs	r2, #0
 8000a40:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8000a42:	4b1e      	ldr	r3, [pc, #120]	; (8000abc <MX_ADC1_Init+0xe8>)
 8000a44:	2200      	movs	r2, #0
 8000a46:	631a      	str	r2, [r3, #48]	; 0x30
  hadc1.Init.LeftBitShift = ADC_LEFTBITSHIFT_NONE;
 8000a48:	4b1c      	ldr	r3, [pc, #112]	; (8000abc <MX_ADC1_Init+0xe8>)
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	635a      	str	r2, [r3, #52]	; 0x34
  hadc1.Init.OversamplingMode = DISABLE;
 8000a4e:	4b1b      	ldr	r3, [pc, #108]	; (8000abc <MX_ADC1_Init+0xe8>)
 8000a50:	2200      	movs	r2, #0
 8000a52:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8000a56:	4819      	ldr	r0, [pc, #100]	; (8000abc <MX_ADC1_Init+0xe8>)
 8000a58:	f000 fcfc 	bl	8001454 <HAL_ADC_Init>
 8000a5c:	4603      	mov	r3, r0
 8000a5e:	2b00      	cmp	r3, #0
 8000a60:	d001      	beq.n	8000a66 <MX_ADC1_Init+0x92>
  {
    Error_Handler();
 8000a62:	f000 f8a5 	bl	8000bb0 <Error_Handler>
  }

  /** Configure the ADC multi-mode
  */
  multimode.Mode = ADC_MODE_INDEPENDENT;
 8000a66:	2300      	movs	r3, #0
 8000a68:	61fb      	str	r3, [r7, #28]
  if (HAL_ADCEx_MultiModeConfigChannel(&hadc1, &multimode) != HAL_OK)
 8000a6a:	f107 031c 	add.w	r3, r7, #28
 8000a6e:	4619      	mov	r1, r3
 8000a70:	4812      	ldr	r0, [pc, #72]	; (8000abc <MX_ADC1_Init+0xe8>)
 8000a72:	f001 ff69 	bl	8002948 <HAL_ADCEx_MultiModeConfigChannel>
 8000a76:	4603      	mov	r3, r0
 8000a78:	2b00      	cmp	r3, #0
 8000a7a:	d001      	beq.n	8000a80 <MX_ADC1_Init+0xac>
  {
    Error_Handler();
 8000a7c:	f000 f898 	bl	8000bb0 <Error_Handler>
  }

  /** Configure Regular Channel
  */
  sConfig.Channel = ADC_CHANNEL_0;
 8000a80:	2301      	movs	r3, #1
 8000a82:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000a84:	2306      	movs	r3, #6
 8000a86:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8000a88:	2300      	movs	r3, #0
 8000a8a:	60bb      	str	r3, [r7, #8]
  sConfig.SingleDiff = ADC_SINGLE_ENDED;
 8000a8c:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8000a90:	60fb      	str	r3, [r7, #12]
  sConfig.OffsetNumber = ADC_OFFSET_NONE;
 8000a92:	2304      	movs	r3, #4
 8000a94:	613b      	str	r3, [r7, #16]
  sConfig.Offset = 0;
 8000a96:	2300      	movs	r3, #0
 8000a98:	617b      	str	r3, [r7, #20]
  sConfig.OffsetSignedSaturation = DISABLE;
 8000a9a:	2300      	movs	r3, #0
 8000a9c:	767b      	strb	r3, [r7, #25]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000a9e:	463b      	mov	r3, r7
 8000aa0:	4619      	mov	r1, r3
 8000aa2:	4806      	ldr	r0, [pc, #24]	; (8000abc <MX_ADC1_Init+0xe8>)
 8000aa4:	f001 fa12 	bl	8001ecc <HAL_ADC_ConfigChannel>
 8000aa8:	4603      	mov	r3, r0
 8000aaa:	2b00      	cmp	r3, #0
 8000aac:	d001      	beq.n	8000ab2 <MX_ADC1_Init+0xde>
  {
    Error_Handler();
 8000aae:	f000 f87f 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 8000ab2:	bf00      	nop
 8000ab4:	3728      	adds	r7, #40	; 0x28
 8000ab6:	46bd      	mov	sp, r7
 8000ab8:	bd80      	pop	{r7, pc}
 8000aba:	bf00      	nop
 8000abc:	2400007c 	.word	0x2400007c
 8000ac0:	40022000 	.word	0x40022000

08000ac4 <MX_USART1_UART_Init>:
  * @brief USART1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART1_UART_Init(void)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8000ac8:	4b22      	ldr	r3, [pc, #136]	; (8000b54 <MX_USART1_UART_Init+0x90>)
 8000aca:	4a23      	ldr	r2, [pc, #140]	; (8000b58 <MX_USART1_UART_Init+0x94>)
 8000acc:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 8000ace:	4b21      	ldr	r3, [pc, #132]	; (8000b54 <MX_USART1_UART_Init+0x90>)
 8000ad0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8000ad4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8000ad6:	4b1f      	ldr	r3, [pc, #124]	; (8000b54 <MX_USART1_UART_Init+0x90>)
 8000ad8:	2200      	movs	r2, #0
 8000ada:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 8000adc:	4b1d      	ldr	r3, [pc, #116]	; (8000b54 <MX_USART1_UART_Init+0x90>)
 8000ade:	2200      	movs	r2, #0
 8000ae0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8000ae2:	4b1c      	ldr	r3, [pc, #112]	; (8000b54 <MX_USART1_UART_Init+0x90>)
 8000ae4:	2200      	movs	r2, #0
 8000ae6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8000ae8:	4b1a      	ldr	r3, [pc, #104]	; (8000b54 <MX_USART1_UART_Init+0x90>)
 8000aea:	220c      	movs	r2, #12
 8000aec:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000aee:	4b19      	ldr	r3, [pc, #100]	; (8000b54 <MX_USART1_UART_Init+0x90>)
 8000af0:	2200      	movs	r2, #0
 8000af2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8000af4:	4b17      	ldr	r3, [pc, #92]	; (8000b54 <MX_USART1_UART_Init+0x90>)
 8000af6:	2200      	movs	r2, #0
 8000af8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 8000afa:	4b16      	ldr	r3, [pc, #88]	; (8000b54 <MX_USART1_UART_Init+0x90>)
 8000afc:	2200      	movs	r2, #0
 8000afe:	621a      	str	r2, [r3, #32]
  huart1.Init.ClockPrescaler = UART_PRESCALER_DIV1;
 8000b00:	4b14      	ldr	r3, [pc, #80]	; (8000b54 <MX_USART1_UART_Init+0x90>)
 8000b02:	2200      	movs	r2, #0
 8000b04:	625a      	str	r2, [r3, #36]	; 0x24
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8000b06:	4b13      	ldr	r3, [pc, #76]	; (8000b54 <MX_USART1_UART_Init+0x90>)
 8000b08:	2200      	movs	r2, #0
 8000b0a:	629a      	str	r2, [r3, #40]	; 0x28
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8000b0c:	4811      	ldr	r0, [pc, #68]	; (8000b54 <MX_USART1_UART_Init+0x90>)
 8000b0e:	f006 f865 	bl	8006bdc <HAL_UART_Init>
 8000b12:	4603      	mov	r3, r0
 8000b14:	2b00      	cmp	r3, #0
 8000b16:	d001      	beq.n	8000b1c <MX_USART1_UART_Init+0x58>
  {
    Error_Handler();
 8000b18:	f000 f84a 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetTxFifoThreshold(&huart1, UART_TXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b1c:	2100      	movs	r1, #0
 8000b1e:	480d      	ldr	r0, [pc, #52]	; (8000b54 <MX_USART1_UART_Init+0x90>)
 8000b20:	f007 f8f5 	bl	8007d0e <HAL_UARTEx_SetTxFifoThreshold>
 8000b24:	4603      	mov	r3, r0
 8000b26:	2b00      	cmp	r3, #0
 8000b28:	d001      	beq.n	8000b2e <MX_USART1_UART_Init+0x6a>
  {
    Error_Handler();
 8000b2a:	f000 f841 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_SetRxFifoThreshold(&huart1, UART_RXFIFO_THRESHOLD_1_8) != HAL_OK)
 8000b2e:	2100      	movs	r1, #0
 8000b30:	4808      	ldr	r0, [pc, #32]	; (8000b54 <MX_USART1_UART_Init+0x90>)
 8000b32:	f007 f92a 	bl	8007d8a <HAL_UARTEx_SetRxFifoThreshold>
 8000b36:	4603      	mov	r3, r0
 8000b38:	2b00      	cmp	r3, #0
 8000b3a:	d001      	beq.n	8000b40 <MX_USART1_UART_Init+0x7c>
  {
    Error_Handler();
 8000b3c:	f000 f838 	bl	8000bb0 <Error_Handler>
  }
  if (HAL_UARTEx_DisableFifoMode(&huart1) != HAL_OK)
 8000b40:	4804      	ldr	r0, [pc, #16]	; (8000b54 <MX_USART1_UART_Init+0x90>)
 8000b42:	f007 f8ab 	bl	8007c9c <HAL_UARTEx_DisableFifoMode>
 8000b46:	4603      	mov	r3, r0
 8000b48:	2b00      	cmp	r3, #0
 8000b4a:	d001      	beq.n	8000b50 <MX_USART1_UART_Init+0x8c>
  {
    Error_Handler();
 8000b4c:	f000 f830 	bl	8000bb0 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8000b50:	bf00      	nop
 8000b52:	bd80      	pop	{r7, pc}
 8000b54:	240000e0 	.word	0x240000e0
 8000b58:	40011000 	.word	0x40011000

08000b5c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000b5c:	b480      	push	{r7}
 8000b5e:	b083      	sub	sp, #12
 8000b60:	af00      	add	r7, sp, #0
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000b62:	4b12      	ldr	r3, [pc, #72]	; (8000bac <MX_GPIO_Init+0x50>)
 8000b64:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b68:	4a10      	ldr	r2, [pc, #64]	; (8000bac <MX_GPIO_Init+0x50>)
 8000b6a:	f043 0302 	orr.w	r3, r3, #2
 8000b6e:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b72:	4b0e      	ldr	r3, [pc, #56]	; (8000bac <MX_GPIO_Init+0x50>)
 8000b74:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b78:	f003 0302 	and.w	r3, r3, #2
 8000b7c:	607b      	str	r3, [r7, #4]
 8000b7e:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000b80:	4b0a      	ldr	r3, [pc, #40]	; (8000bac <MX_GPIO_Init+0x50>)
 8000b82:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b86:	4a09      	ldr	r2, [pc, #36]	; (8000bac <MX_GPIO_Init+0x50>)
 8000b88:	f043 0301 	orr.w	r3, r3, #1
 8000b8c:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000b90:	4b06      	ldr	r3, [pc, #24]	; (8000bac <MX_GPIO_Init+0x50>)
 8000b92:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000b96:	f003 0301 	and.w	r3, r3, #1
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000b9e:	bf00      	nop
 8000ba0:	370c      	adds	r7, #12
 8000ba2:	46bd      	mov	sp, r7
 8000ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ba8:	4770      	bx	lr
 8000baa:	bf00      	nop
 8000bac:	58024400 	.word	0x58024400

08000bb0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000bb0:	b480      	push	{r7}
 8000bb2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000bb4:	b672      	cpsid	i
}
 8000bb6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000bb8:	e7fe      	b.n	8000bb8 <Error_Handler+0x8>
	...

08000bbc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000bbc:	b480      	push	{r7}
 8000bbe:	b083      	sub	sp, #12
 8000bc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000bc2:	4b0a      	ldr	r3, [pc, #40]	; (8000bec <HAL_MspInit+0x30>)
 8000bc4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bc8:	4a08      	ldr	r2, [pc, #32]	; (8000bec <HAL_MspInit+0x30>)
 8000bca:	f043 0302 	orr.w	r3, r3, #2
 8000bce:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8000bd2:	4b06      	ldr	r3, [pc, #24]	; (8000bec <HAL_MspInit+0x30>)
 8000bd4:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8000bd8:	f003 0302 	and.w	r3, r3, #2
 8000bdc:	607b      	str	r3, [r7, #4]
 8000bde:	687b      	ldr	r3, [r7, #4]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000be0:	bf00      	nop
 8000be2:	370c      	adds	r7, #12
 8000be4:	46bd      	mov	sp, r7
 8000be6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000bea:	4770      	bx	lr
 8000bec:	58024400 	.word	0x58024400

08000bf0 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 8000bf0:	b580      	push	{r7, lr}
 8000bf2:	b0b6      	sub	sp, #216	; 0xd8
 8000bf4:	af00      	add	r7, sp, #0
 8000bf6:	6078      	str	r0, [r7, #4]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000bf8:	f107 0310 	add.w	r3, r7, #16
 8000bfc:	22c8      	movs	r2, #200	; 0xc8
 8000bfe:	2100      	movs	r1, #0
 8000c00:	4618      	mov	r0, r3
 8000c02:	f007 f96f 	bl	8007ee4 <memset>
  if(hadc->Instance==ADC1)
 8000c06:	687b      	ldr	r3, [r7, #4]
 8000c08:	681b      	ldr	r3, [r3, #0]
 8000c0a:	4a2b      	ldr	r2, [pc, #172]	; (8000cb8 <HAL_ADC_MspInit+0xc8>)
 8000c0c:	4293      	cmp	r3, r2
 8000c0e:	d14e      	bne.n	8000cae <HAL_ADC_MspInit+0xbe>

  /* USER CODE END ADC1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_ADC;
 8000c10:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8000c14:	f04f 0300 	mov.w	r3, #0
 8000c18:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.PLL2.PLL2M = 2;
 8000c1c:	2302      	movs	r3, #2
 8000c1e:	61bb      	str	r3, [r7, #24]
    PeriphClkInitStruct.PLL2.PLL2N = 12;
 8000c20:	230c      	movs	r3, #12
 8000c22:	61fb      	str	r3, [r7, #28]
    PeriphClkInitStruct.PLL2.PLL2P = 2;
 8000c24:	2302      	movs	r3, #2
 8000c26:	623b      	str	r3, [r7, #32]
    PeriphClkInitStruct.PLL2.PLL2Q = 2;
 8000c28:	2302      	movs	r3, #2
 8000c2a:	627b      	str	r3, [r7, #36]	; 0x24
    PeriphClkInitStruct.PLL2.PLL2R = 2;
 8000c2c:	2302      	movs	r3, #2
 8000c2e:	62bb      	str	r3, [r7, #40]	; 0x28
    PeriphClkInitStruct.PLL2.PLL2RGE = RCC_PLL2VCIRANGE_3;
 8000c30:	23c0      	movs	r3, #192	; 0xc0
 8000c32:	62fb      	str	r3, [r7, #44]	; 0x2c
    PeriphClkInitStruct.PLL2.PLL2VCOSEL = RCC_PLL2VCOMEDIUM;
 8000c34:	2320      	movs	r3, #32
 8000c36:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.PLL2.PLL2FRACN = 0.0;
 8000c38:	2300      	movs	r3, #0
 8000c3a:	637b      	str	r3, [r7, #52]	; 0x34
    PeriphClkInitStruct.AdcClockSelection = RCC_ADCCLKSOURCE_PLL2;
 8000c3c:	2300      	movs	r3, #0
 8000c3e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000c42:	f107 0310 	add.w	r3, r7, #16
 8000c46:	4618      	mov	r0, r3
 8000c48:	f003 fa8a 	bl	8004160 <HAL_RCCEx_PeriphCLKConfig>
 8000c4c:	4603      	mov	r3, r0
 8000c4e:	2b00      	cmp	r3, #0
 8000c50:	d001      	beq.n	8000c56 <HAL_ADC_MspInit+0x66>
    {
      Error_Handler();
 8000c52:	f7ff ffad 	bl	8000bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_ADC12_CLK_ENABLE();
 8000c56:	4b19      	ldr	r3, [pc, #100]	; (8000cbc <HAL_ADC_MspInit+0xcc>)
 8000c58:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c5c:	4a17      	ldr	r2, [pc, #92]	; (8000cbc <HAL_ADC_MspInit+0xcc>)
 8000c5e:	f043 0320 	orr.w	r3, r3, #32
 8000c62:	f8c2 30d8 	str.w	r3, [r2, #216]	; 0xd8
 8000c66:	4b15      	ldr	r3, [pc, #84]	; (8000cbc <HAL_ADC_MspInit+0xcc>)
 8000c68:	f8d3 30d8 	ldr.w	r3, [r3, #216]	; 0xd8
 8000c6c:	f003 0320 	and.w	r3, r3, #32
 8000c70:	60fb      	str	r3, [r7, #12]
 8000c72:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000c74:	4b11      	ldr	r3, [pc, #68]	; (8000cbc <HAL_ADC_MspInit+0xcc>)
 8000c76:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c7a:	4a10      	ldr	r2, [pc, #64]	; (8000cbc <HAL_ADC_MspInit+0xcc>)
 8000c7c:	f043 0301 	orr.w	r3, r3, #1
 8000c80:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000c84:	4b0d      	ldr	r3, [pc, #52]	; (8000cbc <HAL_ADC_MspInit+0xcc>)
 8000c86:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000c8a:	f003 0301 	and.w	r3, r3, #1
 8000c8e:	60bb      	str	r3, [r7, #8]
 8000c90:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration
    PA0_C     ------> ADC1_INP0
    */
    HAL_SYSCFG_AnalogSwitchConfig(SYSCFG_SWITCH_PA0, SYSCFG_SWITCH_PA0_OPEN);
 8000c92:	f04f 7180 	mov.w	r1, #16777216	; 0x1000000
 8000c96:	f04f 7080 	mov.w	r0, #16777216	; 0x1000000
 8000c9a:	f000 f9cf 	bl	800103c <HAL_SYSCFG_AnalogSwitchConfig>

    /* ADC1 interrupt Init */
    HAL_NVIC_SetPriority(ADC_IRQn, 5, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2105      	movs	r1, #5
 8000ca2:	2012      	movs	r0, #18
 8000ca4:	f002 f809 	bl	8002cba <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ADC_IRQn);
 8000ca8:	2012      	movs	r0, #18
 8000caa:	f002 f820 	bl	8002cee <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 8000cae:	bf00      	nop
 8000cb0:	37d8      	adds	r7, #216	; 0xd8
 8000cb2:	46bd      	mov	sp, r7
 8000cb4:	bd80      	pop	{r7, pc}
 8000cb6:	bf00      	nop
 8000cb8:	40022000 	.word	0x40022000
 8000cbc:	58024400 	.word	0x58024400

08000cc0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8000cc0:	b580      	push	{r7, lr}
 8000cc2:	b0bc      	sub	sp, #240	; 0xf0
 8000cc4:	af00      	add	r7, sp, #0
 8000cc6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000cc8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000ccc:	2200      	movs	r2, #0
 8000cce:	601a      	str	r2, [r3, #0]
 8000cd0:	605a      	str	r2, [r3, #4]
 8000cd2:	609a      	str	r2, [r3, #8]
 8000cd4:	60da      	str	r2, [r3, #12]
 8000cd6:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000cd8:	f107 0310 	add.w	r3, r7, #16
 8000cdc:	22c8      	movs	r2, #200	; 0xc8
 8000cde:	2100      	movs	r1, #0
 8000ce0:	4618      	mov	r0, r3
 8000ce2:	f007 f8ff 	bl	8007ee4 <memset>
  if(huart->Instance==USART1)
 8000ce6:	687b      	ldr	r3, [r7, #4]
 8000ce8:	681b      	ldr	r3, [r3, #0]
 8000cea:	4a26      	ldr	r2, [pc, #152]	; (8000d84 <HAL_UART_MspInit+0xc4>)
 8000cec:	4293      	cmp	r3, r2
 8000cee:	d145      	bne.n	8000d7c <HAL_UART_MspInit+0xbc>

  /* USER CODE END USART1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8000cf0:	f04f 0201 	mov.w	r2, #1
 8000cf4:	f04f 0300 	mov.w	r3, #0
 8000cf8:	e9c7 2304 	strd	r2, r3, [r7, #16]
    PeriphClkInitStruct.Usart16ClockSelection = RCC_USART16CLKSOURCE_D2PCLK2;
 8000cfc:	2300      	movs	r3, #0
 8000cfe:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000d02:	f107 0310 	add.w	r3, r7, #16
 8000d06:	4618      	mov	r0, r3
 8000d08:	f003 fa2a 	bl	8004160 <HAL_RCCEx_PeriphCLKConfig>
 8000d0c:	4603      	mov	r3, r0
 8000d0e:	2b00      	cmp	r3, #0
 8000d10:	d001      	beq.n	8000d16 <HAL_UART_MspInit+0x56>
    {
      Error_Handler();
 8000d12:	f7ff ff4d 	bl	8000bb0 <Error_Handler>
    }

    /* Peripheral clock enable */
    __HAL_RCC_USART1_CLK_ENABLE();
 8000d16:	4b1c      	ldr	r3, [pc, #112]	; (8000d88 <HAL_UART_MspInit+0xc8>)
 8000d18:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d1c:	4a1a      	ldr	r2, [pc, #104]	; (8000d88 <HAL_UART_MspInit+0xc8>)
 8000d1e:	f043 0310 	orr.w	r3, r3, #16
 8000d22:	f8c2 30f0 	str.w	r3, [r2, #240]	; 0xf0
 8000d26:	4b18      	ldr	r3, [pc, #96]	; (8000d88 <HAL_UART_MspInit+0xc8>)
 8000d28:	f8d3 30f0 	ldr.w	r3, [r3, #240]	; 0xf0
 8000d2c:	f003 0310 	and.w	r3, r3, #16
 8000d30:	60fb      	str	r3, [r7, #12]
 8000d32:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000d34:	4b14      	ldr	r3, [pc, #80]	; (8000d88 <HAL_UART_MspInit+0xc8>)
 8000d36:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d3a:	4a13      	ldr	r2, [pc, #76]	; (8000d88 <HAL_UART_MspInit+0xc8>)
 8000d3c:	f043 0302 	orr.w	r3, r3, #2
 8000d40:	f8c2 30e0 	str.w	r3, [r2, #224]	; 0xe0
 8000d44:	4b10      	ldr	r3, [pc, #64]	; (8000d88 <HAL_UART_MspInit+0xc8>)
 8000d46:	f8d3 30e0 	ldr.w	r3, [r3, #224]	; 0xe0
 8000d4a:	f003 0302 	and.w	r3, r3, #2
 8000d4e:	60bb      	str	r3, [r7, #8]
 8000d50:	68bb      	ldr	r3, [r7, #8]
    /**USART1 GPIO Configuration
    PB6     ------> USART1_TX
    PB7     ------> USART1_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8000d52:	23c0      	movs	r3, #192	; 0xc0
 8000d54:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000d58:	2302      	movs	r3, #2
 8000d5a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000d5e:	2300      	movs	r3, #0
 8000d60:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000d64:	2300      	movs	r3, #0
 8000d66:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8000d6a:	2307      	movs	r3, #7
 8000d6c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000d70:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8000d74:	4619      	mov	r1, r3
 8000d76:	4805      	ldr	r0, [pc, #20]	; (8000d8c <HAL_UART_MspInit+0xcc>)
 8000d78:	f001 ffd4 	bl	8002d24 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART1_MspInit 1 */

  /* USER CODE END USART1_MspInit 1 */
  }

}
 8000d7c:	bf00      	nop
 8000d7e:	37f0      	adds	r7, #240	; 0xf0
 8000d80:	46bd      	mov	sp, r7
 8000d82:	bd80      	pop	{r7, pc}
 8000d84:	40011000 	.word	0x40011000
 8000d88:	58024400 	.word	0x58024400
 8000d8c:	58020400 	.word	0x58020400

08000d90 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d90:	b480      	push	{r7}
 8000d92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000d94:	e7fe      	b.n	8000d94 <NMI_Handler+0x4>

08000d96 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d96:	b480      	push	{r7}
 8000d98:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d9a:	e7fe      	b.n	8000d9a <HardFault_Handler+0x4>

08000d9c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d9c:	b480      	push	{r7}
 8000d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000da0:	e7fe      	b.n	8000da0 <MemManage_Handler+0x4>

08000da2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000da2:	b480      	push	{r7}
 8000da4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000da6:	e7fe      	b.n	8000da6 <BusFault_Handler+0x4>

08000da8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000da8:	b480      	push	{r7}
 8000daa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000dac:	e7fe      	b.n	8000dac <UsageFault_Handler+0x4>

08000dae <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000dae:	b480      	push	{r7}
 8000db0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8000db2:	bf00      	nop
 8000db4:	46bd      	mov	sp, r7
 8000db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dba:	4770      	bx	lr

08000dbc <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000dbc:	b480      	push	{r7}
 8000dbe:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000dc0:	bf00      	nop
 8000dc2:	46bd      	mov	sp, r7
 8000dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dc8:	4770      	bx	lr

08000dca <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000dca:	b480      	push	{r7}
 8000dcc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000dce:	bf00      	nop
 8000dd0:	46bd      	mov	sp, r7
 8000dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dd6:	4770      	bx	lr

08000dd8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000ddc:	f000 f8de 	bl	8000f9c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000de0:	bf00      	nop
 8000de2:	bd80      	pop	{r7, pc}

08000de4 <ADC_IRQHandler>:

/**
  * @brief This function handles ADC1 and ADC2 global interrupts.
  */
void ADC_IRQHandler(void)
{
 8000de4:	b580      	push	{r7, lr}
 8000de6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ADC_IRQn 0 */

  /* USER CODE END ADC_IRQn 0 */
  HAL_ADC_IRQHandler(&hadc1);
 8000de8:	4802      	ldr	r0, [pc, #8]	; (8000df4 <ADC_IRQHandler+0x10>)
 8000dea:	f000 fe21 	bl	8001a30 <HAL_ADC_IRQHandler>
  /* USER CODE BEGIN ADC_IRQn 1 */

  /* USER CODE END ADC_IRQn 1 */
}
 8000dee:	bf00      	nop
 8000df0:	bd80      	pop	{r7, pc}
 8000df2:	bf00      	nop
 8000df4:	2400007c 	.word	0x2400007c

08000df8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000df8:	b580      	push	{r7, lr}
 8000dfa:	b086      	sub	sp, #24
 8000dfc:	af00      	add	r7, sp, #0
 8000dfe:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000e00:	4a14      	ldr	r2, [pc, #80]	; (8000e54 <_sbrk+0x5c>)
 8000e02:	4b15      	ldr	r3, [pc, #84]	; (8000e58 <_sbrk+0x60>)
 8000e04:	1ad3      	subs	r3, r2, r3
 8000e06:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000e08:	697b      	ldr	r3, [r7, #20]
 8000e0a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000e0c:	4b13      	ldr	r3, [pc, #76]	; (8000e5c <_sbrk+0x64>)
 8000e0e:	681b      	ldr	r3, [r3, #0]
 8000e10:	2b00      	cmp	r3, #0
 8000e12:	d102      	bne.n	8000e1a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000e14:	4b11      	ldr	r3, [pc, #68]	; (8000e5c <_sbrk+0x64>)
 8000e16:	4a12      	ldr	r2, [pc, #72]	; (8000e60 <_sbrk+0x68>)
 8000e18:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000e1a:	4b10      	ldr	r3, [pc, #64]	; (8000e5c <_sbrk+0x64>)
 8000e1c:	681a      	ldr	r2, [r3, #0]
 8000e1e:	687b      	ldr	r3, [r7, #4]
 8000e20:	4413      	add	r3, r2
 8000e22:	693a      	ldr	r2, [r7, #16]
 8000e24:	429a      	cmp	r2, r3
 8000e26:	d207      	bcs.n	8000e38 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000e28:	f007 f864 	bl	8007ef4 <__errno>
 8000e2c:	4603      	mov	r3, r0
 8000e2e:	220c      	movs	r2, #12
 8000e30:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000e32:	f04f 33ff 	mov.w	r3, #4294967295
 8000e36:	e009      	b.n	8000e4c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000e38:	4b08      	ldr	r3, [pc, #32]	; (8000e5c <_sbrk+0x64>)
 8000e3a:	681b      	ldr	r3, [r3, #0]
 8000e3c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000e3e:	4b07      	ldr	r3, [pc, #28]	; (8000e5c <_sbrk+0x64>)
 8000e40:	681a      	ldr	r2, [r3, #0]
 8000e42:	687b      	ldr	r3, [r7, #4]
 8000e44:	4413      	add	r3, r2
 8000e46:	4a05      	ldr	r2, [pc, #20]	; (8000e5c <_sbrk+0x64>)
 8000e48:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000e4a:	68fb      	ldr	r3, [r7, #12]
}
 8000e4c:	4618      	mov	r0, r3
 8000e4e:	3718      	adds	r7, #24
 8000e50:	46bd      	mov	sp, r7
 8000e52:	bd80      	pop	{r7, pc}
 8000e54:	24080000 	.word	0x24080000
 8000e58:	00000400 	.word	0x00000400
 8000e5c:	240001b0 	.word	0x240001b0
 8000e60:	24000300 	.word	0x24000300

08000e64 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:
  ldr   sp, =_estack      /* set stack pointer */
 8000e64:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000e9c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit
 8000e68:	f7ff fc10 	bl	800068c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8000e6c:	480c      	ldr	r0, [pc, #48]	; (8000ea0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000e6e:	490d      	ldr	r1, [pc, #52]	; (8000ea4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000e70:	4a0d      	ldr	r2, [pc, #52]	; (8000ea8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000e72:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000e74:	e002      	b.n	8000e7c <LoopCopyDataInit>

08000e76 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000e76:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000e78:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000e7a:	3304      	adds	r3, #4

08000e7c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000e7c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000e7e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000e80:	d3f9      	bcc.n	8000e76 <CopyDataInit>
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000e82:	4a0a      	ldr	r2, [pc, #40]	; (8000eac <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000e84:	4c0a      	ldr	r4, [pc, #40]	; (8000eb0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000e86:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000e88:	e001      	b.n	8000e8e <LoopFillZerobss>

08000e8a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000e8a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000e8c:	3204      	adds	r2, #4

08000e8e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000e8e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000e90:	d3fb      	bcc.n	8000e8a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000e92:	f007 f835 	bl	8007f00 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000e96:	f7ff fca7 	bl	80007e8 <main>
  bx  lr
 8000e9a:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8000e9c:	24080000 	.word	0x24080000
  ldr r0, =_sdata
 8000ea0:	24000000 	.word	0x24000000
  ldr r1, =_edata
 8000ea4:	24000060 	.word	0x24000060
  ldr r2, =_sidata
 8000ea8:	0800888c 	.word	0x0800888c
  ldr r2, =_sbss
 8000eac:	24000060 	.word	0x24000060
  ldr r4, =_ebss
 8000eb0:	24000300 	.word	0x24000300

08000eb4 <ADC3_IRQHandler>:
 * @retval None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000eb4:	e7fe      	b.n	8000eb4 <ADC3_IRQHandler>
	...

08000eb8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b082      	sub	sp, #8
 8000ebc:	af00      	add	r7, sp, #0
   __HAL_ART_CONFIG_BASE_ADDRESS(0x08100000UL);  /* Configure the Cortex-M4 ART Base address to the Flash Bank 2 : */
   __HAL_ART_ENABLE();                           /* Enable the Cortex-M4 ART */
#endif /* DUAL_CORE &&  CORE_CM4 */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000ebe:	2003      	movs	r0, #3
 8000ec0:	f001 fef0 	bl	8002ca4 <HAL_NVIC_SetPriorityGrouping>

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE)>> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8000ec4:	f002 ff76 	bl	8003db4 <HAL_RCC_GetSysClockFreq>
 8000ec8:	4602      	mov	r2, r0
 8000eca:	4b15      	ldr	r3, [pc, #84]	; (8000f20 <HAL_Init+0x68>)
 8000ecc:	699b      	ldr	r3, [r3, #24]
 8000ece:	0a1b      	lsrs	r3, r3, #8
 8000ed0:	f003 030f 	and.w	r3, r3, #15
 8000ed4:	4913      	ldr	r1, [pc, #76]	; (8000f24 <HAL_Init+0x6c>)
 8000ed6:	5ccb      	ldrb	r3, [r1, r3]
 8000ed8:	f003 031f 	and.w	r3, r3, #31
 8000edc:	fa22 f303 	lsr.w	r3, r2, r3
 8000ee0:	607b      	str	r3, [r7, #4]
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE)>> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

  /* Update the SystemD2Clock global variable */
#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE)>> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8000ee2:	4b0f      	ldr	r3, [pc, #60]	; (8000f20 <HAL_Init+0x68>)
 8000ee4:	699b      	ldr	r3, [r3, #24]
 8000ee6:	f003 030f 	and.w	r3, r3, #15
 8000eea:	4a0e      	ldr	r2, [pc, #56]	; (8000f24 <HAL_Init+0x6c>)
 8000eec:	5cd3      	ldrb	r3, [r2, r3]
 8000eee:	f003 031f 	and.w	r3, r3, #31
 8000ef2:	687a      	ldr	r2, [r7, #4]
 8000ef4:	fa22 f303 	lsr.w	r3, r2, r3
 8000ef8:	4a0b      	ldr	r2, [pc, #44]	; (8000f28 <HAL_Init+0x70>)
 8000efa:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8000efc:	4a0b      	ldr	r2, [pc, #44]	; (8000f2c <HAL_Init+0x74>)
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  if(HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 8000f02:	200f      	movs	r0, #15
 8000f04:	f000 f814 	bl	8000f30 <HAL_InitTick>
 8000f08:	4603      	mov	r3, r0
 8000f0a:	2b00      	cmp	r3, #0
 8000f0c:	d001      	beq.n	8000f12 <HAL_Init+0x5a>
  {
    return HAL_ERROR;
 8000f0e:	2301      	movs	r3, #1
 8000f10:	e002      	b.n	8000f18 <HAL_Init+0x60>
  }

  /* Init the low level hardware */
  HAL_MspInit();
 8000f12:	f7ff fe53 	bl	8000bbc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000f16:	2300      	movs	r3, #0
}
 8000f18:	4618      	mov	r0, r3
 8000f1a:	3708      	adds	r7, #8
 8000f1c:	46bd      	mov	sp, r7
 8000f1e:	bd80      	pop	{r7, pc}
 8000f20:	58024400 	.word	0x58024400
 8000f24:	08008810 	.word	0x08008810
 8000f28:	24000004 	.word	0x24000004
 8000f2c:	24000000 	.word	0x24000000

08000f30 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000f30:	b580      	push	{r7, lr}
 8000f32:	b082      	sub	sp, #8
 8000f34:	af00      	add	r7, sp, #0
 8000f36:	6078      	str	r0, [r7, #4]
  /* Check uwTickFreq for MisraC 2012 (even if uwTickFreq is a enum type that don't take the value zero)*/
  if((uint32_t)uwTickFreq == 0UL)
 8000f38:	4b15      	ldr	r3, [pc, #84]	; (8000f90 <HAL_InitTick+0x60>)
 8000f3a:	781b      	ldrb	r3, [r3, #0]
 8000f3c:	2b00      	cmp	r3, #0
 8000f3e:	d101      	bne.n	8000f44 <HAL_InitTick+0x14>
  {
    return HAL_ERROR;
 8000f40:	2301      	movs	r3, #1
 8000f42:	e021      	b.n	8000f88 <HAL_InitTick+0x58>
  }

    /* Configure the SysTick to have interrupt in 1ms time basis*/
    if (HAL_SYSTICK_Config(SystemCoreClock / (1000UL / (uint32_t)uwTickFreq)) > 0U)
 8000f44:	4b13      	ldr	r3, [pc, #76]	; (8000f94 <HAL_InitTick+0x64>)
 8000f46:	681a      	ldr	r2, [r3, #0]
 8000f48:	4b11      	ldr	r3, [pc, #68]	; (8000f90 <HAL_InitTick+0x60>)
 8000f4a:	781b      	ldrb	r3, [r3, #0]
 8000f4c:	4619      	mov	r1, r3
 8000f4e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000f52:	fbb3 f3f1 	udiv	r3, r3, r1
 8000f56:	fbb2 f3f3 	udiv	r3, r2, r3
 8000f5a:	4618      	mov	r0, r3
 8000f5c:	f001 fed5 	bl	8002d0a <HAL_SYSTICK_Config>
 8000f60:	4603      	mov	r3, r0
 8000f62:	2b00      	cmp	r3, #0
 8000f64:	d001      	beq.n	8000f6a <HAL_InitTick+0x3a>
    {
      return HAL_ERROR;
 8000f66:	2301      	movs	r3, #1
 8000f68:	e00e      	b.n	8000f88 <HAL_InitTick+0x58>
    }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	2b0f      	cmp	r3, #15
 8000f6e:	d80a      	bhi.n	8000f86 <HAL_InitTick+0x56>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000f70:	2200      	movs	r2, #0
 8000f72:	6879      	ldr	r1, [r7, #4]
 8000f74:	f04f 30ff 	mov.w	r0, #4294967295
 8000f78:	f001 fe9f 	bl	8002cba <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000f7c:	4a06      	ldr	r2, [pc, #24]	; (8000f98 <HAL_InitTick+0x68>)
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000f82:	2300      	movs	r3, #0
 8000f84:	e000      	b.n	8000f88 <HAL_InitTick+0x58>
    return HAL_ERROR;
 8000f86:	2301      	movs	r3, #1
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	3708      	adds	r7, #8
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	bd80      	pop	{r7, pc}
 8000f90:	2400000c 	.word	0x2400000c
 8000f94:	24000000 	.word	0x24000000
 8000f98:	24000008 	.word	0x24000008

08000f9c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000f9c:	b480      	push	{r7}
 8000f9e:	af00      	add	r7, sp, #0
  uwTick += (uint32_t)uwTickFreq;
 8000fa0:	4b06      	ldr	r3, [pc, #24]	; (8000fbc <HAL_IncTick+0x20>)
 8000fa2:	781b      	ldrb	r3, [r3, #0]
 8000fa4:	461a      	mov	r2, r3
 8000fa6:	4b06      	ldr	r3, [pc, #24]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fa8:	681b      	ldr	r3, [r3, #0]
 8000faa:	4413      	add	r3, r2
 8000fac:	4a04      	ldr	r2, [pc, #16]	; (8000fc0 <HAL_IncTick+0x24>)
 8000fae:	6013      	str	r3, [r2, #0]
}
 8000fb0:	bf00      	nop
 8000fb2:	46bd      	mov	sp, r7
 8000fb4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fb8:	4770      	bx	lr
 8000fba:	bf00      	nop
 8000fbc:	2400000c 	.word	0x2400000c
 8000fc0:	240001b4 	.word	0x240001b4

08000fc4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000fc4:	b480      	push	{r7}
 8000fc6:	af00      	add	r7, sp, #0
  return uwTick;
 8000fc8:	4b03      	ldr	r3, [pc, #12]	; (8000fd8 <HAL_GetTick+0x14>)
 8000fca:	681b      	ldr	r3, [r3, #0]
}
 8000fcc:	4618      	mov	r0, r3
 8000fce:	46bd      	mov	sp, r7
 8000fd0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fd4:	4770      	bx	lr
 8000fd6:	bf00      	nop
 8000fd8:	240001b4 	.word	0x240001b4

08000fdc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000fdc:	b580      	push	{r7, lr}
 8000fde:	b084      	sub	sp, #16
 8000fe0:	af00      	add	r7, sp, #0
 8000fe2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000fe4:	f7ff ffee 	bl	8000fc4 <HAL_GetTick>
 8000fe8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000fee:	68fb      	ldr	r3, [r7, #12]
 8000ff0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ff4:	d005      	beq.n	8001002 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ff6:	4b0a      	ldr	r3, [pc, #40]	; (8001020 <HAL_Delay+0x44>)
 8000ff8:	781b      	ldrb	r3, [r3, #0]
 8000ffa:	461a      	mov	r2, r3
 8000ffc:	68fb      	ldr	r3, [r7, #12]
 8000ffe:	4413      	add	r3, r2
 8001000:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 8001002:	bf00      	nop
 8001004:	f7ff ffde 	bl	8000fc4 <HAL_GetTick>
 8001008:	4602      	mov	r2, r0
 800100a:	68bb      	ldr	r3, [r7, #8]
 800100c:	1ad3      	subs	r3, r2, r3
 800100e:	68fa      	ldr	r2, [r7, #12]
 8001010:	429a      	cmp	r2, r3
 8001012:	d8f7      	bhi.n	8001004 <HAL_Delay+0x28>
  {
  }
}
 8001014:	bf00      	nop
 8001016:	bf00      	nop
 8001018:	3710      	adds	r7, #16
 800101a:	46bd      	mov	sp, r7
 800101c:	bd80      	pop	{r7, pc}
 800101e:	bf00      	nop
 8001020:	2400000c 	.word	0x2400000c

08001024 <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 8001024:	b480      	push	{r7}
 8001026:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16);
 8001028:	4b03      	ldr	r3, [pc, #12]	; (8001038 <HAL_GetREVID+0x14>)
 800102a:	681b      	ldr	r3, [r3, #0]
 800102c:	0c1b      	lsrs	r3, r3, #16
}
 800102e:	4618      	mov	r0, r3
 8001030:	46bd      	mov	sp, r7
 8001032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001036:	4770      	bx	lr
 8001038:	5c001000 	.word	0x5c001000

0800103c <HAL_SYSCFG_AnalogSwitchConfig>:
  *   @arg SYSCFG_SWITCH_PC3_CLOSE
  * @retval None
  */

void HAL_SYSCFG_AnalogSwitchConfig(uint32_t SYSCFG_AnalogSwitch , uint32_t SYSCFG_SwitchState )
{
 800103c:	b480      	push	{r7}
 800103e:	b083      	sub	sp, #12
 8001040:	af00      	add	r7, sp, #0
 8001042:	6078      	str	r0, [r7, #4]
 8001044:	6039      	str	r1, [r7, #0]
  /* Check the parameter */
  assert_param(IS_SYSCFG_ANALOG_SWITCH(SYSCFG_AnalogSwitch));
  assert_param(IS_SYSCFG_SWITCH_STATE(SYSCFG_SwitchState));

  MODIFY_REG(SYSCFG->PMCR, (uint32_t) SYSCFG_AnalogSwitch, (uint32_t)(SYSCFG_SwitchState));
 8001046:	4b07      	ldr	r3, [pc, #28]	; (8001064 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001048:	685a      	ldr	r2, [r3, #4]
 800104a:	687b      	ldr	r3, [r7, #4]
 800104c:	43db      	mvns	r3, r3
 800104e:	401a      	ands	r2, r3
 8001050:	4904      	ldr	r1, [pc, #16]	; (8001064 <HAL_SYSCFG_AnalogSwitchConfig+0x28>)
 8001052:	683b      	ldr	r3, [r7, #0]
 8001054:	4313      	orrs	r3, r2
 8001056:	604b      	str	r3, [r1, #4]
}
 8001058:	bf00      	nop
 800105a:	370c      	adds	r7, #12
 800105c:	46bd      	mov	sp, r7
 800105e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001062:	4770      	bx	lr
 8001064:	58000400 	.word	0x58000400

08001068 <LL_ADC_SetCommonClock>:
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV128
  *         @arg @ref LL_ADC_CLOCK_ASYNC_DIV256
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonClock(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t CommonClock)
{
 8001068:	b480      	push	{r7}
 800106a:	b083      	sub	sp, #12
 800106c:	af00      	add	r7, sp, #0
 800106e:	6078      	str	r0, [r7, #4]
 8001070:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_CKMODE | ADC_CCR_PRESC, CommonClock);
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	689b      	ldr	r3, [r3, #8]
 8001076:	f423 127c 	bic.w	r2, r3, #4128768	; 0x3f0000
 800107a:	683b      	ldr	r3, [r7, #0]
 800107c:	431a      	orrs	r2, r3
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	609a      	str	r2, [r3, #8]
}
 8001082:	bf00      	nop
 8001084:	370c      	adds	r7, #12
 8001086:	46bd      	mov	sp, r7
 8001088:	f85d 7b04 	ldr.w	r7, [sp], #4
 800108c:	4770      	bx	lr

0800108e <LL_ADC_SetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON, uint32_t PathInternal)
{
 800108e:	b480      	push	{r7}
 8001090:	b083      	sub	sp, #12
 8001092:	af00      	add	r7, sp, #0
 8001094:	6078      	str	r0, [r7, #4]
 8001096:	6039      	str	r1, [r7, #0]
  MODIFY_REG(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN, PathInternal);
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	689b      	ldr	r3, [r3, #8]
 800109c:	f023 72e0 	bic.w	r2, r3, #29360128	; 0x1c00000
 80010a0:	683b      	ldr	r3, [r7, #0]
 80010a2:	431a      	orrs	r2, r3
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	609a      	str	r2, [r3, #8]
}
 80010a8:	bf00      	nop
 80010aa:	370c      	adds	r7, #12
 80010ac:	46bd      	mov	sp, r7
 80010ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010b2:	4770      	bx	lr

080010b4 <LL_ADC_GetCommonPathInternalCh>:
  *         @arg @ref LL_ADC_PATH_INTERNAL_VREFINT
  *         @arg @ref LL_ADC_PATH_INTERNAL_TEMPSENSOR
  *         @arg @ref LL_ADC_PATH_INTERNAL_VBAT
  */
__STATIC_INLINE uint32_t LL_ADC_GetCommonPathInternalCh(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80010b4:	b480      	push	{r7}
 80010b6:	b083      	sub	sp, #12
 80010b8:	af00      	add	r7, sp, #0
 80010ba:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_VREFEN | ADC_CCR_TSEN | ADC_CCR_VBATEN));
 80010bc:	687b      	ldr	r3, [r7, #4]
 80010be:	689b      	ldr	r3, [r3, #8]
 80010c0:	f003 73e0 	and.w	r3, r3, #29360128	; 0x1c00000
}
 80010c4:	4618      	mov	r0, r3
 80010c6:	370c      	adds	r7, #12
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <LL_ADC_SetOffset>:
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @param  OffsetLevel Value between Min_Data=0x000 and Max_Data=0x3FFFFFF
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetOffset(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t Channel, uint32_t OffsetLevel)
{
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 80010de:	68fb      	ldr	r3, [r7, #12]
 80010e0:	3360      	adds	r3, #96	; 0x60
 80010e2:	461a      	mov	r2, r3
 80010e4:	68bb      	ldr	r3, [r7, #8]
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	4413      	add	r3, r2
 80010ea:	617b      	str	r3, [r7, #20]
               ADC3_OFR1_OFFSET1_EN | (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
  else
#endif /* ADC_VER_V5_V90 */
  {
    MODIFY_REG(*preg,
 80010ec:	697b      	ldr	r3, [r7, #20]
 80010ee:	681b      	ldr	r3, [r3, #0]
 80010f0:	f003 4200 	and.w	r2, r3, #2147483648	; 0x80000000
 80010f4:	687b      	ldr	r3, [r7, #4]
 80010f6:	f003 41f8 	and.w	r1, r3, #2080374784	; 0x7c000000
 80010fa:	683b      	ldr	r3, [r7, #0]
 80010fc:	430b      	orrs	r3, r1
 80010fe:	431a      	orrs	r2, r3
 8001100:	697b      	ldr	r3, [r7, #20]
 8001102:	601a      	str	r2, [r3, #0]
               ADC_OFR1_OFFSET1_CH | ADC_OFR1_OFFSET1,
               (Channel & ADC_CHANNEL_ID_NUMBER_MASK) | OffsetLevel);
  }
}
 8001104:	bf00      	nop
 8001106:	371c      	adds	r7, #28
 8001108:	46bd      	mov	sp, r7
 800110a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800110e:	4770      	bx	lr

08001110 <LL_ADC_SetDataRightShift>:
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_ENABLE
  *         @arg @ref LL_ADC_OFFSET_RSHIFT_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetDataRightShift(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t RigthShift)
{
 8001110:	b480      	push	{r7}
 8001112:	b085      	sub	sp, #20
 8001114:	af00      	add	r7, sp, #0
 8001116:	60f8      	str	r0, [r7, #12]
 8001118:	60b9      	str	r1, [r7, #8]
 800111a:	607a      	str	r2, [r7, #4]
  MODIFY_REG(ADCx->CFGR2, (ADC_CFGR2_RSHIFT1 | ADC_CFGR2_RSHIFT2 | ADC_CFGR2_RSHIFT3 | ADC_CFGR2_RSHIFT4), RigthShift << (Offsety & 0x1FUL));
 800111c:	68fb      	ldr	r3, [r7, #12]
 800111e:	691b      	ldr	r3, [r3, #16]
 8001120:	f423 42f0 	bic.w	r2, r3, #30720	; 0x7800
 8001124:	68bb      	ldr	r3, [r7, #8]
 8001126:	f003 031f 	and.w	r3, r3, #31
 800112a:	6879      	ldr	r1, [r7, #4]
 800112c:	fa01 f303 	lsl.w	r3, r1, r3
 8001130:	431a      	orrs	r2, r3
 8001132:	68fb      	ldr	r3, [r7, #12]
 8001134:	611a      	str	r2, [r3, #16]
}
 8001136:	bf00      	nop
 8001138:	3714      	adds	r7, #20
 800113a:	46bd      	mov	sp, r7
 800113c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001140:	4770      	bx	lr

08001142 <LL_ADC_SetOffsetSignedSaturation>:
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE
  *         @arg @ref LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE
  * @retval Returned None
  */
__STATIC_INLINE void LL_ADC_SetOffsetSignedSaturation(ADC_TypeDef *ADCx, uint32_t Offsety, uint32_t OffsetSignedSaturation)
{
 8001142:	b480      	push	{r7}
 8001144:	b087      	sub	sp, #28
 8001146:	af00      	add	r7, sp, #0
 8001148:	60f8      	str	r0, [r7, #12]
 800114a:	60b9      	str	r1, [r7, #8]
 800114c:	607a      	str	r2, [r7, #4]
    /* Function not available on this instance */
  }
  else
#endif  /* ADC_VER_V5_V90 */
  {
    __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->OFR1, Offsety);
 800114e:	68fb      	ldr	r3, [r7, #12]
 8001150:	3360      	adds	r3, #96	; 0x60
 8001152:	461a      	mov	r2, r3
 8001154:	68bb      	ldr	r3, [r7, #8]
 8001156:	009b      	lsls	r3, r3, #2
 8001158:	4413      	add	r3, r2
 800115a:	617b      	str	r3, [r7, #20]
    MODIFY_REG(*preg, ADC_OFR1_SSATE, OffsetSignedSaturation);
 800115c:	697b      	ldr	r3, [r7, #20]
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	431a      	orrs	r2, r3
 8001168:	697b      	ldr	r3, [r7, #20]
 800116a:	601a      	str	r2, [r3, #0]
  }
}
 800116c:	bf00      	nop
 800116e:	371c      	adds	r7, #28
 8001170:	46bd      	mov	sp, r7
 8001172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001176:	4770      	bx	lr

08001178 <LL_ADC_REG_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 8001178:	b480      	push	{r7}
 800117a:	b083      	sub	sp, #12
 800117c:	af00      	add	r7, sp, #0
 800117e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CFGR, ADC_CFGR_EXTEN) == (LL_ADC_REG_TRIG_SOFTWARE & ADC_CFGR_EXTEN)) ? 1UL : 0UL);
 8001180:	687b      	ldr	r3, [r7, #4]
 8001182:	68db      	ldr	r3, [r3, #12]
 8001184:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 8001188:	2b00      	cmp	r3, #0
 800118a:	d101      	bne.n	8001190 <LL_ADC_REG_IsTriggerSourceSWStart+0x18>
 800118c:	2301      	movs	r3, #1
 800118e:	e000      	b.n	8001192 <LL_ADC_REG_IsTriggerSourceSWStart+0x1a>
 8001190:	2300      	movs	r3, #0
}
 8001192:	4618      	mov	r0, r3
 8001194:	370c      	adds	r7, #12
 8001196:	46bd      	mov	sp, r7
 8001198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800119c:	4770      	bx	lr

0800119e <LL_ADC_REG_SetSequencerRanks>:
  *         (3) On STM32H7, fast channel (0.125 us for 14-bit resolution (ADC conversion rate up to 8 Ms/s)).
  *             Other channels are slow channels (conversion rate: refer to reference manual).
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_SetSequencerRanks(ADC_TypeDef *ADCx, uint32_t Rank, uint32_t Channel)
{
 800119e:	b480      	push	{r7}
 80011a0:	b087      	sub	sp, #28
 80011a2:	af00      	add	r7, sp, #0
 80011a4:	60f8      	str	r0, [r7, #12]
 80011a6:	60b9      	str	r1, [r7, #8]
 80011a8:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "Channel" with bits position          */
  /* in register and register position depending on parameter "Rank".         */
  /* Parameters "Rank" and "Channel" are used with masks because containing   */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SQR1, ((Rank & ADC_REG_SQRX_REGOFFSET_MASK) >> ADC_SQRX_REGOFFSET_POS));
 80011aa:	68fb      	ldr	r3, [r7, #12]
 80011ac:	3330      	adds	r3, #48	; 0x30
 80011ae:	461a      	mov	r2, r3
 80011b0:	68bb      	ldr	r3, [r7, #8]
 80011b2:	0a1b      	lsrs	r3, r3, #8
 80011b4:	009b      	lsls	r3, r3, #2
 80011b6:	f003 030c 	and.w	r3, r3, #12
 80011ba:	4413      	add	r3, r2
 80011bc:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 80011be:	697b      	ldr	r3, [r7, #20]
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	68bb      	ldr	r3, [r7, #8]
 80011c4:	f003 031f 	and.w	r3, r3, #31
 80011c8:	211f      	movs	r1, #31
 80011ca:	fa01 f303 	lsl.w	r3, r1, r3
 80011ce:	43db      	mvns	r3, r3
 80011d0:	401a      	ands	r2, r3
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	0e9b      	lsrs	r3, r3, #26
 80011d6:	f003 011f 	and.w	r1, r3, #31
 80011da:	68bb      	ldr	r3, [r7, #8]
 80011dc:	f003 031f 	and.w	r3, r3, #31
 80011e0:	fa01 f303 	lsl.w	r3, r1, r3
 80011e4:	431a      	orrs	r2, r3
 80011e6:	697b      	ldr	r3, [r7, #20]
 80011e8:	601a      	str	r2, [r3, #0]
             ADC_CHANNEL_ID_NUMBER_MASK_POSBIT0 << (Rank & ADC_REG_RANK_ID_SQRX_MASK),
             ((Channel & ADC_CHANNEL_ID_NUMBER_MASK) >> ADC_CHANNEL_ID_NUMBER_BITOFFSET_POS) << (Rank & ADC_REG_RANK_ID_SQRX_MASK));
}
 80011ea:	bf00      	nop
 80011ec:	371c      	adds	r7, #28
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr

080011f6 <LL_ADC_INJ_IsTriggerSourceSWStart>:
  * @param  ADCx ADC instance
  * @retval Value "0" if trigger source external trigger
  *         Value "1" if trigger source SW start.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsTriggerSourceSWStart(ADC_TypeDef *ADCx)
{
 80011f6:	b480      	push	{r7}
 80011f8:	b083      	sub	sp, #12
 80011fa:	af00      	add	r7, sp, #0
 80011fc:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->JSQR, ADC_JSQR_JEXTEN) == (LL_ADC_INJ_TRIG_SOFTWARE & ADC_JSQR_JEXTEN)) ? 1UL : 0UL);
 80011fe:	687b      	ldr	r3, [r7, #4]
 8001200:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8001202:	f403 73c0 	and.w	r3, r3, #384	; 0x180
 8001206:	2b00      	cmp	r3, #0
 8001208:	d101      	bne.n	800120e <LL_ADC_INJ_IsTriggerSourceSWStart+0x18>
 800120a:	2301      	movs	r3, #1
 800120c:	e000      	b.n	8001210 <LL_ADC_INJ_IsTriggerSourceSWStart+0x1a>
 800120e:	2300      	movs	r3, #0
}
 8001210:	4618      	mov	r0, r3
 8001212:	370c      	adds	r7, #12
 8001214:	46bd      	mov	sp, r7
 8001216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800121a:	4770      	bx	lr

0800121c <LL_ADC_SetChannelSamplingTime>:
  *         @arg @ref LL_ADC_SAMPLINGTIME_387CYCLES_5
  *         @arg @ref LL_ADC_SAMPLINGTIME_810CYCLES_5
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSamplingTime(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SamplingTime)
{
 800121c:	b480      	push	{r7}
 800121e:	b087      	sub	sp, #28
 8001220:	af00      	add	r7, sp, #0
 8001222:	60f8      	str	r0, [r7, #12]
 8001224:	60b9      	str	r1, [r7, #8]
 8001226:	607a      	str	r2, [r7, #4]
  /* Set bits with content of parameter "SamplingTime" with bits position     */
  /* in register and register position depending on parameter "Channel".      */
  /* Parameter "Channel" is used with masks because containing                */
  /* other bits reserved for other purpose.                                   */
  __IO uint32_t *preg = __ADC_PTR_REG_OFFSET(ADCx->SMPR1, ((Channel & ADC_CHANNEL_SMPRX_REGOFFSET_MASK) >> ADC_SMPRX_REGOFFSET_POS));
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	3314      	adds	r3, #20
 800122c:	461a      	mov	r2, r3
 800122e:	68bb      	ldr	r3, [r7, #8]
 8001230:	0e5b      	lsrs	r3, r3, #25
 8001232:	009b      	lsls	r3, r3, #2
 8001234:	f003 0304 	and.w	r3, r3, #4
 8001238:	4413      	add	r3, r2
 800123a:	617b      	str	r3, [r7, #20]

  MODIFY_REG(*preg,
 800123c:	697b      	ldr	r3, [r7, #20]
 800123e:	681a      	ldr	r2, [r3, #0]
 8001240:	68bb      	ldr	r3, [r7, #8]
 8001242:	0d1b      	lsrs	r3, r3, #20
 8001244:	f003 031f 	and.w	r3, r3, #31
 8001248:	2107      	movs	r1, #7
 800124a:	fa01 f303 	lsl.w	r3, r1, r3
 800124e:	43db      	mvns	r3, r3
 8001250:	401a      	ands	r2, r3
 8001252:	68bb      	ldr	r3, [r7, #8]
 8001254:	0d1b      	lsrs	r3, r3, #20
 8001256:	f003 031f 	and.w	r3, r3, #31
 800125a:	6879      	ldr	r1, [r7, #4]
 800125c:	fa01 f303 	lsl.w	r3, r1, r3
 8001260:	431a      	orrs	r2, r3
 8001262:	697b      	ldr	r3, [r7, #20]
 8001264:	601a      	str	r2, [r3, #0]
             ADC_SMPR1_SMP0 << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS),
             SamplingTime   << ((Channel & ADC_CHANNEL_SMPx_BITOFFSET_MASK) >> ADC_CHANNEL_SMPx_BITOFFSET_POS));
}
 8001266:	bf00      	nop
 8001268:	371c      	adds	r7, #28
 800126a:	46bd      	mov	sp, r7
 800126c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001270:	4770      	bx	lr
	...

08001274 <LL_ADC_SetChannelSingleDiff>:
  *         @arg @ref LL_ADC_SINGLE_ENDED
  *         @arg @ref LL_ADC_DIFFERENTIAL_ENDED
  * @retval None
  */
__STATIC_INLINE void LL_ADC_SetChannelSingleDiff(ADC_TypeDef *ADCx, uint32_t Channel, uint32_t SingleDiff)
{
 8001274:	b480      	push	{r7}
 8001276:	b085      	sub	sp, #20
 8001278:	af00      	add	r7, sp, #0
 800127a:	60f8      	str	r0, [r7, #12]
 800127c:	60b9      	str	r1, [r7, #8]
 800127e:	607a      	str	r2, [r7, #4]
  }
#else  /* ADC_VER_V5_V90 */
  /* Bits of channels in single or differential mode are set only for         */
  /* differential mode (for single mode, mask of bits allowed to be set is    */
  /* shifted out of range of bits of channels in single or differential mode. */
  MODIFY_REG(ADCx->DIFSEL,
 8001280:	68fb      	ldr	r3, [r7, #12]
 8001282:	f8d3 20c0 	ldr.w	r2, [r3, #192]	; 0xc0
 8001286:	68bb      	ldr	r3, [r7, #8]
 8001288:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800128c:	43db      	mvns	r3, r3
 800128e:	401a      	ands	r2, r3
 8001290:	687b      	ldr	r3, [r7, #4]
 8001292:	f003 0318 	and.w	r3, r3, #24
 8001296:	4908      	ldr	r1, [pc, #32]	; (80012b8 <LL_ADC_SetChannelSingleDiff+0x44>)
 8001298:	40d9      	lsrs	r1, r3
 800129a:	68bb      	ldr	r3, [r7, #8]
 800129c:	400b      	ands	r3, r1
 800129e:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80012a2:	431a      	orrs	r2, r3
 80012a4:	68fb      	ldr	r3, [r7, #12]
 80012a6:	f8c3 20c0 	str.w	r2, [r3, #192]	; 0xc0
             Channel & ADC_SINGLEDIFF_CHANNEL_MASK,
             (Channel & ADC_SINGLEDIFF_CHANNEL_MASK) & (ADC_DIFSEL_DIFSEL >> (SingleDiff & ADC_SINGLEDIFF_CHANNEL_SHIFT_MASK)));
#endif /* ADC_VER_V5_V90 */
}
 80012aa:	bf00      	nop
 80012ac:	3714      	adds	r7, #20
 80012ae:	46bd      	mov	sp, r7
 80012b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012b4:	4770      	bx	lr
 80012b6:	bf00      	nop
 80012b8:	000fffff 	.word	0x000fffff

080012bc <LL_ADC_GetMultimode>:
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_SIM
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_SIM_INJ_ALT
  *         @arg @ref LL_ADC_MULTI_DUAL_REG_INT_INJ_SIM
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultimode(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012bc:	b480      	push	{r7}
 80012be:	b083      	sub	sp, #12
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DUAL));
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	689b      	ldr	r3, [r3, #8]
 80012c8:	f003 031f 	and.w	r3, r3, #31
}
 80012cc:	4618      	mov	r0, r3
 80012ce:	370c      	adds	r7, #12
 80012d0:	46bd      	mov	sp, r7
 80012d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012d6:	4770      	bx	lr

080012d8 <LL_ADC_GetMultiDMATransfer>:
  *         @arg @ref LL_ADC_MULTI_REG_DMA_EACH_ADC
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_32_10B
  *         @arg @ref LL_ADC_MULTI_REG_DMA_RES_8B
  */
__STATIC_INLINE uint32_t LL_ADC_GetMultiDMATransfer(ADC_Common_TypeDef *ADCxy_COMMON)
{
 80012d8:	b480      	push	{r7}
 80012da:	b083      	sub	sp, #12
 80012dc:	af00      	add	r7, sp, #0
 80012de:	6078      	str	r0, [r7, #4]
  return (uint32_t)(READ_BIT(ADCxy_COMMON->CCR, ADC_CCR_DAMDF));
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	689b      	ldr	r3, [r3, #8]
 80012e4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
}
 80012e8:	4618      	mov	r0, r3
 80012ea:	370c      	adds	r7, #12
 80012ec:	46bd      	mov	sp, r7
 80012ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80012f2:	4770      	bx	lr

080012f4 <LL_ADC_DisableDeepPowerDown>:
  * @rmtoll CR       DEEPPWD        LL_ADC_DisableDeepPowerDown
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_DisableDeepPowerDown(ADC_TypeDef *ADCx)
{
 80012f4:	b480      	push	{r7}
 80012f6:	b083      	sub	sp, #12
 80012f8:	af00      	add	r7, sp, #0
 80012fa:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  CLEAR_BIT(ADCx->CR, (ADC_CR_DEEPPWD | ADC_CR_BITS_PROPERTY_RS));
 80012fc:	687b      	ldr	r3, [r7, #4]
 80012fe:	689a      	ldr	r2, [r3, #8]
 8001300:	4b04      	ldr	r3, [pc, #16]	; (8001314 <LL_ADC_DisableDeepPowerDown+0x20>)
 8001302:	4013      	ands	r3, r2
 8001304:	687a      	ldr	r2, [r7, #4]
 8001306:	6093      	str	r3, [r2, #8]
}
 8001308:	bf00      	nop
 800130a:	370c      	adds	r7, #12
 800130c:	46bd      	mov	sp, r7
 800130e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001312:	4770      	bx	lr
 8001314:	5fffffc0 	.word	0x5fffffc0

08001318 <LL_ADC_IsDeepPowerDownEnabled>:
  * @rmtoll CR       DEEPPWD        LL_ADC_IsDeepPowerDownEnabled
  * @param  ADCx ADC instance
  * @retval 0: deep power down is disabled, 1: deep power down is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsDeepPowerDownEnabled(ADC_TypeDef *ADCx)
{
 8001318:	b480      	push	{r7}
 800131a:	b083      	sub	sp, #12
 800131c:	af00      	add	r7, sp, #0
 800131e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_DEEPPWD) == (ADC_CR_DEEPPWD)) ? 1UL : 0UL);
 8001320:	687b      	ldr	r3, [r7, #4]
 8001322:	689b      	ldr	r3, [r3, #8]
 8001324:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8001328:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800132c:	d101      	bne.n	8001332 <LL_ADC_IsDeepPowerDownEnabled+0x1a>
 800132e:	2301      	movs	r3, #1
 8001330:	e000      	b.n	8001334 <LL_ADC_IsDeepPowerDownEnabled+0x1c>
 8001332:	2300      	movs	r3, #0
}
 8001334:	4618      	mov	r0, r3
 8001336:	370c      	adds	r7, #12
 8001338:	46bd      	mov	sp, r7
 800133a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800133e:	4770      	bx	lr

08001340 <LL_ADC_EnableInternalRegulator>:
  * @rmtoll CR       ADVREGEN       LL_ADC_EnableInternalRegulator
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_EnableInternalRegulator(ADC_TypeDef *ADCx)
{
 8001340:	b480      	push	{r7}
 8001342:	b083      	sub	sp, #12
 8001344:	af00      	add	r7, sp, #0
 8001346:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001348:	687b      	ldr	r3, [r7, #4]
 800134a:	689a      	ldr	r2, [r3, #8]
 800134c:	4b05      	ldr	r3, [pc, #20]	; (8001364 <LL_ADC_EnableInternalRegulator+0x24>)
 800134e:	4013      	ands	r3, r2
 8001350:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8001354:	687b      	ldr	r3, [r7, #4]
 8001356:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADVREGEN);
}
 8001358:	bf00      	nop
 800135a:	370c      	adds	r7, #12
 800135c:	46bd      	mov	sp, r7
 800135e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001362:	4770      	bx	lr
 8001364:	6fffffc0 	.word	0x6fffffc0

08001368 <LL_ADC_IsInternalRegulatorEnabled>:
  * @rmtoll CR       ADVREGEN       LL_ADC_IsInternalRegulatorEnabled
  * @param  ADCx ADC instance
  * @retval 0: internal regulator is disabled, 1: internal regulator is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsInternalRegulatorEnabled(ADC_TypeDef *ADCx)
{
 8001368:	b480      	push	{r7}
 800136a:	b083      	sub	sp, #12
 800136c:	af00      	add	r7, sp, #0
 800136e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADVREGEN) == (ADC_CR_ADVREGEN)) ? 1UL : 0UL);
 8001370:	687b      	ldr	r3, [r7, #4]
 8001372:	689b      	ldr	r3, [r3, #8]
 8001374:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001378:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800137c:	d101      	bne.n	8001382 <LL_ADC_IsInternalRegulatorEnabled+0x1a>
 800137e:	2301      	movs	r3, #1
 8001380:	e000      	b.n	8001384 <LL_ADC_IsInternalRegulatorEnabled+0x1c>
 8001382:	2300      	movs	r3, #0
}
 8001384:	4618      	mov	r0, r3
 8001386:	370c      	adds	r7, #12
 8001388:	46bd      	mov	sp, r7
 800138a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800138e:	4770      	bx	lr

08001390 <LL_ADC_Enable>:
  * @rmtoll CR       ADEN           LL_ADC_Enable
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_Enable(ADC_TypeDef *ADCx)
{
 8001390:	b480      	push	{r7}
 8001392:	b083      	sub	sp, #12
 8001394:	af00      	add	r7, sp, #0
 8001396:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	689a      	ldr	r2, [r3, #8]
 800139c:	4b05      	ldr	r3, [pc, #20]	; (80013b4 <LL_ADC_Enable+0x24>)
 800139e:	4013      	ands	r3, r2
 80013a0:	f043 0201 	orr.w	r2, r3, #1
 80013a4:	687b      	ldr	r3, [r7, #4]
 80013a6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADEN);
}
 80013a8:	bf00      	nop
 80013aa:	370c      	adds	r7, #12
 80013ac:	46bd      	mov	sp, r7
 80013ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b2:	4770      	bx	lr
 80013b4:	7fffffc0 	.word	0x7fffffc0

080013b8 <LL_ADC_IsEnabled>:
  * @rmtoll CR       ADEN           LL_ADC_IsEnabled
  * @param  ADCx ADC instance
  * @retval 0: ADC is disabled, 1: ADC is enabled.
  */
__STATIC_INLINE uint32_t LL_ADC_IsEnabled(ADC_TypeDef *ADCx)
{
 80013b8:	b480      	push	{r7}
 80013ba:	b083      	sub	sp, #12
 80013bc:	af00      	add	r7, sp, #0
 80013be:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80013c0:	687b      	ldr	r3, [r7, #4]
 80013c2:	689b      	ldr	r3, [r3, #8]
 80013c4:	f003 0301 	and.w	r3, r3, #1
 80013c8:	2b01      	cmp	r3, #1
 80013ca:	d101      	bne.n	80013d0 <LL_ADC_IsEnabled+0x18>
 80013cc:	2301      	movs	r3, #1
 80013ce:	e000      	b.n	80013d2 <LL_ADC_IsEnabled+0x1a>
 80013d0:	2300      	movs	r3, #0
}
 80013d2:	4618      	mov	r0, r3
 80013d4:	370c      	adds	r7, #12
 80013d6:	46bd      	mov	sp, r7
 80013d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013dc:	4770      	bx	lr
	...

080013e0 <LL_ADC_REG_StartConversion>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_StartConversion
  * @param  ADCx ADC instance
  * @retval None
  */
__STATIC_INLINE void LL_ADC_REG_StartConversion(ADC_TypeDef *ADCx)
{
 80013e0:	b480      	push	{r7}
 80013e2:	b083      	sub	sp, #12
 80013e4:	af00      	add	r7, sp, #0
 80013e6:	6078      	str	r0, [r7, #4]
  /* Note: Write register with some additional bits forced to state reset     */
  /*       instead of modifying only the selected bit for this function,      */
  /*       to not interfere with bits with HW property "rs".                  */
  MODIFY_REG(ADCx->CR,
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	689a      	ldr	r2, [r3, #8]
 80013ec:	4b05      	ldr	r3, [pc, #20]	; (8001404 <LL_ADC_REG_StartConversion+0x24>)
 80013ee:	4013      	ands	r3, r2
 80013f0:	f043 0204 	orr.w	r2, r3, #4
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	609a      	str	r2, [r3, #8]
             ADC_CR_BITS_PROPERTY_RS,
             ADC_CR_ADSTART);
}
 80013f8:	bf00      	nop
 80013fa:	370c      	adds	r7, #12
 80013fc:	46bd      	mov	sp, r7
 80013fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001402:	4770      	bx	lr
 8001404:	7fffffc0 	.word	0x7fffffc0

08001408 <LL_ADC_REG_IsConversionOngoing>:
  * @rmtoll CR       ADSTART        LL_ADC_REG_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group regular.
  */
__STATIC_INLINE uint32_t LL_ADC_REG_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 8001408:	b480      	push	{r7}
 800140a:	b083      	sub	sp, #12
 800140c:	af00      	add	r7, sp, #0
 800140e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	689b      	ldr	r3, [r3, #8]
 8001414:	f003 0304 	and.w	r3, r3, #4
 8001418:	2b04      	cmp	r3, #4
 800141a:	d101      	bne.n	8001420 <LL_ADC_REG_IsConversionOngoing+0x18>
 800141c:	2301      	movs	r3, #1
 800141e:	e000      	b.n	8001422 <LL_ADC_REG_IsConversionOngoing+0x1a>
 8001420:	2300      	movs	r3, #0
}
 8001422:	4618      	mov	r0, r3
 8001424:	370c      	adds	r7, #12
 8001426:	46bd      	mov	sp, r7
 8001428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800142c:	4770      	bx	lr

0800142e <LL_ADC_INJ_IsConversionOngoing>:
  * @rmtoll CR       JADSTART       LL_ADC_INJ_IsConversionOngoing
  * @param  ADCx ADC instance
  * @retval 0: no conversion is on going on ADC group injected.
  */
__STATIC_INLINE uint32_t LL_ADC_INJ_IsConversionOngoing(ADC_TypeDef *ADCx)
{
 800142e:	b480      	push	{r7}
 8001430:	b083      	sub	sp, #12
 8001432:	af00      	add	r7, sp, #0
 8001434:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_JADSTART) == (ADC_CR_JADSTART)) ? 1UL : 0UL);
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	689b      	ldr	r3, [r3, #8]
 800143a:	f003 0308 	and.w	r3, r3, #8
 800143e:	2b08      	cmp	r3, #8
 8001440:	d101      	bne.n	8001446 <LL_ADC_INJ_IsConversionOngoing+0x18>
 8001442:	2301      	movs	r3, #1
 8001444:	e000      	b.n	8001448 <LL_ADC_INJ_IsConversionOngoing+0x1a>
 8001446:	2300      	movs	r3, #0
}
 8001448:	4618      	mov	r0, r3
 800144a:	370c      	adds	r7, #12
 800144c:	46bd      	mov	sp, r7
 800144e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001452:	4770      	bx	lr

08001454 <HAL_ADC_Init>:
  *         without  disabling the other ADCs.
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 8001454:	b590      	push	{r4, r7, lr}
 8001456:	b089      	sub	sp, #36	; 0x24
 8001458:	af00      	add	r7, sp, #0
 800145a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800145c:	2300      	movs	r3, #0
 800145e:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpCFGR;
  uint32_t tmp_adc_reg_is_conversion_on_going;
  __IO uint32_t wait_loop_index = 0UL;
 8001460:	2300      	movs	r3, #0
 8001462:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_adc_is_conversion_on_going_regular;
  uint32_t tmp_adc_is_conversion_on_going_injected;

  /* Check ADC handle */
  if (hadc == NULL)
 8001464:	687b      	ldr	r3, [r7, #4]
 8001466:	2b00      	cmp	r3, #0
 8001468:	d101      	bne.n	800146e <HAL_ADC_Init+0x1a>
  {
    return HAL_ERROR;
 800146a:	2301      	movs	r3, #1
 800146c:	e18f      	b.n	800178e <HAL_ADC_Init+0x33a>
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));
  assert_param(IS_ADC_OVERRUN(hadc->Init.Overrun));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.LowPowerAutoWait));
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.OversamplingMode));

  if (hadc->Init.ScanConvMode != ADC_SCAN_DISABLE)
 800146e:	687b      	ldr	r3, [r7, #4]
 8001470:	68db      	ldr	r3, [r3, #12]
 8001472:	2b00      	cmp	r3, #0
  /* DISCEN and CONT bits cannot be set at the same time */
  assert_param(!((hadc->Init.DiscontinuousConvMode == ENABLE) && (hadc->Init.ContinuousConvMode == ENABLE)));

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  if (hadc->State == HAL_ADC_STATE_RESET)
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001478:	2b00      	cmp	r3, #0
 800147a:	d109      	bne.n	8001490 <HAL_ADC_Init+0x3c>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800147c:	6878      	ldr	r0, [r7, #4]
 800147e:	f7ff fbb7 	bl	8000bf0 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8001482:	687b      	ldr	r3, [r7, #4]
 8001484:	2200      	movs	r2, #0
 8001486:	659a      	str	r2, [r3, #88]	; 0x58

    /* Initialize Lock */
    hadc->Lock = HAL_UNLOCKED;
 8001488:	687b      	ldr	r3, [r7, #4]
 800148a:	2200      	movs	r2, #0
 800148c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  }

  /* - Exit from deep-power-down mode and ADC voltage regulator enable        */
  if (LL_ADC_IsDeepPowerDownEnabled(hadc->Instance) != 0UL)
 8001490:	687b      	ldr	r3, [r7, #4]
 8001492:	681b      	ldr	r3, [r3, #0]
 8001494:	4618      	mov	r0, r3
 8001496:	f7ff ff3f 	bl	8001318 <LL_ADC_IsDeepPowerDownEnabled>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d004      	beq.n	80014aa <HAL_ADC_Init+0x56>
  {
    /* Disable ADC deep power down mode */
    LL_ADC_DisableDeepPowerDown(hadc->Instance);
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	4618      	mov	r0, r3
 80014a6:	f7ff ff25 	bl	80012f4 <LL_ADC_DisableDeepPowerDown>
    /* System was in deep power down mode, calibration must
     be relaunched or a previously saved calibration factor
     re-applied once the ADC voltage regulator is enabled */
  }

  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014aa:	687b      	ldr	r3, [r7, #4]
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	4618      	mov	r0, r3
 80014b0:	f7ff ff5a 	bl	8001368 <LL_ADC_IsInternalRegulatorEnabled>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d114      	bne.n	80014e4 <HAL_ADC_Init+0x90>
  {
    /* Enable ADC internal voltage regulator */
    LL_ADC_EnableInternalRegulator(hadc->Instance);
 80014ba:	687b      	ldr	r3, [r7, #4]
 80014bc:	681b      	ldr	r3, [r3, #0]
 80014be:	4618      	mov	r0, r3
 80014c0:	f7ff ff3e 	bl	8001340 <LL_ADC_EnableInternalRegulator>

    /* Note: Variable divided by 2 to compensate partially              */
    /*       CPU processing cycles, scaling in us split to not          */
    /*       exceed 32 bits register capacity and handle low frequency. */
    wait_loop_index = ((LL_ADC_DELAY_INTERNAL_REGUL_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 80014c4:	4b87      	ldr	r3, [pc, #540]	; (80016e4 <HAL_ADC_Init+0x290>)
 80014c6:	681b      	ldr	r3, [r3, #0]
 80014c8:	099b      	lsrs	r3, r3, #6
 80014ca:	4a87      	ldr	r2, [pc, #540]	; (80016e8 <HAL_ADC_Init+0x294>)
 80014cc:	fba2 2303 	umull	r2, r3, r2, r3
 80014d0:	099b      	lsrs	r3, r3, #6
 80014d2:	3301      	adds	r3, #1
 80014d4:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014d6:	e002      	b.n	80014de <HAL_ADC_Init+0x8a>
    {
      wait_loop_index--;
 80014d8:	68bb      	ldr	r3, [r7, #8]
 80014da:	3b01      	subs	r3, #1
 80014dc:	60bb      	str	r3, [r7, #8]
    while (wait_loop_index != 0UL)
 80014de:	68bb      	ldr	r3, [r7, #8]
 80014e0:	2b00      	cmp	r3, #0
 80014e2:	d1f9      	bne.n	80014d8 <HAL_ADC_Init+0x84>
  }

  /* Verification that ADC voltage regulator is correctly enabled, whether    */
  /* or not ADC is coming from state reset (if any potential problem of       */
  /* clocking, voltage regulator would not be enabled).                       */
  if (LL_ADC_IsInternalRegulatorEnabled(hadc->Instance) == 0UL)
 80014e4:	687b      	ldr	r3, [r7, #4]
 80014e6:	681b      	ldr	r3, [r3, #0]
 80014e8:	4618      	mov	r0, r3
 80014ea:	f7ff ff3d 	bl	8001368 <LL_ADC_IsInternalRegulatorEnabled>
 80014ee:	4603      	mov	r3, r0
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d10d      	bne.n	8001510 <HAL_ADC_Init+0xbc>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80014f4:	687b      	ldr	r3, [r7, #4]
 80014f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80014f8:	f043 0210 	orr.w	r2, r3, #16
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to ADC peripheral internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001500:	687b      	ldr	r3, [r7, #4]
 8001502:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001504:	f043 0201 	orr.w	r2, r3, #1
 8001508:	687b      	ldr	r3, [r7, #4]
 800150a:	659a      	str	r2, [r3, #88]	; 0x58

    tmp_hal_status = HAL_ERROR;
 800150c:	2301      	movs	r3, #1
 800150e:	77fb      	strb	r3, [r7, #31]

  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed and if there is no conversion on going on regular    */
  /* group (ADC may already be enabled at this point if HAL_ADC_Init() is     */
  /* called to update a parameter on the fly).                                */
  tmp_adc_reg_is_conversion_on_going = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001510:	687b      	ldr	r3, [r7, #4]
 8001512:	681b      	ldr	r3, [r3, #0]
 8001514:	4618      	mov	r0, r3
 8001516:	f7ff ff77 	bl	8001408 <LL_ADC_REG_IsConversionOngoing>
 800151a:	6178      	str	r0, [r7, #20]

  if (((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 800151c:	687b      	ldr	r3, [r7, #4]
 800151e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001520:	f003 0310 	and.w	r3, r3, #16
 8001524:	2b00      	cmp	r3, #0
 8001526:	f040 8129 	bne.w	800177c <HAL_ADC_Init+0x328>
      && (tmp_adc_reg_is_conversion_on_going == 0UL)
 800152a:	697b      	ldr	r3, [r7, #20]
 800152c:	2b00      	cmp	r3, #0
 800152e:	f040 8125 	bne.w	800177c <HAL_ADC_Init+0x328>
     )
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001536:	f423 7381 	bic.w	r3, r3, #258	; 0x102
 800153a:	f043 0202 	orr.w	r2, r3, #2
 800153e:	687b      	ldr	r3, [r7, #4]
 8001540:	655a      	str	r2, [r3, #84]	; 0x54
    /* Configuration of common ADC parameters                                 */

    /* Parameters update conditioned to ADC state:                            */
    /* Parameters that can be updated only when ADC is disabled:              */
    /*  - clock configuration                                                 */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	681b      	ldr	r3, [r3, #0]
 8001546:	4618      	mov	r0, r3
 8001548:	f7ff ff36 	bl	80013b8 <LL_ADC_IsEnabled>
 800154c:	4603      	mov	r3, r0
 800154e:	2b00      	cmp	r3, #0
 8001550:	d136      	bne.n	80015c0 <HAL_ADC_Init+0x16c>
    {
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8001552:	687b      	ldr	r3, [r7, #4]
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	4a65      	ldr	r2, [pc, #404]	; (80016ec <HAL_ADC_Init+0x298>)
 8001558:	4293      	cmp	r3, r2
 800155a:	d004      	beq.n	8001566 <HAL_ADC_Init+0x112>
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	681b      	ldr	r3, [r3, #0]
 8001560:	4a63      	ldr	r2, [pc, #396]	; (80016f0 <HAL_ADC_Init+0x29c>)
 8001562:	4293      	cmp	r3, r2
 8001564:	d10e      	bne.n	8001584 <HAL_ADC_Init+0x130>
 8001566:	4861      	ldr	r0, [pc, #388]	; (80016ec <HAL_ADC_Init+0x298>)
 8001568:	f7ff ff26 	bl	80013b8 <LL_ADC_IsEnabled>
 800156c:	4604      	mov	r4, r0
 800156e:	4860      	ldr	r0, [pc, #384]	; (80016f0 <HAL_ADC_Init+0x29c>)
 8001570:	f7ff ff22 	bl	80013b8 <LL_ADC_IsEnabled>
 8001574:	4603      	mov	r3, r0
 8001576:	4323      	orrs	r3, r4
 8001578:	2b00      	cmp	r3, #0
 800157a:	bf0c      	ite	eq
 800157c:	2301      	moveq	r3, #1
 800157e:	2300      	movne	r3, #0
 8001580:	b2db      	uxtb	r3, r3
 8001582:	e008      	b.n	8001596 <HAL_ADC_Init+0x142>
 8001584:	485b      	ldr	r0, [pc, #364]	; (80016f4 <HAL_ADC_Init+0x2a0>)
 8001586:	f7ff ff17 	bl	80013b8 <LL_ADC_IsEnabled>
 800158a:	4603      	mov	r3, r0
 800158c:	2b00      	cmp	r3, #0
 800158e:	bf0c      	ite	eq
 8001590:	2301      	moveq	r3, #1
 8001592:	2300      	movne	r3, #0
 8001594:	b2db      	uxtb	r3, r3
 8001596:	2b00      	cmp	r3, #0
 8001598:	d012      	beq.n	80015c0 <HAL_ADC_Init+0x16c>
        /*     parameters: MDMA, DMACFG, DELAY, DUAL (set by API                */
        /*     HAL_ADCEx_MultiModeConfigChannel() )                             */
        /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
        /*     (set into HAL_ADC_ConfigChannel() or                             */
        /*     HAL_ADCEx_InjectedConfigChannel() )                              */
        LL_ADC_SetCommonClock(__LL_ADC_COMMON_INSTANCE(hadc->Instance), hadc->Init.ClockPrescaler);
 800159a:	687b      	ldr	r3, [r7, #4]
 800159c:	681b      	ldr	r3, [r3, #0]
 800159e:	4a53      	ldr	r2, [pc, #332]	; (80016ec <HAL_ADC_Init+0x298>)
 80015a0:	4293      	cmp	r3, r2
 80015a2:	d004      	beq.n	80015ae <HAL_ADC_Init+0x15a>
 80015a4:	687b      	ldr	r3, [r7, #4]
 80015a6:	681b      	ldr	r3, [r3, #0]
 80015a8:	4a51      	ldr	r2, [pc, #324]	; (80016f0 <HAL_ADC_Init+0x29c>)
 80015aa:	4293      	cmp	r3, r2
 80015ac:	d101      	bne.n	80015b2 <HAL_ADC_Init+0x15e>
 80015ae:	4a52      	ldr	r2, [pc, #328]	; (80016f8 <HAL_ADC_Init+0x2a4>)
 80015b0:	e000      	b.n	80015b4 <HAL_ADC_Init+0x160>
 80015b2:	4a52      	ldr	r2, [pc, #328]	; (80016fc <HAL_ADC_Init+0x2a8>)
 80015b4:	687b      	ldr	r3, [r7, #4]
 80015b6:	685b      	ldr	r3, [r3, #4]
 80015b8:	4619      	mov	r1, r3
 80015ba:	4610      	mov	r0, r2
 80015bc:	f7ff fd54 	bl	8001068 <LL_ADC_SetCommonClock>
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
    }

#else

    if ((HAL_GetREVID() > REV_ID_Y) && (ADC_RESOLUTION_8B == hadc->Init.Resolution))
 80015c0:	f7ff fd30 	bl	8001024 <HAL_GetREVID>
 80015c4:	4603      	mov	r3, r0
 80015c6:	f241 0203 	movw	r2, #4099	; 0x1003
 80015ca:	4293      	cmp	r3, r2
 80015cc:	d914      	bls.n	80015f8 <HAL_ADC_Init+0x1a4>
 80015ce:	687b      	ldr	r3, [r7, #4]
 80015d0:	689b      	ldr	r3, [r3, #8]
 80015d2:	2b10      	cmp	r3, #16
 80015d4:	d110      	bne.n	80015f8 <HAL_ADC_Init+0x1a4>
    {
      /* for STM32H7 silicon rev.B and above , ADC_CFGR_RES value for 8bits resolution is : b111 */
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80015d6:	687b      	ldr	r3, [r7, #4]
 80015d8:	7d5b      	ldrb	r3, [r3, #21]
 80015da:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80015dc:	687b      	ldr	r3, [r7, #4]
 80015de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80015e0:	431a      	orrs	r2, r3
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80015e2:	687b      	ldr	r3, [r7, #4]
 80015e4:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 80015e6:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 80015e8:	687b      	ldr	r3, [r7, #4]
 80015ea:	7f1b      	ldrb	r3, [r3, #28]
 80015ec:	041b      	lsls	r3, r3, #16
                  hadc->Init.Resolution | (ADC_CFGR_RES_1 | ADC_CFGR_RES_0)                |
 80015ee:	4313      	orrs	r3, r2
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80015f0:	f043 030c 	orr.w	r3, r3, #12
 80015f4:	61bb      	str	r3, [r7, #24]
 80015f6:	e00d      	b.n	8001614 <HAL_ADC_Init+0x1c0>
    }
    else
    {

      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 80015f8:	687b      	ldr	r3, [r7, #4]
 80015fa:	7d5b      	ldrb	r3, [r3, #21]
 80015fc:	035a      	lsls	r2, r3, #13
                  hadc->Init.Overrun                                                    |
 80015fe:	687b      	ldr	r3, [r7, #4]
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001602:	431a      	orrs	r2, r3
                  hadc->Init.Resolution                                                 |
 8001604:	687b      	ldr	r3, [r7, #4]
 8001606:	689b      	ldr	r3, [r3, #8]
                  hadc->Init.Overrun                                                    |
 8001608:	431a      	orrs	r2, r3
                  ADC_CFGR_REG_DISCONTINUOUS((uint32_t)hadc->Init.DiscontinuousConvMode));
 800160a:	687b      	ldr	r3, [r7, #4]
 800160c:	7f1b      	ldrb	r3, [r3, #28]
 800160e:	041b      	lsls	r3, r3, #16
      tmpCFGR  = (ADC_CFGR_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)          |
 8001610:	4313      	orrs	r3, r2
 8001612:	61bb      	str	r3, [r7, #24]
    }

#endif /* ADC_VER_V5_3 */

    if (hadc->Init.DiscontinuousConvMode == ENABLE)
 8001614:	687b      	ldr	r3, [r7, #4]
 8001616:	7f1b      	ldrb	r3, [r3, #28]
 8001618:	2b01      	cmp	r3, #1
 800161a:	d106      	bne.n	800162a <HAL_ADC_Init+0x1d6>
    {
      tmpCFGR |= ADC_CFGR_DISCONTINUOUS_NUM(hadc->Init.NbrOfDiscConversion);
 800161c:	687b      	ldr	r3, [r7, #4]
 800161e:	6a1b      	ldr	r3, [r3, #32]
 8001620:	3b01      	subs	r3, #1
 8001622:	045b      	lsls	r3, r3, #17
 8001624:	69ba      	ldr	r2, [r7, #24]
 8001626:	4313      	orrs	r3, r2
 8001628:	61bb      	str	r3, [r7, #24]
    /* Enable external trigger if trigger selection is different of software  */
    /* start.                                                                 */
    /* Note: This configuration keeps the hardware feature of parameter       */
    /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
    /*       software start.                                                  */
    if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800162a:	687b      	ldr	r3, [r7, #4]
 800162c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800162e:	2b00      	cmp	r3, #0
 8001630:	d009      	beq.n	8001646 <HAL_ADC_Init+0x1f2>
    {
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001632:	687b      	ldr	r3, [r7, #4]
 8001634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001636:	f403 7278 	and.w	r2, r3, #992	; 0x3e0
                  | hadc->Init.ExternalTrigConvEdge
 800163a:	687b      	ldr	r3, [r7, #4]
 800163c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800163e:	4313      	orrs	r3, r2
      tmpCFGR |= ((hadc->Init.ExternalTrigConv & ADC_CFGR_EXTSEL)
 8001640:	69ba      	ldr	r2, [r7, #24]
 8001642:	4313      	orrs	r3, r2
 8001644:	61bb      	str	r3, [r7, #24]
      /* Update Configuration Register CFGR */
      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
    }
#else
    /* Update Configuration Register CFGR */
    MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_1, tmpCFGR);
 8001646:	687b      	ldr	r3, [r7, #4]
 8001648:	681b      	ldr	r3, [r3, #0]
 800164a:	68da      	ldr	r2, [r3, #12]
 800164c:	4b2c      	ldr	r3, [pc, #176]	; (8001700 <HAL_ADC_Init+0x2ac>)
 800164e:	4013      	ands	r3, r2
 8001650:	687a      	ldr	r2, [r7, #4]
 8001652:	6812      	ldr	r2, [r2, #0]
 8001654:	69b9      	ldr	r1, [r7, #24]
 8001656:	430b      	orrs	r3, r1
 8001658:	60d3      	str	r3, [r2, #12]
    /* Parameters that can be updated when ADC is disabled or enabled without */
    /* conversion on going on regular and injected groups:                    */
    /*  - Conversion data management      Init.ConversionDataManagement       */
    /*  - LowPowerAutoWait feature        Init.LowPowerAutoWait               */
    /*  - Oversampling parameters         Init.Oversampling                   */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 800165a:	687b      	ldr	r3, [r7, #4]
 800165c:	681b      	ldr	r3, [r3, #0]
 800165e:	4618      	mov	r0, r3
 8001660:	f7ff fed2 	bl	8001408 <LL_ADC_REG_IsConversionOngoing>
 8001664:	6138      	str	r0, [r7, #16]
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4618      	mov	r0, r3
 800166c:	f7ff fedf 	bl	800142e <LL_ADC_INJ_IsConversionOngoing>
 8001670:	60f8      	str	r0, [r7, #12]
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001672:	693b      	ldr	r3, [r7, #16]
 8001674:	2b00      	cmp	r3, #0
 8001676:	d15f      	bne.n	8001738 <HAL_ADC_Init+0x2e4>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001678:	68fb      	ldr	r3, [r7, #12]
 800167a:	2b00      	cmp	r3, #0
 800167c:	d15c      	bne.n	8001738 <HAL_ADC_Init+0x2e4>
                    ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
                    ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
      }
#else
      tmpCFGR = (
                  ADC_CFGR_AUTOWAIT((uint32_t)hadc->Init.LowPowerAutoWait)        |
 800167e:	687b      	ldr	r3, [r7, #4]
 8001680:	7d1b      	ldrb	r3, [r3, #20]
 8001682:	039a      	lsls	r2, r3, #14
                  ADC_CFGR_DMACONTREQ((uint32_t)hadc->Init.ConversionDataManagement));
 8001684:	687b      	ldr	r3, [r7, #4]
 8001686:	6adb      	ldr	r3, [r3, #44]	; 0x2c
      tmpCFGR = (
 8001688:	4313      	orrs	r3, r2
 800168a:	61bb      	str	r3, [r7, #24]
#endif

      MODIFY_REG(hadc->Instance->CFGR, ADC_CFGR_FIELDS_2, tmpCFGR);
 800168c:	687b      	ldr	r3, [r7, #4]
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	68da      	ldr	r2, [r3, #12]
 8001692:	4b1c      	ldr	r3, [pc, #112]	; (8001704 <HAL_ADC_Init+0x2b0>)
 8001694:	4013      	ands	r3, r2
 8001696:	687a      	ldr	r2, [r7, #4]
 8001698:	6812      	ldr	r2, [r2, #0]
 800169a:	69b9      	ldr	r1, [r7, #24]
 800169c:	430b      	orrs	r3, r1
 800169e:	60d3      	str	r3, [r2, #12]

      if (hadc->Init.OversamplingMode == ENABLE)
 80016a0:	687b      	ldr	r3, [r7, #4]
 80016a2:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 80016a6:	2b01      	cmp	r3, #1
 80016a8:	d130      	bne.n	800170c <HAL_ADC_Init+0x2b8>
#endif
        assert_param(IS_ADC_RIGHT_BIT_SHIFT(hadc->Init.Oversampling.RightBitShift));
        assert_param(IS_ADC_TRIGGERED_OVERSAMPLING_MODE(hadc->Init.Oversampling.TriggeredMode));
        assert_param(IS_ADC_REGOVERSAMPLING_MODE(hadc->Init.Oversampling.OversamplingStopReset));

        if ((hadc->Init.ExternalTrigConv == ADC_SOFTWARE_START)
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016ae:	2b00      	cmp	r3, #0
        /*  - Oversampling Ratio                                               */
        /*  - Right bit shift                                                  */
        /*  - Left bit shift                                                   */
        /*  - Triggered mode                                                   */
        /*  - Oversampling mode (continued/resumed)                            */
        MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_FIELDS,
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	691a      	ldr	r2, [r3, #16]
 80016b6:	4b14      	ldr	r3, [pc, #80]	; (8001708 <HAL_ADC_Init+0x2b4>)
 80016b8:	4013      	ands	r3, r2
 80016ba:	687a      	ldr	r2, [r7, #4]
 80016bc:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80016be:	3a01      	subs	r2, #1
 80016c0:	0411      	lsls	r1, r2, #16
 80016c2:	687a      	ldr	r2, [r7, #4]
 80016c4:	6c12      	ldr	r2, [r2, #64]	; 0x40
 80016c6:	4311      	orrs	r1, r2
 80016c8:	687a      	ldr	r2, [r7, #4]
 80016ca:	6c52      	ldr	r2, [r2, #68]	; 0x44
 80016cc:	4311      	orrs	r1, r2
 80016ce:	687a      	ldr	r2, [r7, #4]
 80016d0:	6c92      	ldr	r2, [r2, #72]	; 0x48
 80016d2:	430a      	orrs	r2, r1
 80016d4:	431a      	orrs	r2, r3
 80016d6:	687b      	ldr	r3, [r7, #4]
 80016d8:	681b      	ldr	r3, [r3, #0]
 80016da:	f042 0201 	orr.w	r2, r2, #1
 80016de:	611a      	str	r2, [r3, #16]
 80016e0:	e01c      	b.n	800171c <HAL_ADC_Init+0x2c8>
 80016e2:	bf00      	nop
 80016e4:	24000000 	.word	0x24000000
 80016e8:	053e2d63 	.word	0x053e2d63
 80016ec:	40022000 	.word	0x40022000
 80016f0:	40022100 	.word	0x40022100
 80016f4:	58026000 	.word	0x58026000
 80016f8:	40022300 	.word	0x40022300
 80016fc:	58026300 	.word	0x58026300
 8001700:	fff0c003 	.word	0xfff0c003
 8001704:	ffffbffc 	.word	0xffffbffc
 8001708:	fc00f81e 	.word	0xfc00f81e

      }
      else
      {
        /* Disable ADC oversampling scope on ADC group regular */
        CLEAR_BIT(hadc->Instance->CFGR2, ADC_CFGR2_ROVSE);
 800170c:	687b      	ldr	r3, [r7, #4]
 800170e:	681b      	ldr	r3, [r3, #0]
 8001710:	691a      	ldr	r2, [r3, #16]
 8001712:	687b      	ldr	r3, [r7, #4]
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f022 0201 	bic.w	r2, r2, #1
 800171a:	611a      	str	r2, [r3, #16]
      }

      /* Set the LeftShift parameter: it is applied to the final result with or without oversampling */
      MODIFY_REG(hadc->Instance->CFGR2, ADC_CFGR2_LSHIFT, hadc->Init.LeftBitShift);
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	691b      	ldr	r3, [r3, #16]
 8001722:	f023 4170 	bic.w	r1, r3, #4026531840	; 0xf0000000
 8001726:	687b      	ldr	r3, [r7, #4]
 8001728:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800172a:	687b      	ldr	r3, [r7, #4]
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	430a      	orrs	r2, r1
 8001730:	611a      	str	r2, [r3, #16]
        /* Configure the BOOST Mode */
        ADC_ConfigureBoostMode(hadc);
      }
#else
      /* Configure the BOOST Mode */
      ADC_ConfigureBoostMode(hadc);
 8001732:	6878      	ldr	r0, [r7, #4]
 8001734:	f000 ffa4 	bl	8002680 <ADC_ConfigureBoostMode>
    /*   Note: Scan mode is not present by hardware on this device, but       */
    /*   emulated by software for alignment over all STM32 devices.           */
    /* - if scan mode is enabled, regular channels sequence length is set to  */
    /*   parameter "NbrOfConversion".                                         */

    if (hadc->Init.ScanConvMode == ADC_SCAN_ENABLE)
 8001738:	687b      	ldr	r3, [r7, #4]
 800173a:	68db      	ldr	r3, [r3, #12]
 800173c:	2b01      	cmp	r3, #1
 800173e:	d10c      	bne.n	800175a <HAL_ADC_Init+0x306>
    {
      /* Set number of ranks in regular group sequencer */
      MODIFY_REG(hadc->Instance->SQR1, ADC_SQR1_L, (hadc->Init.NbrOfConversion - (uint8_t)1));
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	681b      	ldr	r3, [r3, #0]
 8001744:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001746:	f023 010f 	bic.w	r1, r3, #15
 800174a:	687b      	ldr	r3, [r7, #4]
 800174c:	699b      	ldr	r3, [r3, #24]
 800174e:	1e5a      	subs	r2, r3, #1
 8001750:	687b      	ldr	r3, [r7, #4]
 8001752:	681b      	ldr	r3, [r3, #0]
 8001754:	430a      	orrs	r2, r1
 8001756:	631a      	str	r2, [r3, #48]	; 0x30
 8001758:	e007      	b.n	800176a <HAL_ADC_Init+0x316>
    }
    else
    {
      CLEAR_BIT(hadc->Instance->SQR1, ADC_SQR1_L);
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f022 020f 	bic.w	r2, r2, #15
 8001768:	631a      	str	r2, [r3, #48]	; 0x30
    }

    /* Initialize the ADC state */
    /* Clear HAL_ADC_STATE_BUSY_INTERNAL bit, set HAL_ADC_STATE_READY bit */
    ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_BUSY_INTERNAL, HAL_ADC_STATE_READY);
 800176a:	687b      	ldr	r3, [r7, #4]
 800176c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800176e:	f023 0303 	bic.w	r3, r3, #3
 8001772:	f043 0201 	orr.w	r2, r3, #1
 8001776:	687b      	ldr	r3, [r7, #4]
 8001778:	655a      	str	r2, [r3, #84]	; 0x54
 800177a:	e007      	b.n	800178c <HAL_ADC_Init+0x338>
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001780:	f043 0210 	orr.w	r2, r3, #16
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8001788:	2301      	movs	r3, #1
 800178a:	77fb      	strb	r3, [r7, #31]
  }

  /* Return function status */
  return tmp_hal_status;
 800178c:	7ffb      	ldrb	r3, [r7, #31]
}
 800178e:	4618      	mov	r0, r3
 8001790:	3724      	adds	r7, #36	; 0x24
 8001792:	46bd      	mov	sp, r7
 8001794:	bd90      	pop	{r4, r7, pc}
 8001796:	bf00      	nop

08001798 <HAL_ADC_Start_IT>:
  *          before calling HAL_ADC_Start_IT().
  * @param hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_IT(ADC_HandleTypeDef *hadc)
{
 8001798:	b580      	push	{r7, lr}
 800179a:	b086      	sub	sp, #24
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80017a0:	687b      	ldr	r3, [r7, #4]
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4a92      	ldr	r2, [pc, #584]	; (80019f0 <HAL_ADC_Start_IT+0x258>)
 80017a6:	4293      	cmp	r3, r2
 80017a8:	d004      	beq.n	80017b4 <HAL_ADC_Start_IT+0x1c>
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	681b      	ldr	r3, [r3, #0]
 80017ae:	4a91      	ldr	r2, [pc, #580]	; (80019f4 <HAL_ADC_Start_IT+0x25c>)
 80017b0:	4293      	cmp	r3, r2
 80017b2:	d101      	bne.n	80017b8 <HAL_ADC_Start_IT+0x20>
 80017b4:	4b90      	ldr	r3, [pc, #576]	; (80019f8 <HAL_ADC_Start_IT+0x260>)
 80017b6:	e000      	b.n	80017ba <HAL_ADC_Start_IT+0x22>
 80017b8:	4b90      	ldr	r3, [pc, #576]	; (80019fc <HAL_ADC_Start_IT+0x264>)
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7ff fd7e 	bl	80012bc <LL_ADC_GetMultimode>
 80017c0:	6138      	str	r0, [r7, #16]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80017c2:	687b      	ldr	r3, [r7, #4]
 80017c4:	681b      	ldr	r3, [r3, #0]
 80017c6:	4618      	mov	r0, r3
 80017c8:	f7ff fe1e 	bl	8001408 <LL_ADC_REG_IsConversionOngoing>
 80017cc:	4603      	mov	r3, r0
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	f040 8118 	bne.w	8001a04 <HAL_ADC_Start_IT+0x26c>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 80017d4:	687b      	ldr	r3, [r7, #4]
 80017d6:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 80017da:	2b01      	cmp	r3, #1
 80017dc:	d101      	bne.n	80017e2 <HAL_ADC_Start_IT+0x4a>
 80017de:	2302      	movs	r3, #2
 80017e0:	e113      	b.n	8001a0a <HAL_ADC_Start_IT+0x272>
 80017e2:	687b      	ldr	r3, [r7, #4]
 80017e4:	2201      	movs	r2, #1
 80017e6:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Enable the ADC peripheral */
    tmp_hal_status = ADC_Enable(hadc);
 80017ea:	6878      	ldr	r0, [r7, #4]
 80017ec:	f000 febe 	bl	800256c <ADC_Enable>
 80017f0:	4603      	mov	r3, r0
 80017f2:	75fb      	strb	r3, [r7, #23]

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 80017f4:	7dfb      	ldrb	r3, [r7, #23]
 80017f6:	2b00      	cmp	r3, #0
 80017f8:	f040 80f5 	bne.w	80019e6 <HAL_ADC_Start_IT+0x24e>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 80017fc:	687b      	ldr	r3, [r7, #4]
 80017fe:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8001800:	4b7f      	ldr	r3, [pc, #508]	; (8001a00 <HAL_ADC_Start_IT+0x268>)
 8001802:	4013      	ands	r3, r2
 8001804:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	655a      	str	r2, [r3, #84]	; 0x54
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset HAL_ADC_STATE_MULTIMODE_SLAVE bit
        - if ADC instance is master or if multimode feature is not available
        - if multimode setting is disabled (ADC instance slave in independent mode) */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	4a78      	ldr	r2, [pc, #480]	; (80019f4 <HAL_ADC_Start_IT+0x25c>)
 8001812:	4293      	cmp	r3, r2
 8001814:	d002      	beq.n	800181c <HAL_ADC_Start_IT+0x84>
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	e000      	b.n	800181e <HAL_ADC_Start_IT+0x86>
 800181c:	4b74      	ldr	r3, [pc, #464]	; (80019f0 <HAL_ADC_Start_IT+0x258>)
 800181e:	687a      	ldr	r2, [r7, #4]
 8001820:	6812      	ldr	r2, [r2, #0]
 8001822:	4293      	cmp	r3, r2
 8001824:	d002      	beq.n	800182c <HAL_ADC_Start_IT+0x94>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001826:	693b      	ldr	r3, [r7, #16]
 8001828:	2b00      	cmp	r3, #0
 800182a:	d105      	bne.n	8001838 <HAL_ADC_Start_IT+0xa0>
         )
      {
        CLEAR_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001830:	f423 1280 	bic.w	r2, r3, #1048576	; 0x100000
 8001834:	687b      	ldr	r3, [r7, #4]
 8001836:	655a      	str	r2, [r3, #84]	; 0x54
      }

      /* Set ADC error code */
      /* Check if a conversion is on going on ADC group injected */
      if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) != 0UL)
 8001838:	687b      	ldr	r3, [r7, #4]
 800183a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800183c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001840:	2b00      	cmp	r3, #0
 8001842:	d006      	beq.n	8001852 <HAL_ADC_Start_IT+0xba>
      {
        /* Reset ADC error code fields related to regular conversions only */
        CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001848:	f023 0206 	bic.w	r2, r3, #6
 800184c:	687b      	ldr	r3, [r7, #4]
 800184e:	659a      	str	r2, [r3, #88]	; 0x58
 8001850:	e002      	b.n	8001858 <HAL_ADC_Start_IT+0xc0>
      }
      else
      {
        /* Reset all ADC error code fields */
        ADC_CLEAR_ERRORCODE(hadc);
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2200      	movs	r2, #0
 8001856:	659a      	str	r2, [r3, #88]	; 0x58
      }

      /* Clear ADC group regular conversion flag and overrun flag               */
      /* (To ensure of no unknown state from potential previous ADC operations) */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 8001858:	687b      	ldr	r3, [r7, #4]
 800185a:	681b      	ldr	r3, [r3, #0]
 800185c:	221c      	movs	r2, #28
 800185e:	601a      	str	r2, [r3, #0]

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 8001860:	687b      	ldr	r3, [r7, #4]
 8001862:	2200      	movs	r2, #0
 8001864:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

      /* Disable all interruptions before enabling the desired ones */
      __HAL_ADC_DISABLE_IT(hadc, (ADC_IT_EOC | ADC_IT_EOS | ADC_IT_OVR));
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	685a      	ldr	r2, [r3, #4]
 800186e:	687b      	ldr	r3, [r7, #4]
 8001870:	681b      	ldr	r3, [r3, #0]
 8001872:	f022 021c 	bic.w	r2, r2, #28
 8001876:	605a      	str	r2, [r3, #4]

      /* Enable ADC end of conversion interrupt */
      switch (hadc->Init.EOCSelection)
 8001878:	687b      	ldr	r3, [r7, #4]
 800187a:	691b      	ldr	r3, [r3, #16]
 800187c:	2b08      	cmp	r3, #8
 800187e:	d108      	bne.n	8001892 <HAL_ADC_Start_IT+0xfa>
      {
        case ADC_EOC_SEQ_CONV:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOS);
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	681b      	ldr	r3, [r3, #0]
 8001884:	685a      	ldr	r2, [r3, #4]
 8001886:	687b      	ldr	r3, [r7, #4]
 8001888:	681b      	ldr	r3, [r3, #0]
 800188a:	f042 0208 	orr.w	r2, r2, #8
 800188e:	605a      	str	r2, [r3, #4]
          break;
 8001890:	e008      	b.n	80018a4 <HAL_ADC_Start_IT+0x10c>
        /* case ADC_EOC_SINGLE_CONV */
        default:
          __HAL_ADC_ENABLE_IT(hadc, ADC_IT_EOC);
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	681b      	ldr	r3, [r3, #0]
 8001896:	685a      	ldr	r2, [r3, #4]
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	f042 0204 	orr.w	r2, r2, #4
 80018a0:	605a      	str	r2, [r3, #4]
          break;
 80018a2:	bf00      	nop

      /* Enable ADC overrun interrupt */
      /* If hadc->Init.Overrun is set to ADC_OVR_DATA_PRESERVED, only then is
         ADC_IT_OVR enabled; otherwise data overwrite is considered as normal
         behavior and no CPU time is lost for a non-processed interruption */
      if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 80018a4:	687b      	ldr	r3, [r7, #4]
 80018a6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80018a8:	2b00      	cmp	r3, #0
 80018aa:	d107      	bne.n	80018bc <HAL_ADC_Start_IT+0x124>
      {
        __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 80018ac:	687b      	ldr	r3, [r7, #4]
 80018ae:	681b      	ldr	r3, [r3, #0]
 80018b0:	685a      	ldr	r2, [r3, #4]
 80018b2:	687b      	ldr	r3, [r7, #4]
 80018b4:	681b      	ldr	r3, [r3, #0]
 80018b6:	f042 0210 	orr.w	r2, r2, #16
 80018ba:	605a      	str	r2, [r3, #4]
      /* trigger event.                                                       */
      /* Case of multimode enabled (when multimode feature is available):     */
      /*  - if ADC is slave and dual regular conversions are enabled, ADC is  */
      /*    enabled only (conversion is not started),                         */
      /*  - if ADC is master, ADC is enabled and conversion is started.       */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	681b      	ldr	r3, [r3, #0]
 80018c0:	4a4c      	ldr	r2, [pc, #304]	; (80019f4 <HAL_ADC_Start_IT+0x25c>)
 80018c2:	4293      	cmp	r3, r2
 80018c4:	d002      	beq.n	80018cc <HAL_ADC_Start_IT+0x134>
 80018c6:	687b      	ldr	r3, [r7, #4]
 80018c8:	681b      	ldr	r3, [r3, #0]
 80018ca:	e000      	b.n	80018ce <HAL_ADC_Start_IT+0x136>
 80018cc:	4b48      	ldr	r3, [pc, #288]	; (80019f0 <HAL_ADC_Start_IT+0x258>)
 80018ce:	687a      	ldr	r2, [r7, #4]
 80018d0:	6812      	ldr	r2, [r2, #0]
 80018d2:	4293      	cmp	r3, r2
 80018d4:	d008      	beq.n	80018e8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80018d6:	693b      	ldr	r3, [r7, #16]
 80018d8:	2b00      	cmp	r3, #0
 80018da:	d005      	beq.n	80018e8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 80018dc:	693b      	ldr	r3, [r7, #16]
 80018de:	2b05      	cmp	r3, #5
 80018e0:	d002      	beq.n	80018e8 <HAL_ADC_Start_IT+0x150>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 80018e2:	693b      	ldr	r3, [r7, #16]
 80018e4:	2b09      	cmp	r3, #9
 80018e6:	d13a      	bne.n	800195e <HAL_ADC_Start_IT+0x1c6>
         )
      {
        /* ADC instance is not a multimode slave instance with multimode regular conversions enabled */
        if (READ_BIT(hadc->Instance->CFGR, ADC_CFGR_JAUTO) != 0UL)
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	68db      	ldr	r3, [r3, #12]
 80018ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80018f2:	2b00      	cmp	r3, #0
 80018f4:	d02d      	beq.n	8001952 <HAL_ADC_Start_IT+0x1ba>
        {
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80018fa:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 80018fe:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001902:	687b      	ldr	r3, [r7, #4]
 8001904:	655a      	str	r2, [r3, #84]	; 0x54

          /* Enable as well injected interruptions in case
           HAL_ADCEx_InjectedStart_IT() has not been called beforehand. This
           allows to start regular and injected conversions when JAUTO is
           set with a single call to HAL_ADC_Start_IT() */
          switch (hadc->Init.EOCSelection)
 8001906:	687b      	ldr	r3, [r7, #4]
 8001908:	691b      	ldr	r3, [r3, #16]
 800190a:	2b08      	cmp	r3, #8
 800190c:	d110      	bne.n	8001930 <HAL_ADC_Start_IT+0x198>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 800190e:	687b      	ldr	r3, [r7, #4]
 8001910:	681b      	ldr	r3, [r3, #0]
 8001912:	685a      	ldr	r2, [r3, #4]
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	681b      	ldr	r3, [r3, #0]
 8001918:	f022 0220 	bic.w	r2, r2, #32
 800191c:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 800191e:	687b      	ldr	r3, [r7, #4]
 8001920:	681b      	ldr	r3, [r3, #0]
 8001922:	685a      	ldr	r2, [r3, #4]
 8001924:	687b      	ldr	r3, [r7, #4]
 8001926:	681b      	ldr	r3, [r3, #0]
 8001928:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800192c:	605a      	str	r2, [r3, #4]
              break;
 800192e:	e010      	b.n	8001952 <HAL_ADC_Start_IT+0x1ba>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 8001930:	687b      	ldr	r3, [r7, #4]
 8001932:	681b      	ldr	r3, [r3, #0]
 8001934:	685a      	ldr	r2, [r3, #4]
 8001936:	687b      	ldr	r3, [r7, #4]
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800193e:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 8001940:	687b      	ldr	r3, [r7, #4]
 8001942:	681b      	ldr	r3, [r3, #0]
 8001944:	685a      	ldr	r2, [r3, #4]
 8001946:	687b      	ldr	r3, [r7, #4]
 8001948:	681b      	ldr	r3, [r3, #0]
 800194a:	f042 0220 	orr.w	r2, r2, #32
 800194e:	605a      	str	r2, [r3, #4]
              break;
 8001950:	bf00      	nop
          }
        }

        /* Start ADC group regular conversion */
        LL_ADC_REG_StartConversion(hadc->Instance);
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	681b      	ldr	r3, [r3, #0]
 8001956:	4618      	mov	r0, r3
 8001958:	f7ff fd42 	bl	80013e0 <LL_ADC_REG_StartConversion>
 800195c:	e054      	b.n	8001a08 <HAL_ADC_Start_IT+0x270>
      }
      else
      {
        /* ADC instance is a multimode slave instance with multimode regular conversions enabled */
        SET_BIT(hadc->State, HAL_ADC_STATE_MULTIMODE_SLAVE);
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001962:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8001966:	687b      	ldr	r3, [r7, #4]
 8001968:	655a      	str	r2, [r3, #84]	; 0x54
        /* if Master ADC JAUTO bit is set, Slave injected interruptions
           are enabled nevertheless (for same reason as above) */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 800196a:	687b      	ldr	r3, [r7, #4]
 800196c:	681b      	ldr	r3, [r3, #0]
 800196e:	4a21      	ldr	r2, [pc, #132]	; (80019f4 <HAL_ADC_Start_IT+0x25c>)
 8001970:	4293      	cmp	r3, r2
 8001972:	d002      	beq.n	800197a <HAL_ADC_Start_IT+0x1e2>
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	681b      	ldr	r3, [r3, #0]
 8001978:	e000      	b.n	800197c <HAL_ADC_Start_IT+0x1e4>
 800197a:	4b1d      	ldr	r3, [pc, #116]	; (80019f0 <HAL_ADC_Start_IT+0x258>)
 800197c:	60fb      	str	r3, [r7, #12]
        if (READ_BIT(tmpADC_Master->CFGR, ADC_CFGR_JAUTO) != 0UL)
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	68db      	ldr	r3, [r3, #12]
 8001982:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001986:	2b00      	cmp	r3, #0
 8001988:	d03e      	beq.n	8001a08 <HAL_ADC_Start_IT+0x270>
        {
          /* First, update Slave State in setting HAL_ADC_STATE_INJ_BUSY bit
             and in resetting HAL_ADC_STATE_INJ_EOC bit */
          ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800198e:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8001992:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8001996:	687b      	ldr	r3, [r7, #4]
 8001998:	655a      	str	r2, [r3, #84]	; 0x54
          /* Next, set Slave injected interruptions */
          switch (hadc->Init.EOCSelection)
 800199a:	687b      	ldr	r3, [r7, #4]
 800199c:	691b      	ldr	r3, [r3, #16]
 800199e:	2b08      	cmp	r3, #8
 80019a0:	d110      	bne.n	80019c4 <HAL_ADC_Start_IT+0x22c>
          {
            case ADC_EOC_SEQ_CONV:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC);
 80019a2:	687b      	ldr	r3, [r7, #4]
 80019a4:	681b      	ldr	r3, [r3, #0]
 80019a6:	685a      	ldr	r2, [r3, #4]
 80019a8:	687b      	ldr	r3, [r7, #4]
 80019aa:	681b      	ldr	r3, [r3, #0]
 80019ac:	f022 0220 	bic.w	r2, r2, #32
 80019b0:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOS);
 80019b2:	687b      	ldr	r3, [r7, #4]
 80019b4:	681b      	ldr	r3, [r3, #0]
 80019b6:	685a      	ldr	r2, [r3, #4]
 80019b8:	687b      	ldr	r3, [r7, #4]
 80019ba:	681b      	ldr	r3, [r3, #0]
 80019bc:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80019c0:	605a      	str	r2, [r3, #4]
              break;
 80019c2:	e021      	b.n	8001a08 <HAL_ADC_Start_IT+0x270>
            /* case ADC_EOC_SINGLE_CONV */
            default:
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOS);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	685a      	ldr	r2, [r3, #4]
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80019d2:	605a      	str	r2, [r3, #4]
              __HAL_ADC_ENABLE_IT(hadc, ADC_IT_JEOC);
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	685a      	ldr	r2, [r3, #4]
 80019da:	687b      	ldr	r3, [r7, #4]
 80019dc:	681b      	ldr	r3, [r3, #0]
 80019de:	f042 0220 	orr.w	r2, r2, #32
 80019e2:	605a      	str	r2, [r3, #4]
              break;
 80019e4:	e010      	b.n	8001a08 <HAL_ADC_Start_IT+0x270>
      }
    }
    else
    {
      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 80019e6:	687b      	ldr	r3, [r7, #4]
 80019e8:	2200      	movs	r2, #0
 80019ea:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
 80019ee:	e00b      	b.n	8001a08 <HAL_ADC_Start_IT+0x270>
 80019f0:	40022000 	.word	0x40022000
 80019f4:	40022100 	.word	0x40022100
 80019f8:	40022300 	.word	0x40022300
 80019fc:	58026300 	.word	0x58026300
 8001a00:	fffff0fe 	.word	0xfffff0fe
    }

  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 8001a04:	2302      	movs	r3, #2
 8001a06:	75fb      	strb	r3, [r7, #23]
  }

  /* Return function status */
  return tmp_hal_status;
 8001a08:	7dfb      	ldrb	r3, [r7, #23]
}
 8001a0a:	4618      	mov	r0, r3
 8001a0c:	3718      	adds	r7, #24
 8001a0e:	46bd      	mov	sp, r7
 8001a10:	bd80      	pop	{r7, pc}
 8001a12:	bf00      	nop

08001a14 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 8001a14:	b480      	push	{r7}
 8001a16:	b083      	sub	sp, #12
 8001a18:	af00      	add	r7, sp, #0
 8001a1a:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
}
 8001a22:	4618      	mov	r0, r3
 8001a24:	370c      	adds	r7, #12
 8001a26:	46bd      	mov	sp, r7
 8001a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a2c:	4770      	bx	lr
	...

08001a30 <HAL_ADC_IRQHandler>:
  * @brief  Handle ADC interrupt request.
  * @param hadc ADC handle
  * @retval None
  */
void HAL_ADC_IRQHandler(ADC_HandleTypeDef *hadc)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	b08a      	sub	sp, #40	; 0x28
 8001a34:	af00      	add	r7, sp, #0
 8001a36:	6078      	str	r0, [r7, #4]
  uint32_t overrun_error = 0UL; /* flag set if overrun occurrence has to be considered as an error */
 8001a38:	2300      	movs	r3, #0
 8001a3a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t tmp_isr = hadc->Instance->ISR;
 8001a3c:	687b      	ldr	r3, [r7, #4]
 8001a3e:	681b      	ldr	r3, [r3, #0]
 8001a40:	681b      	ldr	r3, [r3, #0]
 8001a42:	61fb      	str	r3, [r7, #28]
  uint32_t tmp_ier = hadc->Instance->IER;
 8001a44:	687b      	ldr	r3, [r7, #4]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	685b      	ldr	r3, [r3, #4]
 8001a4a:	61bb      	str	r3, [r7, #24]
  uint32_t tmp_adc_inj_is_trigger_source_sw_start;
  uint32_t tmp_adc_reg_is_trigger_source_sw_start;
  uint32_t tmp_cfgr;
  const ADC_TypeDef *tmpADC_Master;
  uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 8001a4c:	687b      	ldr	r3, [r7, #4]
 8001a4e:	681b      	ldr	r3, [r3, #0]
 8001a50:	4a87      	ldr	r2, [pc, #540]	; (8001c70 <HAL_ADC_IRQHandler+0x240>)
 8001a52:	4293      	cmp	r3, r2
 8001a54:	d004      	beq.n	8001a60 <HAL_ADC_IRQHandler+0x30>
 8001a56:	687b      	ldr	r3, [r7, #4]
 8001a58:	681b      	ldr	r3, [r3, #0]
 8001a5a:	4a86      	ldr	r2, [pc, #536]	; (8001c74 <HAL_ADC_IRQHandler+0x244>)
 8001a5c:	4293      	cmp	r3, r2
 8001a5e:	d101      	bne.n	8001a64 <HAL_ADC_IRQHandler+0x34>
 8001a60:	4b85      	ldr	r3, [pc, #532]	; (8001c78 <HAL_ADC_IRQHandler+0x248>)
 8001a62:	e000      	b.n	8001a66 <HAL_ADC_IRQHandler+0x36>
 8001a64:	4b85      	ldr	r3, [pc, #532]	; (8001c7c <HAL_ADC_IRQHandler+0x24c>)
 8001a66:	4618      	mov	r0, r3
 8001a68:	f7ff fc28 	bl	80012bc <LL_ADC_GetMultimode>
 8001a6c:	6178      	str	r0, [r7, #20]
  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_EOC_SELECTION(hadc->Init.EOCSelection));

  /* ========== Check End of Sampling flag for ADC group regular ========== */
  if (((tmp_isr & ADC_FLAG_EOSMP) == ADC_FLAG_EOSMP) && ((tmp_ier & ADC_IT_EOSMP) == ADC_IT_EOSMP))
 8001a6e:	69fb      	ldr	r3, [r7, #28]
 8001a70:	f003 0302 	and.w	r3, r3, #2
 8001a74:	2b00      	cmp	r3, #0
 8001a76:	d017      	beq.n	8001aa8 <HAL_ADC_IRQHandler+0x78>
 8001a78:	69bb      	ldr	r3, [r7, #24]
 8001a7a:	f003 0302 	and.w	r3, r3, #2
 8001a7e:	2b00      	cmp	r3, #0
 8001a80:	d012      	beq.n	8001aa8 <HAL_ADC_IRQHandler+0x78>
  {
    /* Update state machine on end of sampling status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001a82:	687b      	ldr	r3, [r7, #4]
 8001a84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a86:	f003 0310 	and.w	r3, r3, #16
 8001a8a:	2b00      	cmp	r3, #0
 8001a8c:	d105      	bne.n	8001a9a <HAL_ADC_IRQHandler+0x6a>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOSMP);
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001a92:	f443 6200 	orr.w	r2, r3, #2048	; 0x800
 8001a96:	687b      	ldr	r3, [r7, #4]
 8001a98:	655a      	str	r2, [r3, #84]	; 0x54

    /* End Of Sampling callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->EndOfSamplingCallback(hadc);
#else
    HAL_ADCEx_EndOfSamplingCallback(hadc);
 8001a9a:	6878      	ldr	r0, [r7, #4]
 8001a9c:	f000 ff4a 	bl	8002934 <HAL_ADCEx_EndOfSamplingCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOSMP);
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	681b      	ldr	r3, [r3, #0]
 8001aa4:	2202      	movs	r2, #2
 8001aa6:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group regular end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001aa8:	69fb      	ldr	r3, [r7, #28]
 8001aaa:	f003 0304 	and.w	r3, r3, #4
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	d004      	beq.n	8001abc <HAL_ADC_IRQHandler+0x8c>
 8001ab2:	69bb      	ldr	r3, [r7, #24]
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d10a      	bne.n	8001ad2 <HAL_ADC_IRQHandler+0xa2>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001abc:	69fb      	ldr	r3, [r7, #28]
 8001abe:	f003 0308 	and.w	r3, r3, #8
  if ((((tmp_isr & ADC_FLAG_EOC) == ADC_FLAG_EOC) && ((tmp_ier & ADC_IT_EOC) == ADC_IT_EOC)) ||
 8001ac2:	2b00      	cmp	r3, #0
 8001ac4:	f000 8083 	beq.w	8001bce <HAL_ADC_IRQHandler+0x19e>
      (((tmp_isr & ADC_FLAG_EOS) == ADC_FLAG_EOS) && ((tmp_ier & ADC_IT_EOS) == ADC_IT_EOS)))
 8001ac8:	69bb      	ldr	r3, [r7, #24]
 8001aca:	f003 0308 	and.w	r3, r3, #8
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d07d      	beq.n	8001bce <HAL_ADC_IRQHandler+0x19e>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ad6:	f003 0310 	and.w	r3, r3, #16
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	d105      	bne.n	8001aea <HAL_ADC_IRQHandler+0xba>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ae2:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 8001ae6:	687b      	ldr	r3, [r7, #4]
 8001ae8:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Determine whether any further conversion upcoming on group regular     */
    /* by external trigger, continuous mode or scan sequence on going         */
    /* to disable interruption.                                               */
    if (LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance) != 0UL)
 8001aea:	687b      	ldr	r3, [r7, #4]
 8001aec:	681b      	ldr	r3, [r3, #0]
 8001aee:	4618      	mov	r0, r3
 8001af0:	f7ff fb42 	bl	8001178 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001af4:	4603      	mov	r3, r0
 8001af6:	2b00      	cmp	r3, #0
 8001af8:	d062      	beq.n	8001bc0 <HAL_ADC_IRQHandler+0x190>
    {
      /* Get relevant register CFGR in ADC instance of ADC master or slave    */
      /* in function of multimode state (for devices with multimode           */
      /* available).                                                          */
      if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001afa:	687b      	ldr	r3, [r7, #4]
 8001afc:	681b      	ldr	r3, [r3, #0]
 8001afe:	4a5d      	ldr	r2, [pc, #372]	; (8001c74 <HAL_ADC_IRQHandler+0x244>)
 8001b00:	4293      	cmp	r3, r2
 8001b02:	d002      	beq.n	8001b0a <HAL_ADC_IRQHandler+0xda>
 8001b04:	687b      	ldr	r3, [r7, #4]
 8001b06:	681b      	ldr	r3, [r3, #0]
 8001b08:	e000      	b.n	8001b0c <HAL_ADC_IRQHandler+0xdc>
 8001b0a:	4b59      	ldr	r3, [pc, #356]	; (8001c70 <HAL_ADC_IRQHandler+0x240>)
 8001b0c:	687a      	ldr	r2, [r7, #4]
 8001b0e:	6812      	ldr	r2, [r2, #0]
 8001b10:	4293      	cmp	r3, r2
 8001b12:	d008      	beq.n	8001b26 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001b14:	697b      	ldr	r3, [r7, #20]
 8001b16:	2b00      	cmp	r3, #0
 8001b18:	d005      	beq.n	8001b26 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_SIMULT)
 8001b1a:	697b      	ldr	r3, [r7, #20]
 8001b1c:	2b05      	cmp	r3, #5
 8001b1e:	d002      	beq.n	8001b26 <HAL_ADC_IRQHandler+0xf6>
          || (tmp_multimode_config == LL_ADC_MULTI_DUAL_INJ_ALTERN)
 8001b20:	697b      	ldr	r3, [r7, #20]
 8001b22:	2b09      	cmp	r3, #9
 8001b24:	d104      	bne.n	8001b30 <HAL_ADC_IRQHandler+0x100>
         )
      {
        /* check CONT bit directly in handle ADC CFGR register */
        tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	68db      	ldr	r3, [r3, #12]
 8001b2c:	623b      	str	r3, [r7, #32]
 8001b2e:	e00c      	b.n	8001b4a <HAL_ADC_IRQHandler+0x11a>
      }
      else
      {
        /* else need to check Master ADC CONT bit */
        tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001b30:	687b      	ldr	r3, [r7, #4]
 8001b32:	681b      	ldr	r3, [r3, #0]
 8001b34:	4a4f      	ldr	r2, [pc, #316]	; (8001c74 <HAL_ADC_IRQHandler+0x244>)
 8001b36:	4293      	cmp	r3, r2
 8001b38:	d002      	beq.n	8001b40 <HAL_ADC_IRQHandler+0x110>
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	681b      	ldr	r3, [r3, #0]
 8001b3e:	e000      	b.n	8001b42 <HAL_ADC_IRQHandler+0x112>
 8001b40:	4b4b      	ldr	r3, [pc, #300]	; (8001c70 <HAL_ADC_IRQHandler+0x240>)
 8001b42:	613b      	str	r3, [r7, #16]
        tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001b44:	693b      	ldr	r3, [r7, #16]
 8001b46:	68db      	ldr	r3, [r3, #12]
 8001b48:	623b      	str	r3, [r7, #32]
      }

      /* Carry on if continuous mode is disabled */
      if (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) != ADC_CFGR_CONT)
 8001b4a:	6a3b      	ldr	r3, [r7, #32]
 8001b4c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001b50:	2b00      	cmp	r3, #0
 8001b52:	d135      	bne.n	8001bc0 <HAL_ADC_IRQHandler+0x190>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 8001b54:	687b      	ldr	r3, [r7, #4]
 8001b56:	681b      	ldr	r3, [r3, #0]
 8001b58:	681b      	ldr	r3, [r3, #0]
 8001b5a:	f003 0308 	and.w	r3, r3, #8
 8001b5e:	2b08      	cmp	r3, #8
 8001b60:	d12e      	bne.n	8001bc0 <HAL_ADC_IRQHandler+0x190>
        {
          /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit         */
          /* ADSTART==0 (no conversion on going)                              */
          if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	4618      	mov	r0, r3
 8001b68:	f7ff fc4e 	bl	8001408 <LL_ADC_REG_IsConversionOngoing>
 8001b6c:	4603      	mov	r3, r0
 8001b6e:	2b00      	cmp	r3, #0
 8001b70:	d11a      	bne.n	8001ba8 <HAL_ADC_IRQHandler+0x178>
          {
            /* Disable ADC end of sequence conversion interrupt */
            /* Note: Overrun interrupt was enabled with EOC interrupt in      */
            /* HAL_Start_IT(), but is not disabled here because can be used   */
            /* by overrun IRQ process below.                                  */
            __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 8001b72:	687b      	ldr	r3, [r7, #4]
 8001b74:	681b      	ldr	r3, [r3, #0]
 8001b76:	685a      	ldr	r2, [r3, #4]
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	f022 020c 	bic.w	r2, r2, #12
 8001b80:	605a      	str	r2, [r3, #4]

            /* Set ADC state */
            CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);
 8001b82:	687b      	ldr	r3, [r7, #4]
 8001b84:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b86:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	655a      	str	r2, [r3, #84]	; 0x54

            if ((hadc->State & HAL_ADC_STATE_INJ_BUSY) == 0UL)
 8001b8e:	687b      	ldr	r3, [r7, #4]
 8001b90:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b92:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001b96:	2b00      	cmp	r3, #0
 8001b98:	d112      	bne.n	8001bc0 <HAL_ADC_IRQHandler+0x190>
            {
              SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001b9a:	687b      	ldr	r3, [r7, #4]
 8001b9c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001b9e:	f043 0201 	orr.w	r2, r3, #1
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	655a      	str	r2, [r3, #84]	; 0x54
 8001ba6:	e00b      	b.n	8001bc0 <HAL_ADC_IRQHandler+0x190>
            }
          }
          else
          {
            /* Change ADC state to error state */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bac:	f043 0210 	orr.w	r2, r3, #16
 8001bb0:	687b      	ldr	r3, [r7, #4]
 8001bb2:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001bb8:	f043 0201 	orr.w	r2, r3, #1
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	659a      	str	r2, [r3, #88]	; 0x58
    /*       possibility to use:                                              */
    /*        " if( __HAL_ADC_GET_FLAG(&hadc, ADC_FLAG_EOS)) "                */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 8001bc0:	6878      	ldr	r0, [r7, #4]
 8001bc2:	f7fe fdf9 	bl	80007b8 <HAL_ADC_ConvCpltCallback>
    /* Clear regular group conversion flag */
    /* Note: in case of overrun set to ADC_OVR_DATA_PRESERVED, end of         */
    /*       conversion flags clear induces the release of the preserved data.*/
    /*       Therefore, if the preserved data value is needed, it must be     */
    /*       read preliminarily into HAL_ADC_ConvCpltCallback().              */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	220c      	movs	r2, #12
 8001bcc:	601a      	str	r2, [r3, #0]
  }

  /* ====== Check ADC group injected end of unitary conversion sequence conversions ===== */
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001bce:	69fb      	ldr	r3, [r7, #28]
 8001bd0:	f003 0320 	and.w	r3, r3, #32
 8001bd4:	2b00      	cmp	r3, #0
 8001bd6:	d004      	beq.n	8001be2 <HAL_ADC_IRQHandler+0x1b2>
 8001bd8:	69bb      	ldr	r3, [r7, #24]
 8001bda:	f003 0320 	and.w	r3, r3, #32
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d10b      	bne.n	8001bfa <HAL_ADC_IRQHandler+0x1ca>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001be2:	69fb      	ldr	r3, [r7, #28]
 8001be4:	f003 0340 	and.w	r3, r3, #64	; 0x40
  if ((((tmp_isr & ADC_FLAG_JEOC) == ADC_FLAG_JEOC) && ((tmp_ier & ADC_IT_JEOC) == ADC_IT_JEOC)) ||
 8001be8:	2b00      	cmp	r3, #0
 8001bea:	f000 80a0 	beq.w	8001d2e <HAL_ADC_IRQHandler+0x2fe>
      (((tmp_isr & ADC_FLAG_JEOS) == ADC_FLAG_JEOS) && ((tmp_ier & ADC_IT_JEOS) == ADC_IT_JEOS)))
 8001bee:	69bb      	ldr	r3, [r7, #24]
 8001bf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001bf4:	2b00      	cmp	r3, #0
 8001bf6:	f000 809a 	beq.w	8001d2e <HAL_ADC_IRQHandler+0x2fe>
  {
    /* Update state machine on conversion status if not in error state */
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) == 0UL)
 8001bfa:	687b      	ldr	r3, [r7, #4]
 8001bfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001bfe:	f003 0310 	and.w	r3, r3, #16
 8001c02:	2b00      	cmp	r3, #0
 8001c04:	d105      	bne.n	8001c12 <HAL_ADC_IRQHandler+0x1e2>
    {
      /* Set ADC state */
      SET_BIT(hadc->State, HAL_ADC_STATE_INJ_EOC);
 8001c06:	687b      	ldr	r3, [r7, #4]
 8001c08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001c0a:	f443 5200 	orr.w	r2, r3, #8192	; 0x2000
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	655a      	str	r2, [r3, #84]	; 0x54
    }

    /* Retrieve ADC configuration */
    tmp_adc_inj_is_trigger_source_sw_start = LL_ADC_INJ_IsTriggerSourceSWStart(hadc->Instance);
 8001c12:	687b      	ldr	r3, [r7, #4]
 8001c14:	681b      	ldr	r3, [r3, #0]
 8001c16:	4618      	mov	r0, r3
 8001c18:	f7ff faed 	bl	80011f6 <LL_ADC_INJ_IsTriggerSourceSWStart>
 8001c1c:	60f8      	str	r0, [r7, #12]
    tmp_adc_reg_is_trigger_source_sw_start = LL_ADC_REG_IsTriggerSourceSWStart(hadc->Instance);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	681b      	ldr	r3, [r3, #0]
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff faa8 	bl	8001178 <LL_ADC_REG_IsTriggerSourceSWStart>
 8001c28:	60b8      	str	r0, [r7, #8]
    /* Get relevant register CFGR in ADC instance of ADC master or slave  */
    /* in function of multimode state (for devices with multimode         */
    /* available).                                                        */
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 8001c2a:	687b      	ldr	r3, [r7, #4]
 8001c2c:	681b      	ldr	r3, [r3, #0]
 8001c2e:	4a11      	ldr	r2, [pc, #68]	; (8001c74 <HAL_ADC_IRQHandler+0x244>)
 8001c30:	4293      	cmp	r3, r2
 8001c32:	d002      	beq.n	8001c3a <HAL_ADC_IRQHandler+0x20a>
 8001c34:	687b      	ldr	r3, [r7, #4]
 8001c36:	681b      	ldr	r3, [r3, #0]
 8001c38:	e000      	b.n	8001c3c <HAL_ADC_IRQHandler+0x20c>
 8001c3a:	4b0d      	ldr	r3, [pc, #52]	; (8001c70 <HAL_ADC_IRQHandler+0x240>)
 8001c3c:	687a      	ldr	r2, [r7, #4]
 8001c3e:	6812      	ldr	r2, [r2, #0]
 8001c40:	4293      	cmp	r3, r2
 8001c42:	d008      	beq.n	8001c56 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 8001c44:	697b      	ldr	r3, [r7, #20]
 8001c46:	2b00      	cmp	r3, #0
 8001c48:	d005      	beq.n	8001c56 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_SIMULT)
 8001c4a:	697b      	ldr	r3, [r7, #20]
 8001c4c:	2b06      	cmp	r3, #6
 8001c4e:	d002      	beq.n	8001c56 <HAL_ADC_IRQHandler+0x226>
        || (tmp_multimode_config == LL_ADC_MULTI_DUAL_REG_INTERL)
 8001c50:	697b      	ldr	r3, [r7, #20]
 8001c52:	2b07      	cmp	r3, #7
 8001c54:	d104      	bne.n	8001c60 <HAL_ADC_IRQHandler+0x230>
       )
    {
      tmp_cfgr = READ_REG(hadc->Instance->CFGR);
 8001c56:	687b      	ldr	r3, [r7, #4]
 8001c58:	681b      	ldr	r3, [r3, #0]
 8001c5a:	68db      	ldr	r3, [r3, #12]
 8001c5c:	623b      	str	r3, [r7, #32]
 8001c5e:	e014      	b.n	8001c8a <HAL_ADC_IRQHandler+0x25a>
    }
    else
    {
      tmpADC_Master = __LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance);
 8001c60:	687b      	ldr	r3, [r7, #4]
 8001c62:	681b      	ldr	r3, [r3, #0]
 8001c64:	4a03      	ldr	r2, [pc, #12]	; (8001c74 <HAL_ADC_IRQHandler+0x244>)
 8001c66:	4293      	cmp	r3, r2
 8001c68:	d00a      	beq.n	8001c80 <HAL_ADC_IRQHandler+0x250>
 8001c6a:	687b      	ldr	r3, [r7, #4]
 8001c6c:	681b      	ldr	r3, [r3, #0]
 8001c6e:	e008      	b.n	8001c82 <HAL_ADC_IRQHandler+0x252>
 8001c70:	40022000 	.word	0x40022000
 8001c74:	40022100 	.word	0x40022100
 8001c78:	40022300 	.word	0x40022300
 8001c7c:	58026300 	.word	0x58026300
 8001c80:	4b84      	ldr	r3, [pc, #528]	; (8001e94 <HAL_ADC_IRQHandler+0x464>)
 8001c82:	613b      	str	r3, [r7, #16]
      tmp_cfgr = READ_REG(tmpADC_Master->CFGR);
 8001c84:	693b      	ldr	r3, [r7, #16]
 8001c86:	68db      	ldr	r3, [r3, #12]
 8001c88:	623b      	str	r3, [r7, #32]
    /* Disable interruption if no further conversion upcoming by injected     */
    /* external trigger or by automatic injected conversion with regular      */
    /* group having no further conversion upcoming (same conditions as        */
    /* regular group interruption disabling above),                           */
    /* and if injected scan sequence is completed.                            */
    if (tmp_adc_inj_is_trigger_source_sw_start != 0UL)
 8001c8a:	68fb      	ldr	r3, [r7, #12]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d047      	beq.n	8001d20 <HAL_ADC_IRQHandler+0x2f0>
    {
      if ((READ_BIT(tmp_cfgr, ADC_CFGR_JAUTO) == 0UL) ||
 8001c90:	6a3b      	ldr	r3, [r7, #32]
 8001c92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001c96:	2b00      	cmp	r3, #0
 8001c98:	d007      	beq.n	8001caa <HAL_ADC_IRQHandler+0x27a>
 8001c9a:	68bb      	ldr	r3, [r7, #8]
 8001c9c:	2b00      	cmp	r3, #0
 8001c9e:	d03f      	beq.n	8001d20 <HAL_ADC_IRQHandler+0x2f0>
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
           (READ_BIT(tmp_cfgr, ADC_CFGR_CONT) == 0UL)))
 8001ca0:	6a3b      	ldr	r3, [r7, #32]
 8001ca2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
          ((tmp_adc_reg_is_trigger_source_sw_start != 0UL) &&
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d13a      	bne.n	8001d20 <HAL_ADC_IRQHandler+0x2f0>
      {
        /* If End of Sequence is reached, disable interrupts */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_JEOS))
 8001caa:	687b      	ldr	r3, [r7, #4]
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	681b      	ldr	r3, [r3, #0]
 8001cb0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001cb4:	2b40      	cmp	r3, #64	; 0x40
 8001cb6:	d133      	bne.n	8001d20 <HAL_ADC_IRQHandler+0x2f0>
          /* when the last context has been fully processed, JSQR is reset      */
          /* by the hardware. Even if no injected conversion is planned to come */
          /* (queue empty, triggers are ignored), it can start again            */
          /* immediately after setting a new context (JADSTART is still set).   */
          /* Therefore, state of HAL ADC injected group is kept to busy.        */
          if (READ_BIT(tmp_cfgr, ADC_CFGR_JQM) == 0UL)
 8001cb8:	6a3b      	ldr	r3, [r7, #32]
 8001cba:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001cbe:	2b00      	cmp	r3, #0
 8001cc0:	d12e      	bne.n	8001d20 <HAL_ADC_IRQHandler+0x2f0>
          {
            /* Allowed to modify bits ADC_IT_JEOC/ADC_IT_JEOS only if bit       */
            /* JADSTART==0 (no conversion on going)                             */
            if (LL_ADC_INJ_IsConversionOngoing(hadc->Instance) == 0UL)
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	4618      	mov	r0, r3
 8001cc8:	f7ff fbb1 	bl	800142e <LL_ADC_INJ_IsConversionOngoing>
 8001ccc:	4603      	mov	r3, r0
 8001cce:	2b00      	cmp	r3, #0
 8001cd0:	d11a      	bne.n	8001d08 <HAL_ADC_IRQHandler+0x2d8>
            {
              /* Disable ADC end of sequence conversion interrupt  */
              __HAL_ADC_DISABLE_IT(hadc, ADC_IT_JEOC | ADC_IT_JEOS);
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	685a      	ldr	r2, [r3, #4]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 8001ce0:	605a      	str	r2, [r3, #4]

              /* Set ADC state */
              CLEAR_BIT(hadc->State, HAL_ADC_STATE_INJ_BUSY);
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001ce6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8001cea:	687b      	ldr	r3, [r7, #4]
 8001cec:	655a      	str	r2, [r3, #84]	; 0x54

              if ((hadc->State & HAL_ADC_STATE_REG_BUSY) == 0UL)
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cf2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cf6:	2b00      	cmp	r3, #0
 8001cf8:	d112      	bne.n	8001d20 <HAL_ADC_IRQHandler+0x2f0>
              {
                SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001cfe:	f043 0201 	orr.w	r2, r3, #1
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	655a      	str	r2, [r3, #84]	; 0x54
 8001d06:	e00b      	b.n	8001d20 <HAL_ADC_IRQHandler+0x2f0>
              }
            }
            else
            {
              /* Update ADC state machine to error */
              SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d0c:	f043 0210 	orr.w	r2, r3, #16
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	655a      	str	r2, [r3, #84]	; 0x54

              /* Set ADC error code to ADC peripheral internal error */
              SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8001d14:	687b      	ldr	r3, [r7, #4]
 8001d16:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001d18:	f043 0201 	orr.w	r2, r3, #1
 8001d1c:	687b      	ldr	r3, [r7, #4]
 8001d1e:	659a      	str	r2, [r3, #88]	; 0x58
              interruption has been triggered by end of conversion or end of
              sequence.    */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedConvCpltCallback(hadc);
#else
    HAL_ADCEx_InjectedConvCpltCallback(hadc);
 8001d20:	6878      	ldr	r0, [r7, #4]
 8001d22:	f000 fddf 	bl	80028e4 <HAL_ADCEx_InjectedConvCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear injected group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JEOC | ADC_FLAG_JEOS);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	681b      	ldr	r3, [r3, #0]
 8001d2a:	2260      	movs	r2, #96	; 0x60
 8001d2c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Analog watchdog 1 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD1) == ADC_FLAG_AWD1) && ((tmp_ier & ADC_IT_AWD1) == ADC_IT_AWD1))
 8001d2e:	69fb      	ldr	r3, [r7, #28]
 8001d30:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d34:	2b00      	cmp	r3, #0
 8001d36:	d011      	beq.n	8001d5c <HAL_ADC_IRQHandler+0x32c>
 8001d38:	69bb      	ldr	r3, [r7, #24]
 8001d3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001d3e:	2b00      	cmp	r3, #0
 8001d40:	d00c      	beq.n	8001d5c <HAL_ADC_IRQHandler+0x32c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD1);
 8001d42:	687b      	ldr	r3, [r7, #4]
 8001d44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d46:	f443 3280 	orr.w	r2, r3, #65536	; 0x10000
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 1 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindowCallback(hadc);
#else
    HAL_ADC_LevelOutOfWindowCallback(hadc);
 8001d4e:	6878      	ldr	r0, [r7, #4]
 8001d50:	f000 f8a8 	bl	8001ea4 <HAL_ADC_LevelOutOfWindowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD1);
 8001d54:	687b      	ldr	r3, [r7, #4]
 8001d56:	681b      	ldr	r3, [r3, #0]
 8001d58:	2280      	movs	r2, #128	; 0x80
 8001d5a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 2 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD2) == ADC_FLAG_AWD2) && ((tmp_ier & ADC_IT_AWD2) == ADC_IT_AWD2))
 8001d5c:	69fb      	ldr	r3, [r7, #28]
 8001d5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d62:	2b00      	cmp	r3, #0
 8001d64:	d012      	beq.n	8001d8c <HAL_ADC_IRQHandler+0x35c>
 8001d66:	69bb      	ldr	r3, [r7, #24]
 8001d68:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d6c:	2b00      	cmp	r3, #0
 8001d6e:	d00d      	beq.n	8001d8c <HAL_ADC_IRQHandler+0x35c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD2);
 8001d70:	687b      	ldr	r3, [r7, #4]
 8001d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001d74:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8001d78:	687b      	ldr	r3, [r7, #4]
 8001d7a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 2 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow2Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow2Callback(hadc);
 8001d7c:	6878      	ldr	r0, [r7, #4]
 8001d7e:	f000 fdc5 	bl	800290c <HAL_ADCEx_LevelOutOfWindow2Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD2);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	681b      	ldr	r3, [r3, #0]
 8001d86:	f44f 7280 	mov.w	r2, #256	; 0x100
 8001d8a:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check analog watchdog 3 flag ========== */
  if (((tmp_isr & ADC_FLAG_AWD3) == ADC_FLAG_AWD3) && ((tmp_ier & ADC_IT_AWD3) == ADC_IT_AWD3))
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d92:	2b00      	cmp	r3, #0
 8001d94:	d012      	beq.n	8001dbc <HAL_ADC_IRQHandler+0x38c>
 8001d96:	69bb      	ldr	r3, [r7, #24]
 8001d98:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d9c:	2b00      	cmp	r3, #0
 8001d9e:	d00d      	beq.n	8001dbc <HAL_ADC_IRQHandler+0x38c>
  {
    /* Set ADC state */
    SET_BIT(hadc->State, HAL_ADC_STATE_AWD3);
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001da4:	f443 2280 	orr.w	r2, r3, #262144	; 0x40000
 8001da8:	687b      	ldr	r3, [r7, #4]
 8001daa:	655a      	str	r2, [r3, #84]	; 0x54

    /* Level out of window 3 callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->LevelOutOfWindow3Callback(hadc);
#else
    HAL_ADCEx_LevelOutOfWindow3Callback(hadc);
 8001dac:	6878      	ldr	r0, [r7, #4]
 8001dae:	f000 fdb7 	bl	8002920 <HAL_ADCEx_LevelOutOfWindow3Callback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Clear ADC analog watchdog flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_AWD3);
 8001db2:	687b      	ldr	r3, [r7, #4]
 8001db4:	681b      	ldr	r3, [r3, #0]
 8001db6:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001dba:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Overrun flag ========== */
  if (((tmp_isr & ADC_FLAG_OVR) == ADC_FLAG_OVR) && ((tmp_ier & ADC_IT_OVR) == ADC_IT_OVR))
 8001dbc:	69fb      	ldr	r3, [r7, #28]
 8001dbe:	f003 0310 	and.w	r3, r3, #16
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d043      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x41e>
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	f003 0310 	and.w	r3, r3, #16
 8001dcc:	2b00      	cmp	r3, #0
 8001dce:	d03e      	beq.n	8001e4e <HAL_ADC_IRQHandler+0x41e>
    /* overrun event is not considered as an error.                           */
    /* (cf ref manual "Managing conversions without using the DMA and without */
    /* overrun ")                                                             */
    /* Exception for usage with DMA overrun event always considered as an     */
    /* error.                                                                 */
    if (hadc->Init.Overrun == ADC_OVR_DATA_PRESERVED)
 8001dd0:	687b      	ldr	r3, [r7, #4]
 8001dd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd4:	2b00      	cmp	r3, #0
 8001dd6:	d102      	bne.n	8001dde <HAL_ADC_IRQHandler+0x3ae>
    {
      overrun_error = 1UL;
 8001dd8:	2301      	movs	r3, #1
 8001dda:	627b      	str	r3, [r7, #36]	; 0x24
 8001ddc:	e021      	b.n	8001e22 <HAL_ADC_IRQHandler+0x3f2>
    }
    else
    {
      /* Check DMA configuration */
      if (tmp_multimode_config != LL_ADC_MULTI_INDEPENDENT)
 8001dde:	697b      	ldr	r3, [r7, #20]
 8001de0:	2b00      	cmp	r3, #0
 8001de2:	d015      	beq.n	8001e10 <HAL_ADC_IRQHandler+0x3e0>
      {
        /* Multimode (when feature is available) is enabled,
           Common Control Register MDMA bits must be checked. */
        if (LL_ADC_GetMultiDMATransfer(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) != LL_ADC_MULTI_REG_DMA_EACH_ADC)
 8001de4:	687b      	ldr	r3, [r7, #4]
 8001de6:	681b      	ldr	r3, [r3, #0]
 8001de8:	4a2a      	ldr	r2, [pc, #168]	; (8001e94 <HAL_ADC_IRQHandler+0x464>)
 8001dea:	4293      	cmp	r3, r2
 8001dec:	d004      	beq.n	8001df8 <HAL_ADC_IRQHandler+0x3c8>
 8001dee:	687b      	ldr	r3, [r7, #4]
 8001df0:	681b      	ldr	r3, [r3, #0]
 8001df2:	4a29      	ldr	r2, [pc, #164]	; (8001e98 <HAL_ADC_IRQHandler+0x468>)
 8001df4:	4293      	cmp	r3, r2
 8001df6:	d101      	bne.n	8001dfc <HAL_ADC_IRQHandler+0x3cc>
 8001df8:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <HAL_ADC_IRQHandler+0x46c>)
 8001dfa:	e000      	b.n	8001dfe <HAL_ADC_IRQHandler+0x3ce>
 8001dfc:	4b28      	ldr	r3, [pc, #160]	; (8001ea0 <HAL_ADC_IRQHandler+0x470>)
 8001dfe:	4618      	mov	r0, r3
 8001e00:	f7ff fa6a 	bl	80012d8 <LL_ADC_GetMultiDMATransfer>
 8001e04:	4603      	mov	r3, r0
 8001e06:	2b00      	cmp	r3, #0
 8001e08:	d00b      	beq.n	8001e22 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001e0a:	2301      	movs	r3, #1
 8001e0c:	627b      	str	r3, [r7, #36]	; 0x24
 8001e0e:	e008      	b.n	8001e22 <HAL_ADC_IRQHandler+0x3f2>
        }
      }
      else
      {
        /* Multimode not set or feature not available or ADC independent */
        if ((hadc->Instance->CFGR & ADC_CFGR_DMNGT) != 0UL)
 8001e10:	687b      	ldr	r3, [r7, #4]
 8001e12:	681b      	ldr	r3, [r3, #0]
 8001e14:	68db      	ldr	r3, [r3, #12]
 8001e16:	f003 0303 	and.w	r3, r3, #3
 8001e1a:	2b00      	cmp	r3, #0
 8001e1c:	d001      	beq.n	8001e22 <HAL_ADC_IRQHandler+0x3f2>
        {
          overrun_error = 1UL;
 8001e1e:	2301      	movs	r3, #1
 8001e20:	627b      	str	r3, [r7, #36]	; 0x24
        }
      }
    }

    if (overrun_error == 1UL)
 8001e22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001e24:	2b01      	cmp	r3, #1
 8001e26:	d10e      	bne.n	8001e46 <HAL_ADC_IRQHandler+0x416>
    {
      /* Change ADC state to error state */
      SET_BIT(hadc->State, HAL_ADC_STATE_REG_OVR);
 8001e28:	687b      	ldr	r3, [r7, #4]
 8001e2a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e2c:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8001e30:	687b      	ldr	r3, [r7, #4]
 8001e32:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to overrun */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_OVR);
 8001e34:	687b      	ldr	r3, [r7, #4]
 8001e36:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e38:	f043 0202 	orr.w	r2, r3, #2
 8001e3c:	687b      	ldr	r3, [r7, #4]
 8001e3e:	659a      	str	r2, [r3, #88]	; 0x58
      /*       Therefore, old ADC conversion data can be retrieved in         */
      /*       function "HAL_ADC_ErrorCallback()".                            */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
      hadc->ErrorCallback(hadc);
#else
      HAL_ADC_ErrorCallback(hadc);
 8001e40:	6878      	ldr	r0, [r7, #4]
 8001e42:	f000 f839 	bl	8001eb8 <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
    }

    /* Clear ADC overrun flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_OVR);
 8001e46:	687b      	ldr	r3, [r7, #4]
 8001e48:	681b      	ldr	r3, [r3, #0]
 8001e4a:	2210      	movs	r2, #16
 8001e4c:	601a      	str	r2, [r3, #0]
  }

  /* ========== Check Injected context queue overflow flag ========== */
  if (((tmp_isr & ADC_FLAG_JQOVF) == ADC_FLAG_JQOVF) && ((tmp_ier & ADC_IT_JQOVF) == ADC_IT_JQOVF))
 8001e4e:	69fb      	ldr	r3, [r7, #28]
 8001e50:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e54:	2b00      	cmp	r3, #0
 8001e56:	d018      	beq.n	8001e8a <HAL_ADC_IRQHandler+0x45a>
 8001e58:	69bb      	ldr	r3, [r7, #24]
 8001e5a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d013      	beq.n	8001e8a <HAL_ADC_IRQHandler+0x45a>
  {
    /* Change ADC state to overrun state */
    SET_BIT(hadc->State, HAL_ADC_STATE_INJ_JQOVF);
 8001e62:	687b      	ldr	r3, [r7, #4]
 8001e64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8001e66:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8001e6a:	687b      	ldr	r3, [r7, #4]
 8001e6c:	655a      	str	r2, [r3, #84]	; 0x54

    /* Set ADC error code to Injected context queue overflow */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_JQOVF);
 8001e6e:	687b      	ldr	r3, [r7, #4]
 8001e70:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e72:	f043 0208 	orr.w	r2, r3, #8
 8001e76:	687b      	ldr	r3, [r7, #4]
 8001e78:	659a      	str	r2, [r3, #88]	; 0x58

    /* Clear the Injected context queue overflow flag */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_JQOVF);
 8001e7a:	687b      	ldr	r3, [r7, #4]
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001e82:	601a      	str	r2, [r3, #0]

    /* Injected context queue overflow callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->InjectedQueueOverflowCallback(hadc);
#else
    HAL_ADCEx_InjectedQueueOverflowCallback(hadc);
 8001e84:	6878      	ldr	r0, [r7, #4]
 8001e86:	f000 fd37 	bl	80028f8 <HAL_ADCEx_InjectedQueueOverflowCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
  }

}
 8001e8a:	bf00      	nop
 8001e8c:	3728      	adds	r7, #40	; 0x28
 8001e8e:	46bd      	mov	sp, r7
 8001e90:	bd80      	pop	{r7, pc}
 8001e92:	bf00      	nop
 8001e94:	40022000 	.word	0x40022000
 8001e98:	40022100 	.word	0x40022100
 8001e9c:	40022300 	.word	0x40022300
 8001ea0:	58026300 	.word	0x58026300

08001ea4 <HAL_ADC_LevelOutOfWindowCallback>:
  * @brief  Analog watchdog 1 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_LevelOutOfWindowCallback(ADC_HandleTypeDef *hadc)
{
 8001ea4:	b480      	push	{r7}
 8001ea6:	b083      	sub	sp, #12
 8001ea8:	af00      	add	r7, sp, #0
 8001eaa:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_LevelOutOfWindowCallback must be implemented in the user file.
  */
}
 8001eac:	bf00      	nop
 8001eae:	370c      	adds	r7, #12
 8001eb0:	46bd      	mov	sp, r7
 8001eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eb6:	4770      	bx	lr

08001eb8 <HAL_ADC_ErrorCallback>:
  *           (this function is also clearing overrun flag)
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8001eb8:	b480      	push	{r7}
 8001eba:	b083      	sub	sp, #12
 8001ebc:	af00      	add	r7, sp, #0
 8001ebe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADC_ErrorCallback must be implemented in the user file.
  */
}
 8001ec0:	bf00      	nop
 8001ec2:	370c      	adds	r7, #12
 8001ec4:	46bd      	mov	sp, r7
 8001ec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001eca:	4770      	bx	lr

08001ecc <HAL_ADC_ConfigChannel>:
  * @param hadc ADC handle
  * @param sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 8001ecc:	b590      	push	{r4, r7, lr}
 8001ece:	b0a1      	sub	sp, #132	; 0x84
 8001ed0:	af00      	add	r7, sp, #0
 8001ed2:	6078      	str	r0, [r7, #4]
 8001ed4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8001ed6:	2300      	movs	r3, #0
 8001ed8:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  uint32_t tmpOffsetShifted;
  uint32_t tmp_config_internal_channel;
  __IO uint32_t wait_loop_index = 0;
 8001edc:	2300      	movs	r3, #0
 8001ede:	60bb      	str	r3, [r7, #8]
  /* if ROVSE is set, the value of the OFFSETy_EN bit in ADCx_OFRy register is
     ignored (considered as reset) */
  assert_param(!((sConfig->OffsetNumber != ADC_OFFSET_NONE) && (hadc->Init.OversamplingMode == ENABLE)));

  /* Verification of channel number */
  if (sConfig->SingleDiff != ADC_DIFFERENTIAL_ENDED)
 8001ee0:	683b      	ldr	r3, [r7, #0]
 8001ee2:	68db      	ldr	r3, [r3, #12]
 8001ee4:	4a9d      	ldr	r2, [pc, #628]	; (800215c <HAL_ADC_ConfigChannel+0x290>)
 8001ee6:	4293      	cmp	r3, r2
    }
#endif
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8001eee:	2b01      	cmp	r3, #1
 8001ef0:	d101      	bne.n	8001ef6 <HAL_ADC_ConfigChannel+0x2a>
 8001ef2:	2302      	movs	r3, #2
 8001ef4:	e321      	b.n	800253a <HAL_ADC_ConfigChannel+0x66e>
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	2201      	movs	r2, #1
 8001efa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Channel rank                                                          */
  if (LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 8001efe:	687b      	ldr	r3, [r7, #4]
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	4618      	mov	r0, r3
 8001f04:	f7ff fa80 	bl	8001408 <LL_ADC_REG_IsConversionOngoing>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	f040 8306 	bne.w	800251c <HAL_ADC_ConfigChannel+0x650>
      /* ADC channels preselection */
      hadc->Instance->PCSEL_RES0 |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
    }
#else
    /* ADC channels preselection */
    hadc->Instance->PCSEL |= (1UL << (__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) & 0x1FUL));
 8001f10:	683b      	ldr	r3, [r7, #0]
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8001f18:	2b00      	cmp	r3, #0
 8001f1a:	d108      	bne.n	8001f2e <HAL_ADC_ConfigChannel+0x62>
 8001f1c:	683b      	ldr	r3, [r7, #0]
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	0e9b      	lsrs	r3, r3, #26
 8001f22:	f003 031f 	and.w	r3, r3, #31
 8001f26:	2201      	movs	r2, #1
 8001f28:	fa02 f303 	lsl.w	r3, r2, r3
 8001f2c:	e016      	b.n	8001f5c <HAL_ADC_ConfigChannel+0x90>
 8001f2e:	683b      	ldr	r3, [r7, #0]
 8001f30:	681b      	ldr	r3, [r3, #0]
 8001f32:	667b      	str	r3, [r7, #100]	; 0x64
  uint32_t result;

#if ((defined (__ARM_ARCH_7M__      ) && (__ARM_ARCH_7M__      == 1)) || \
     (defined (__ARM_ARCH_7EM__     ) && (__ARM_ARCH_7EM__     == 1)) || \
     (defined (__ARM_ARCH_8M_MAIN__ ) && (__ARM_ARCH_8M_MAIN__ == 1))    )
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8001f34:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8001f36:	fa93 f3a3 	rbit	r3, r3
 8001f3a:	663b      	str	r3, [r7, #96]	; 0x60
    result |= value & 1U;
    s--;
  }
  result <<= s;                        /* shift when v's highest bits are zero */
#endif
  return result;
 8001f3c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8001f3e:	66bb      	str	r3, [r7, #104]	; 0x68
     optimisations using the logic "value was passed to __builtin_clz, so it
     is non-zero".
     ARM GCC 7.3 and possibly earlier will optimise this test away, leaving a
     single CLZ instruction.
   */
  if (value == 0U)
 8001f40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f42:	2b00      	cmp	r3, #0
 8001f44:	d101      	bne.n	8001f4a <HAL_ADC_ConfigChannel+0x7e>
  {
    return 32U;
 8001f46:	2320      	movs	r3, #32
 8001f48:	e003      	b.n	8001f52 <HAL_ADC_ConfigChannel+0x86>
  }
  return __builtin_clz(value);
 8001f4a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8001f4c:	fab3 f383 	clz	r3, r3
 8001f50:	b2db      	uxtb	r3, r3
 8001f52:	f003 031f 	and.w	r3, r3, #31
 8001f56:	2201      	movs	r2, #1
 8001f58:	fa02 f303 	lsl.w	r3, r2, r3
 8001f5c:	687a      	ldr	r2, [r7, #4]
 8001f5e:	6812      	ldr	r2, [r2, #0]
 8001f60:	69d1      	ldr	r1, [r2, #28]
 8001f62:	687a      	ldr	r2, [r7, #4]
 8001f64:	6812      	ldr	r2, [r2, #0]
 8001f66:	430b      	orrs	r3, r1
 8001f68:	61d3      	str	r3, [r2, #28]
#endif /* ADC_VER_V5_V90 */

    /* Set ADC group regular sequence: channel on the selected scan sequence rank */
    LL_ADC_REG_SetSequencerRanks(hadc->Instance, sConfig->Rank, sConfig->Channel);
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	6818      	ldr	r0, [r3, #0]
 8001f6e:	683b      	ldr	r3, [r7, #0]
 8001f70:	6859      	ldr	r1, [r3, #4]
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	461a      	mov	r2, r3
 8001f78:	f7ff f911 	bl	800119e <LL_ADC_REG_SetSequencerRanks>
    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated when ADC is disabled or enabled without   */
    /* conversion on going on regular group:                                    */
    /*  - Channel sampling time                                                 */
    /*  - Channel offset                                                        */
    tmp_adc_is_conversion_on_going_regular = LL_ADC_REG_IsConversionOngoing(hadc->Instance);
 8001f7c:	687b      	ldr	r3, [r7, #4]
 8001f7e:	681b      	ldr	r3, [r3, #0]
 8001f80:	4618      	mov	r0, r3
 8001f82:	f7ff fa41 	bl	8001408 <LL_ADC_REG_IsConversionOngoing>
 8001f86:	67b8      	str	r0, [r7, #120]	; 0x78
    tmp_adc_is_conversion_on_going_injected = LL_ADC_INJ_IsConversionOngoing(hadc->Instance);
 8001f88:	687b      	ldr	r3, [r7, #4]
 8001f8a:	681b      	ldr	r3, [r3, #0]
 8001f8c:	4618      	mov	r0, r3
 8001f8e:	f7ff fa4e 	bl	800142e <LL_ADC_INJ_IsConversionOngoing>
 8001f92:	6778      	str	r0, [r7, #116]	; 0x74
    if ((tmp_adc_is_conversion_on_going_regular == 0UL)
 8001f94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8001f96:	2b00      	cmp	r3, #0
 8001f98:	f040 80b3 	bne.w	8002102 <HAL_ADC_ConfigChannel+0x236>
        && (tmp_adc_is_conversion_on_going_injected == 0UL)
 8001f9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	f040 80af 	bne.w	8002102 <HAL_ADC_ConfigChannel+0x236>
       )
    {
      /* Set sampling time of the selected ADC channel */
      LL_ADC_SetChannelSamplingTime(hadc->Instance, sConfig->Channel, sConfig->SamplingTime);
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	6818      	ldr	r0, [r3, #0]
 8001fa8:	683b      	ldr	r3, [r7, #0]
 8001faa:	6819      	ldr	r1, [r3, #0]
 8001fac:	683b      	ldr	r3, [r7, #0]
 8001fae:	689b      	ldr	r3, [r3, #8]
 8001fb0:	461a      	mov	r2, r3
 8001fb2:	f7ff f933 	bl	800121c <LL_ADC_SetChannelSamplingTime>
        tmpOffsetShifted = ADC3_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
      }
      else
#endif /* ADC_VER_V5_V90 */
      {
        tmpOffsetShifted = ADC_OFFSET_SHIFT_RESOLUTION(hadc, (uint32_t)sConfig->Offset);
 8001fb6:	4b6a      	ldr	r3, [pc, #424]	; (8002160 <HAL_ADC_ConfigChannel+0x294>)
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f003 4370 	and.w	r3, r3, #4026531840	; 0xf0000000
 8001fbe:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8001fc2:	d10b      	bne.n	8001fdc <HAL_ADC_ConfigChannel+0x110>
 8001fc4:	683b      	ldr	r3, [r7, #0]
 8001fc6:	695a      	ldr	r2, [r3, #20]
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	68db      	ldr	r3, [r3, #12]
 8001fce:	089b      	lsrs	r3, r3, #2
 8001fd0:	f003 0307 	and.w	r3, r3, #7
 8001fd4:	005b      	lsls	r3, r3, #1
 8001fd6:	fa02 f303 	lsl.w	r3, r2, r3
 8001fda:	e01d      	b.n	8002018 <HAL_ADC_ConfigChannel+0x14c>
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	68db      	ldr	r3, [r3, #12]
 8001fe2:	f003 0310 	and.w	r3, r3, #16
 8001fe6:	2b00      	cmp	r3, #0
 8001fe8:	d10b      	bne.n	8002002 <HAL_ADC_ConfigChannel+0x136>
 8001fea:	683b      	ldr	r3, [r7, #0]
 8001fec:	695a      	ldr	r2, [r3, #20]
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	68db      	ldr	r3, [r3, #12]
 8001ff4:	089b      	lsrs	r3, r3, #2
 8001ff6:	f003 0307 	and.w	r3, r3, #7
 8001ffa:	005b      	lsls	r3, r3, #1
 8001ffc:	fa02 f303 	lsl.w	r3, r2, r3
 8002000:	e00a      	b.n	8002018 <HAL_ADC_ConfigChannel+0x14c>
 8002002:	683b      	ldr	r3, [r7, #0]
 8002004:	695a      	ldr	r2, [r3, #20]
 8002006:	687b      	ldr	r3, [r7, #4]
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	68db      	ldr	r3, [r3, #12]
 800200c:	089b      	lsrs	r3, r3, #2
 800200e:	f003 0304 	and.w	r3, r3, #4
 8002012:	005b      	lsls	r3, r3, #1
 8002014:	fa02 f303 	lsl.w	r3, r2, r3
 8002018:	673b      	str	r3, [r7, #112]	; 0x70
      }
      
      if (sConfig->OffsetNumber != ADC_OFFSET_NONE)
 800201a:	683b      	ldr	r3, [r7, #0]
 800201c:	691b      	ldr	r3, [r3, #16]
 800201e:	2b04      	cmp	r3, #4
 8002020:	d027      	beq.n	8002072 <HAL_ADC_ConfigChannel+0x1a6>
      {
        /* Set ADC selected offset number */
        LL_ADC_SetOffset(hadc->Instance, sConfig->OffsetNumber, sConfig->Channel, tmpOffsetShifted);
 8002022:	687b      	ldr	r3, [r7, #4]
 8002024:	6818      	ldr	r0, [r3, #0]
 8002026:	683b      	ldr	r3, [r7, #0]
 8002028:	6919      	ldr	r1, [r3, #16]
 800202a:	683b      	ldr	r3, [r7, #0]
 800202c:	681a      	ldr	r2, [r3, #0]
 800202e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8002030:	f7ff f84e 	bl	80010d0 <LL_ADC_SetOffset>
        else
#endif /* ADC_VER_V5_V90 */
        {
          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetSignedSaturation));
          /* Set ADC selected offset signed saturation */
          LL_ADC_SetOffsetSignedSaturation(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetSignedSaturation == ENABLE) ? LL_ADC_OFFSET_SIGNED_SATURATION_ENABLE : LL_ADC_OFFSET_SIGNED_SATURATION_DISABLE);
 8002034:	687b      	ldr	r3, [r7, #4]
 8002036:	6818      	ldr	r0, [r3, #0]
 8002038:	683b      	ldr	r3, [r7, #0]
 800203a:	6919      	ldr	r1, [r3, #16]
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	7e5b      	ldrb	r3, [r3, #25]
 8002040:	2b01      	cmp	r3, #1
 8002042:	d102      	bne.n	800204a <HAL_ADC_ConfigChannel+0x17e>
 8002044:	f04f 4300 	mov.w	r3, #2147483648	; 0x80000000
 8002048:	e000      	b.n	800204c <HAL_ADC_ConfigChannel+0x180>
 800204a:	2300      	movs	r3, #0
 800204c:	461a      	mov	r2, r3
 800204e:	f7ff f878 	bl	8001142 <LL_ADC_SetOffsetSignedSaturation>

          assert_param(IS_FUNCTIONAL_STATE(sConfig->OffsetRightShift));
          /* Set ADC selected offset right shift */
          LL_ADC_SetDataRightShift(hadc->Instance, sConfig->OffsetNumber, (sConfig->OffsetRightShift == ENABLE) ? LL_ADC_OFFSET_RSHIFT_ENABLE : LL_ADC_OFFSET_RSHIFT_DISABLE);
 8002052:	687b      	ldr	r3, [r7, #4]
 8002054:	6818      	ldr	r0, [r3, #0]
 8002056:	683b      	ldr	r3, [r7, #0]
 8002058:	6919      	ldr	r1, [r3, #16]
 800205a:	683b      	ldr	r3, [r7, #0]
 800205c:	7e1b      	ldrb	r3, [r3, #24]
 800205e:	2b01      	cmp	r3, #1
 8002060:	d102      	bne.n	8002068 <HAL_ADC_ConfigChannel+0x19c>
 8002062:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002066:	e000      	b.n	800206a <HAL_ADC_ConfigChannel+0x19e>
 8002068:	2300      	movs	r3, #0
 800206a:	461a      	mov	r2, r3
 800206c:	f7ff f850 	bl	8001110 <LL_ADC_SetDataRightShift>
 8002070:	e047      	b.n	8002102 <HAL_ADC_ConfigChannel+0x236>
          }
        }
        else
#endif /* ADC_VER_V5_V90 */
        {
          if (((hadc->Instance->OFR1) & ADC_OFR1_OFFSET1_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	681b      	ldr	r3, [r3, #0]
 8002076:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8002078:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 800207c:	683b      	ldr	r3, [r7, #0]
 800207e:	681b      	ldr	r3, [r3, #0]
 8002080:	069b      	lsls	r3, r3, #26
 8002082:	429a      	cmp	r2, r3
 8002084:	d107      	bne.n	8002096 <HAL_ADC_ConfigChannel+0x1ca>
          {
            CLEAR_BIT(hadc->Instance->OFR1, ADC_OFR1_SSATE);
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	681b      	ldr	r3, [r3, #0]
 800208a:	6e1a      	ldr	r2, [r3, #96]	; 0x60
 800208c:	687b      	ldr	r3, [r7, #4]
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002094:	661a      	str	r2, [r3, #96]	; 0x60
          }
          if (((hadc->Instance->OFR2) & ADC_OFR2_OFFSET2_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 8002096:	687b      	ldr	r3, [r7, #4]
 8002098:	681b      	ldr	r3, [r3, #0]
 800209a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 800209c:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020a0:	683b      	ldr	r3, [r7, #0]
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	069b      	lsls	r3, r3, #26
 80020a6:	429a      	cmp	r2, r3
 80020a8:	d107      	bne.n	80020ba <HAL_ADC_ConfigChannel+0x1ee>
          {
            CLEAR_BIT(hadc->Instance->OFR2, ADC_OFR2_SSATE);
 80020aa:	687b      	ldr	r3, [r7, #4]
 80020ac:	681b      	ldr	r3, [r3, #0]
 80020ae:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	681b      	ldr	r3, [r3, #0]
 80020b4:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020b8:	665a      	str	r2, [r3, #100]	; 0x64
          }
          if (((hadc->Instance->OFR3) & ADC_OFR3_OFFSET3_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020ba:	687b      	ldr	r3, [r7, #4]
 80020bc:	681b      	ldr	r3, [r3, #0]
 80020be:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80020c0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	069b      	lsls	r3, r3, #26
 80020ca:	429a      	cmp	r2, r3
 80020cc:	d107      	bne.n	80020de <HAL_ADC_ConfigChannel+0x212>
          {
            CLEAR_BIT(hadc->Instance->OFR3, ADC_OFR3_SSATE);
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	681b      	ldr	r3, [r3, #0]
 80020d2:	6e9a      	ldr	r2, [r3, #104]	; 0x68
 80020d4:	687b      	ldr	r3, [r7, #4]
 80020d6:	681b      	ldr	r3, [r3, #0]
 80020d8:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 80020dc:	669a      	str	r2, [r3, #104]	; 0x68
          }
          if (((hadc->Instance->OFR4) & ADC_OFR4_OFFSET4_CH) == ADC_OFR_CHANNEL(sConfig->Channel))
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80020e4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	681b      	ldr	r3, [r3, #0]
 80020ec:	069b      	lsls	r3, r3, #26
 80020ee:	429a      	cmp	r2, r3
 80020f0:	d107      	bne.n	8002102 <HAL_ADC_ConfigChannel+0x236>
          {
            CLEAR_BIT(hadc->Instance->OFR4, ADC_OFR4_SSATE);
 80020f2:	687b      	ldr	r3, [r7, #4]
 80020f4:	681b      	ldr	r3, [r3, #0]
 80020f6:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80020f8:	687b      	ldr	r3, [r7, #4]
 80020fa:	681b      	ldr	r3, [r3, #0]
 80020fc:	f022 4200 	bic.w	r2, r2, #2147483648	; 0x80000000
 8002100:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Parameters update conditioned to ADC state:                              */
    /* Parameters that can be updated only when ADC is disabled:                */
    /*  - Single or differential mode                                           */
    /*  - Internal measurement channels: Vbat/VrefInt/TempSensor                */
    if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002102:	687b      	ldr	r3, [r7, #4]
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	4618      	mov	r0, r3
 8002108:	f7ff f956 	bl	80013b8 <LL_ADC_IsEnabled>
 800210c:	4603      	mov	r3, r0
 800210e:	2b00      	cmp	r3, #0
 8002110:	f040 820d 	bne.w	800252e <HAL_ADC_ConfigChannel+0x662>
    {
      /* Set mode single-ended or differential input of the selected ADC channel */
      LL_ADC_SetChannelSingleDiff(hadc->Instance, sConfig->Channel, sConfig->SingleDiff);
 8002114:	687b      	ldr	r3, [r7, #4]
 8002116:	6818      	ldr	r0, [r3, #0]
 8002118:	683b      	ldr	r3, [r7, #0]
 800211a:	6819      	ldr	r1, [r3, #0]
 800211c:	683b      	ldr	r3, [r7, #0]
 800211e:	68db      	ldr	r3, [r3, #12]
 8002120:	461a      	mov	r2, r3
 8002122:	f7ff f8a7 	bl	8001274 <LL_ADC_SetChannelSingleDiff>

      /* Configuration of differential mode */
      if (sConfig->SingleDiff == ADC_DIFFERENTIAL_ENDED)
 8002126:	683b      	ldr	r3, [r7, #0]
 8002128:	68db      	ldr	r3, [r3, #12]
 800212a:	4a0c      	ldr	r2, [pc, #48]	; (800215c <HAL_ADC_ConfigChannel+0x290>)
 800212c:	4293      	cmp	r3, r2
 800212e:	f040 8133 	bne.w	8002398 <HAL_ADC_ConfigChannel+0x4cc>
      {
        /* Set sampling time of the selected ADC channel */
        /* Note: ADC channel number masked with value "0x1F" to ensure shift value within 32 bits range */
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	6818      	ldr	r0, [r3, #0]
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	681b      	ldr	r3, [r3, #0]
 800213a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800213e:	2b00      	cmp	r3, #0
 8002140:	d110      	bne.n	8002164 <HAL_ADC_ConfigChannel+0x298>
 8002142:	683b      	ldr	r3, [r7, #0]
 8002144:	681b      	ldr	r3, [r3, #0]
 8002146:	0e9b      	lsrs	r3, r3, #26
 8002148:	3301      	adds	r3, #1
 800214a:	f003 031f 	and.w	r3, r3, #31
 800214e:	2b09      	cmp	r3, #9
 8002150:	bf94      	ite	ls
 8002152:	2301      	movls	r3, #1
 8002154:	2300      	movhi	r3, #0
 8002156:	b2db      	uxtb	r3, r3
 8002158:	e01e      	b.n	8002198 <HAL_ADC_ConfigChannel+0x2cc>
 800215a:	bf00      	nop
 800215c:	47ff0000 	.word	0x47ff0000
 8002160:	5c001000 	.word	0x5c001000
 8002164:	683b      	ldr	r3, [r7, #0]
 8002166:	681b      	ldr	r3, [r3, #0]
 8002168:	65bb      	str	r3, [r7, #88]	; 0x58
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800216a:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800216c:	fa93 f3a3 	rbit	r3, r3
 8002170:	657b      	str	r3, [r7, #84]	; 0x54
  return result;
 8002172:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8002174:	65fb      	str	r3, [r7, #92]	; 0x5c
  if (value == 0U)
 8002176:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002178:	2b00      	cmp	r3, #0
 800217a:	d101      	bne.n	8002180 <HAL_ADC_ConfigChannel+0x2b4>
    return 32U;
 800217c:	2320      	movs	r3, #32
 800217e:	e003      	b.n	8002188 <HAL_ADC_ConfigChannel+0x2bc>
  return __builtin_clz(value);
 8002180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8002182:	fab3 f383 	clz	r3, r3
 8002186:	b2db      	uxtb	r3, r3
 8002188:	3301      	adds	r3, #1
 800218a:	f003 031f 	and.w	r3, r3, #31
 800218e:	2b09      	cmp	r3, #9
 8002190:	bf94      	ite	ls
 8002192:	2301      	movls	r3, #1
 8002194:	2300      	movhi	r3, #0
 8002196:	b2db      	uxtb	r3, r3
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 8002198:	2b00      	cmp	r3, #0
 800219a:	d079      	beq.n	8002290 <HAL_ADC_ConfigChannel+0x3c4>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 800219c:	683b      	ldr	r3, [r7, #0]
 800219e:	681b      	ldr	r3, [r3, #0]
 80021a0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021a4:	2b00      	cmp	r3, #0
 80021a6:	d107      	bne.n	80021b8 <HAL_ADC_ConfigChannel+0x2ec>
 80021a8:	683b      	ldr	r3, [r7, #0]
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	0e9b      	lsrs	r3, r3, #26
 80021ae:	3301      	adds	r3, #1
 80021b0:	069b      	lsls	r3, r3, #26
 80021b2:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021b6:	e015      	b.n	80021e4 <HAL_ADC_ConfigChannel+0x318>
 80021b8:	683b      	ldr	r3, [r7, #0]
 80021ba:	681b      	ldr	r3, [r3, #0]
 80021bc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80021be:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80021c0:	fa93 f3a3 	rbit	r3, r3
 80021c4:	64bb      	str	r3, [r7, #72]	; 0x48
  return result;
 80021c6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80021c8:	653b      	str	r3, [r7, #80]	; 0x50
  if (value == 0U)
 80021ca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021cc:	2b00      	cmp	r3, #0
 80021ce:	d101      	bne.n	80021d4 <HAL_ADC_ConfigChannel+0x308>
    return 32U;
 80021d0:	2320      	movs	r3, #32
 80021d2:	e003      	b.n	80021dc <HAL_ADC_ConfigChannel+0x310>
  return __builtin_clz(value);
 80021d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80021d6:	fab3 f383 	clz	r3, r3
 80021da:	b2db      	uxtb	r3, r3
 80021dc:	3301      	adds	r3, #1
 80021de:	069b      	lsls	r3, r3, #26
 80021e0:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80021e4:	683b      	ldr	r3, [r7, #0]
 80021e6:	681b      	ldr	r3, [r3, #0]
 80021e8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80021ec:	2b00      	cmp	r3, #0
 80021ee:	d109      	bne.n	8002204 <HAL_ADC_ConfigChannel+0x338>
 80021f0:	683b      	ldr	r3, [r7, #0]
 80021f2:	681b      	ldr	r3, [r3, #0]
 80021f4:	0e9b      	lsrs	r3, r3, #26
 80021f6:	3301      	adds	r3, #1
 80021f8:	f003 031f 	and.w	r3, r3, #31
 80021fc:	2101      	movs	r1, #1
 80021fe:	fa01 f303 	lsl.w	r3, r1, r3
 8002202:	e017      	b.n	8002234 <HAL_ADC_ConfigChannel+0x368>
 8002204:	683b      	ldr	r3, [r7, #0]
 8002206:	681b      	ldr	r3, [r3, #0]
 8002208:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800220a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800220c:	fa93 f3a3 	rbit	r3, r3
 8002210:	63fb      	str	r3, [r7, #60]	; 0x3c
  return result;
 8002212:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8002214:	647b      	str	r3, [r7, #68]	; 0x44
  if (value == 0U)
 8002216:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002218:	2b00      	cmp	r3, #0
 800221a:	d101      	bne.n	8002220 <HAL_ADC_ConfigChannel+0x354>
    return 32U;
 800221c:	2320      	movs	r3, #32
 800221e:	e003      	b.n	8002228 <HAL_ADC_ConfigChannel+0x35c>
  return __builtin_clz(value);
 8002220:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8002222:	fab3 f383 	clz	r3, r3
 8002226:	b2db      	uxtb	r3, r3
 8002228:	3301      	adds	r3, #1
 800222a:	f003 031f 	and.w	r3, r3, #31
 800222e:	2101      	movs	r1, #1
 8002230:	fa01 f303 	lsl.w	r3, r1, r3
 8002234:	ea42 0103 	orr.w	r1, r2, r3
 8002238:	683b      	ldr	r3, [r7, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002240:	2b00      	cmp	r3, #0
 8002242:	d10a      	bne.n	800225a <HAL_ADC_ConfigChannel+0x38e>
 8002244:	683b      	ldr	r3, [r7, #0]
 8002246:	681b      	ldr	r3, [r3, #0]
 8002248:	0e9b      	lsrs	r3, r3, #26
 800224a:	3301      	adds	r3, #1
 800224c:	f003 021f 	and.w	r2, r3, #31
 8002250:	4613      	mov	r3, r2
 8002252:	005b      	lsls	r3, r3, #1
 8002254:	4413      	add	r3, r2
 8002256:	051b      	lsls	r3, r3, #20
 8002258:	e018      	b.n	800228c <HAL_ADC_ConfigChannel+0x3c0>
 800225a:	683b      	ldr	r3, [r7, #0]
 800225c:	681b      	ldr	r3, [r3, #0]
 800225e:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 8002260:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8002262:	fa93 f3a3 	rbit	r3, r3
 8002266:	633b      	str	r3, [r7, #48]	; 0x30
  return result;
 8002268:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800226a:	63bb      	str	r3, [r7, #56]	; 0x38
  if (value == 0U)
 800226c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800226e:	2b00      	cmp	r3, #0
 8002270:	d101      	bne.n	8002276 <HAL_ADC_ConfigChannel+0x3aa>
    return 32U;
 8002272:	2320      	movs	r3, #32
 8002274:	e003      	b.n	800227e <HAL_ADC_ConfigChannel+0x3b2>
  return __builtin_clz(value);
 8002276:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002278:	fab3 f383 	clz	r3, r3
 800227c:	b2db      	uxtb	r3, r3
 800227e:	3301      	adds	r3, #1
 8002280:	f003 021f 	and.w	r2, r3, #31
 8002284:	4613      	mov	r3, r2
 8002286:	005b      	lsls	r3, r3, #1
 8002288:	4413      	add	r3, r2
 800228a:	051b      	lsls	r3, r3, #20
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800228c:	430b      	orrs	r3, r1
 800228e:	e07e      	b.n	800238e <HAL_ADC_ConfigChannel+0x4c2>
                                      (uint32_t)(__LL_ADC_DECIMAL_NB_TO_CHANNEL((__LL_ADC_CHANNEL_TO_DECIMAL_NB((uint32_t)sConfig->Channel) + 1UL) & 0x1FUL)),
 8002290:	683b      	ldr	r3, [r7, #0]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002298:	2b00      	cmp	r3, #0
 800229a:	d107      	bne.n	80022ac <HAL_ADC_ConfigChannel+0x3e0>
 800229c:	683b      	ldr	r3, [r7, #0]
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	0e9b      	lsrs	r3, r3, #26
 80022a2:	3301      	adds	r3, #1
 80022a4:	069b      	lsls	r3, r3, #26
 80022a6:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022aa:	e015      	b.n	80022d8 <HAL_ADC_ConfigChannel+0x40c>
 80022ac:	683b      	ldr	r3, [r7, #0]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80022b4:	fa93 f3a3 	rbit	r3, r3
 80022b8:	627b      	str	r3, [r7, #36]	; 0x24
  return result;
 80022ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80022bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (value == 0U)
 80022be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022c0:	2b00      	cmp	r3, #0
 80022c2:	d101      	bne.n	80022c8 <HAL_ADC_ConfigChannel+0x3fc>
    return 32U;
 80022c4:	2320      	movs	r3, #32
 80022c6:	e003      	b.n	80022d0 <HAL_ADC_ConfigChannel+0x404>
  return __builtin_clz(value);
 80022c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80022ca:	fab3 f383 	clz	r3, r3
 80022ce:	b2db      	uxtb	r3, r3
 80022d0:	3301      	adds	r3, #1
 80022d2:	069b      	lsls	r3, r3, #26
 80022d4:	f003 42f8 	and.w	r2, r3, #2080374784	; 0x7c000000
 80022d8:	683b      	ldr	r3, [r7, #0]
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80022e0:	2b00      	cmp	r3, #0
 80022e2:	d109      	bne.n	80022f8 <HAL_ADC_ConfigChannel+0x42c>
 80022e4:	683b      	ldr	r3, [r7, #0]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	0e9b      	lsrs	r3, r3, #26
 80022ea:	3301      	adds	r3, #1
 80022ec:	f003 031f 	and.w	r3, r3, #31
 80022f0:	2101      	movs	r1, #1
 80022f2:	fa01 f303 	lsl.w	r3, r1, r3
 80022f6:	e017      	b.n	8002328 <HAL_ADC_ConfigChannel+0x45c>
 80022f8:	683b      	ldr	r3, [r7, #0]
 80022fa:	681b      	ldr	r3, [r3, #0]
 80022fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 80022fe:	69fb      	ldr	r3, [r7, #28]
 8002300:	fa93 f3a3 	rbit	r3, r3
 8002304:	61bb      	str	r3, [r7, #24]
  return result;
 8002306:	69bb      	ldr	r3, [r7, #24]
 8002308:	623b      	str	r3, [r7, #32]
  if (value == 0U)
 800230a:	6a3b      	ldr	r3, [r7, #32]
 800230c:	2b00      	cmp	r3, #0
 800230e:	d101      	bne.n	8002314 <HAL_ADC_ConfigChannel+0x448>
    return 32U;
 8002310:	2320      	movs	r3, #32
 8002312:	e003      	b.n	800231c <HAL_ADC_ConfigChannel+0x450>
  return __builtin_clz(value);
 8002314:	6a3b      	ldr	r3, [r7, #32]
 8002316:	fab3 f383 	clz	r3, r3
 800231a:	b2db      	uxtb	r3, r3
 800231c:	3301      	adds	r3, #1
 800231e:	f003 031f 	and.w	r3, r3, #31
 8002322:	2101      	movs	r1, #1
 8002324:	fa01 f303 	lsl.w	r3, r1, r3
 8002328:	ea42 0103 	orr.w	r1, r2, r3
 800232c:	683b      	ldr	r3, [r7, #0]
 800232e:	681b      	ldr	r3, [r3, #0]
 8002330:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8002334:	2b00      	cmp	r3, #0
 8002336:	d10d      	bne.n	8002354 <HAL_ADC_ConfigChannel+0x488>
 8002338:	683b      	ldr	r3, [r7, #0]
 800233a:	681b      	ldr	r3, [r3, #0]
 800233c:	0e9b      	lsrs	r3, r3, #26
 800233e:	3301      	adds	r3, #1
 8002340:	f003 021f 	and.w	r2, r3, #31
 8002344:	4613      	mov	r3, r2
 8002346:	005b      	lsls	r3, r3, #1
 8002348:	4413      	add	r3, r2
 800234a:	3b1e      	subs	r3, #30
 800234c:	051b      	lsls	r3, r3, #20
 800234e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8002352:	e01b      	b.n	800238c <HAL_ADC_ConfigChannel+0x4c0>
 8002354:	683b      	ldr	r3, [r7, #0]
 8002356:	681b      	ldr	r3, [r3, #0]
 8002358:	613b      	str	r3, [r7, #16]
   __ASM volatile ("rbit %0, %1" : "=r" (result) : "r" (value) );
 800235a:	693b      	ldr	r3, [r7, #16]
 800235c:	fa93 f3a3 	rbit	r3, r3
 8002360:	60fb      	str	r3, [r7, #12]
  return result;
 8002362:	68fb      	ldr	r3, [r7, #12]
 8002364:	617b      	str	r3, [r7, #20]
  if (value == 0U)
 8002366:	697b      	ldr	r3, [r7, #20]
 8002368:	2b00      	cmp	r3, #0
 800236a:	d101      	bne.n	8002370 <HAL_ADC_ConfigChannel+0x4a4>
    return 32U;
 800236c:	2320      	movs	r3, #32
 800236e:	e003      	b.n	8002378 <HAL_ADC_ConfigChannel+0x4ac>
  return __builtin_clz(value);
 8002370:	697b      	ldr	r3, [r7, #20]
 8002372:	fab3 f383 	clz	r3, r3
 8002376:	b2db      	uxtb	r3, r3
 8002378:	3301      	adds	r3, #1
 800237a:	f003 021f 	and.w	r2, r3, #31
 800237e:	4613      	mov	r3, r2
 8002380:	005b      	lsls	r3, r3, #1
 8002382:	4413      	add	r3, r2
 8002384:	3b1e      	subs	r3, #30
 8002386:	051b      	lsls	r3, r3, #20
 8002388:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
        LL_ADC_SetChannelSamplingTime(hadc->Instance,
 800238c:	430b      	orrs	r3, r1
 800238e:	683a      	ldr	r2, [r7, #0]
 8002390:	6892      	ldr	r2, [r2, #8]
 8002392:	4619      	mov	r1, r3
 8002394:	f7fe ff42 	bl	800121c <LL_ADC_SetChannelSamplingTime>
      /* If internal channel selected, enable dedicated internal buffers and    */
      /* paths.                                                                 */
      /* Note: these internal measurement paths can be disabled using           */
      /* HAL_ADC_DeInit().                                                      */

      if (__LL_ADC_IS_CHANNEL_INTERNAL(sConfig->Channel))
 8002398:	683b      	ldr	r3, [r7, #0]
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	2b00      	cmp	r3, #0
 800239e:	f280 80c6 	bge.w	800252e <HAL_ADC_ConfigChannel+0x662>
      {
        /* Configuration of common ADC parameters                                 */

        tmp_config_internal_channel = LL_ADC_GetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80023a2:	687b      	ldr	r3, [r7, #4]
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	4a67      	ldr	r2, [pc, #412]	; (8002544 <HAL_ADC_ConfigChannel+0x678>)
 80023a8:	4293      	cmp	r3, r2
 80023aa:	d004      	beq.n	80023b6 <HAL_ADC_ConfigChannel+0x4ea>
 80023ac:	687b      	ldr	r3, [r7, #4]
 80023ae:	681b      	ldr	r3, [r3, #0]
 80023b0:	4a65      	ldr	r2, [pc, #404]	; (8002548 <HAL_ADC_ConfigChannel+0x67c>)
 80023b2:	4293      	cmp	r3, r2
 80023b4:	d101      	bne.n	80023ba <HAL_ADC_ConfigChannel+0x4ee>
 80023b6:	4b65      	ldr	r3, [pc, #404]	; (800254c <HAL_ADC_ConfigChannel+0x680>)
 80023b8:	e000      	b.n	80023bc <HAL_ADC_ConfigChannel+0x4f0>
 80023ba:	4b65      	ldr	r3, [pc, #404]	; (8002550 <HAL_ADC_ConfigChannel+0x684>)
 80023bc:	4618      	mov	r0, r3
 80023be:	f7fe fe79 	bl	80010b4 <LL_ADC_GetCommonPathInternalCh>
 80023c2:	66f8      	str	r0, [r7, #108]	; 0x6c

        /* Software is allowed to change common parameters only when all ADCs   */
        /* of the common group are disabled.                                    */
        if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80023c4:	687b      	ldr	r3, [r7, #4]
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4a5e      	ldr	r2, [pc, #376]	; (8002544 <HAL_ADC_ConfigChannel+0x678>)
 80023ca:	4293      	cmp	r3, r2
 80023cc:	d004      	beq.n	80023d8 <HAL_ADC_ConfigChannel+0x50c>
 80023ce:	687b      	ldr	r3, [r7, #4]
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4a5d      	ldr	r2, [pc, #372]	; (8002548 <HAL_ADC_ConfigChannel+0x67c>)
 80023d4:	4293      	cmp	r3, r2
 80023d6:	d10e      	bne.n	80023f6 <HAL_ADC_ConfigChannel+0x52a>
 80023d8:	485a      	ldr	r0, [pc, #360]	; (8002544 <HAL_ADC_ConfigChannel+0x678>)
 80023da:	f7fe ffed 	bl	80013b8 <LL_ADC_IsEnabled>
 80023de:	4604      	mov	r4, r0
 80023e0:	4859      	ldr	r0, [pc, #356]	; (8002548 <HAL_ADC_ConfigChannel+0x67c>)
 80023e2:	f7fe ffe9 	bl	80013b8 <LL_ADC_IsEnabled>
 80023e6:	4603      	mov	r3, r0
 80023e8:	4323      	orrs	r3, r4
 80023ea:	2b00      	cmp	r3, #0
 80023ec:	bf0c      	ite	eq
 80023ee:	2301      	moveq	r3, #1
 80023f0:	2300      	movne	r3, #0
 80023f2:	b2db      	uxtb	r3, r3
 80023f4:	e008      	b.n	8002408 <HAL_ADC_ConfigChannel+0x53c>
 80023f6:	4857      	ldr	r0, [pc, #348]	; (8002554 <HAL_ADC_ConfigChannel+0x688>)
 80023f8:	f7fe ffde 	bl	80013b8 <LL_ADC_IsEnabled>
 80023fc:	4603      	mov	r3, r0
 80023fe:	2b00      	cmp	r3, #0
 8002400:	bf0c      	ite	eq
 8002402:	2301      	moveq	r3, #1
 8002404:	2300      	movne	r3, #0
 8002406:	b2db      	uxtb	r3, r3
 8002408:	2b00      	cmp	r3, #0
 800240a:	d07d      	beq.n	8002508 <HAL_ADC_ConfigChannel+0x63c>
        {
          /* If the requested internal measurement path has already been enabled, */
          /* bypass the configuration processing.                                 */
          if ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_TEMPSENSOR) == 0UL))
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	681b      	ldr	r3, [r3, #0]
 8002410:	4a51      	ldr	r2, [pc, #324]	; (8002558 <HAL_ADC_ConfigChannel+0x68c>)
 8002412:	4293      	cmp	r3, r2
 8002414:	d130      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x5ac>
 8002416:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002418:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800241c:	2b00      	cmp	r3, #0
 800241e:	d12b      	bne.n	8002478 <HAL_ADC_ConfigChannel+0x5ac>
          {
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002420:	687b      	ldr	r3, [r7, #4]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4a4b      	ldr	r2, [pc, #300]	; (8002554 <HAL_ADC_ConfigChannel+0x688>)
 8002426:	4293      	cmp	r3, r2
 8002428:	f040 8081 	bne.w	800252e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_TEMPSENSOR | tmp_config_internal_channel);
 800242c:	687b      	ldr	r3, [r7, #4]
 800242e:	681b      	ldr	r3, [r3, #0]
 8002430:	4a44      	ldr	r2, [pc, #272]	; (8002544 <HAL_ADC_ConfigChannel+0x678>)
 8002432:	4293      	cmp	r3, r2
 8002434:	d004      	beq.n	8002440 <HAL_ADC_ConfigChannel+0x574>
 8002436:	687b      	ldr	r3, [r7, #4]
 8002438:	681b      	ldr	r3, [r3, #0]
 800243a:	4a43      	ldr	r2, [pc, #268]	; (8002548 <HAL_ADC_ConfigChannel+0x67c>)
 800243c:	4293      	cmp	r3, r2
 800243e:	d101      	bne.n	8002444 <HAL_ADC_ConfigChannel+0x578>
 8002440:	4a42      	ldr	r2, [pc, #264]	; (800254c <HAL_ADC_ConfigChannel+0x680>)
 8002442:	e000      	b.n	8002446 <HAL_ADC_ConfigChannel+0x57a>
 8002444:	4a42      	ldr	r2, [pc, #264]	; (8002550 <HAL_ADC_ConfigChannel+0x684>)
 8002446:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002448:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800244c:	4619      	mov	r1, r3
 800244e:	4610      	mov	r0, r2
 8002450:	f7fe fe1d 	bl	800108e <LL_ADC_SetCommonPathInternalCh>
              /* Delay for temperature sensor stabilization time */
              /* Wait loop initialization and execution */
              /* Note: Variable divided by 2 to compensate partially              */
              /*       CPU processing cycles, scaling in us split to not          */
              /*       exceed 32 bits register capacity and handle low frequency. */
              wait_loop_index = ((LL_ADC_DELAY_TEMPSENSOR_STAB_US / 10UL) * ((SystemCoreClock / (100000UL * 2UL)) + 1UL));
 8002454:	4b41      	ldr	r3, [pc, #260]	; (800255c <HAL_ADC_ConfigChannel+0x690>)
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	099b      	lsrs	r3, r3, #6
 800245a:	4a41      	ldr	r2, [pc, #260]	; (8002560 <HAL_ADC_ConfigChannel+0x694>)
 800245c:	fba2 2303 	umull	r2, r3, r2, r3
 8002460:	099b      	lsrs	r3, r3, #6
 8002462:	3301      	adds	r3, #1
 8002464:	005b      	lsls	r3, r3, #1
 8002466:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002468:	e002      	b.n	8002470 <HAL_ADC_ConfigChannel+0x5a4>
              {
                wait_loop_index--;
 800246a:	68bb      	ldr	r3, [r7, #8]
 800246c:	3b01      	subs	r3, #1
 800246e:	60bb      	str	r3, [r7, #8]
              while (wait_loop_index != 0UL)
 8002470:	68bb      	ldr	r3, [r7, #8]
 8002472:	2b00      	cmp	r3, #0
 8002474:	d1f9      	bne.n	800246a <HAL_ADC_ConfigChannel+0x59e>
            if (ADC_TEMPERATURE_SENSOR_INSTANCE(hadc))
 8002476:	e05a      	b.n	800252e <HAL_ADC_ConfigChannel+0x662>
              }
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VBAT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VBAT) == 0UL))
 8002478:	683b      	ldr	r3, [r7, #0]
 800247a:	681b      	ldr	r3, [r3, #0]
 800247c:	4a39      	ldr	r2, [pc, #228]	; (8002564 <HAL_ADC_ConfigChannel+0x698>)
 800247e:	4293      	cmp	r3, r2
 8002480:	d11e      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x5f4>
 8002482:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8002488:	2b00      	cmp	r3, #0
 800248a:	d119      	bne.n	80024c0 <HAL_ADC_ConfigChannel+0x5f4>
          {
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 800248c:	687b      	ldr	r3, [r7, #4]
 800248e:	681b      	ldr	r3, [r3, #0]
 8002490:	4a30      	ldr	r2, [pc, #192]	; (8002554 <HAL_ADC_ConfigChannel+0x688>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d14b      	bne.n	800252e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VBAT | tmp_config_internal_channel);
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4a2a      	ldr	r2, [pc, #168]	; (8002544 <HAL_ADC_ConfigChannel+0x678>)
 800249c:	4293      	cmp	r3, r2
 800249e:	d004      	beq.n	80024aa <HAL_ADC_ConfigChannel+0x5de>
 80024a0:	687b      	ldr	r3, [r7, #4]
 80024a2:	681b      	ldr	r3, [r3, #0]
 80024a4:	4a28      	ldr	r2, [pc, #160]	; (8002548 <HAL_ADC_ConfigChannel+0x67c>)
 80024a6:	4293      	cmp	r3, r2
 80024a8:	d101      	bne.n	80024ae <HAL_ADC_ConfigChannel+0x5e2>
 80024aa:	4a28      	ldr	r2, [pc, #160]	; (800254c <HAL_ADC_ConfigChannel+0x680>)
 80024ac:	e000      	b.n	80024b0 <HAL_ADC_ConfigChannel+0x5e4>
 80024ae:	4a28      	ldr	r2, [pc, #160]	; (8002550 <HAL_ADC_ConfigChannel+0x684>)
 80024b0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024b2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80024b6:	4619      	mov	r1, r3
 80024b8:	4610      	mov	r0, r2
 80024ba:	f7fe fde8 	bl	800108e <LL_ADC_SetCommonPathInternalCh>
            if (ADC_BATTERY_VOLTAGE_INSTANCE(hadc))
 80024be:	e036      	b.n	800252e <HAL_ADC_ConfigChannel+0x662>
            }
          }
          else if ((sConfig->Channel == ADC_CHANNEL_VREFINT) && ((tmp_config_internal_channel & LL_ADC_PATH_INTERNAL_VREFINT) == 0UL))
 80024c0:	683b      	ldr	r3, [r7, #0]
 80024c2:	681b      	ldr	r3, [r3, #0]
 80024c4:	4a28      	ldr	r2, [pc, #160]	; (8002568 <HAL_ADC_ConfigChannel+0x69c>)
 80024c6:	4293      	cmp	r3, r2
 80024c8:	d131      	bne.n	800252e <HAL_ADC_ConfigChannel+0x662>
 80024ca:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024cc:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d12c      	bne.n	800252e <HAL_ADC_ConfigChannel+0x662>
          {
            if (ADC_VREFINT_INSTANCE(hadc))
 80024d4:	687b      	ldr	r3, [r7, #4]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	4a1e      	ldr	r2, [pc, #120]	; (8002554 <HAL_ADC_ConfigChannel+0x688>)
 80024da:	4293      	cmp	r3, r2
 80024dc:	d127      	bne.n	800252e <HAL_ADC_ConfigChannel+0x662>
            {
              LL_ADC_SetCommonPathInternalCh(__LL_ADC_COMMON_INSTANCE(hadc->Instance), LL_ADC_PATH_INTERNAL_VREFINT | tmp_config_internal_channel);
 80024de:	687b      	ldr	r3, [r7, #4]
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	4a18      	ldr	r2, [pc, #96]	; (8002544 <HAL_ADC_ConfigChannel+0x678>)
 80024e4:	4293      	cmp	r3, r2
 80024e6:	d004      	beq.n	80024f2 <HAL_ADC_ConfigChannel+0x626>
 80024e8:	687b      	ldr	r3, [r7, #4]
 80024ea:	681b      	ldr	r3, [r3, #0]
 80024ec:	4a16      	ldr	r2, [pc, #88]	; (8002548 <HAL_ADC_ConfigChannel+0x67c>)
 80024ee:	4293      	cmp	r3, r2
 80024f0:	d101      	bne.n	80024f6 <HAL_ADC_ConfigChannel+0x62a>
 80024f2:	4a16      	ldr	r2, [pc, #88]	; (800254c <HAL_ADC_ConfigChannel+0x680>)
 80024f4:	e000      	b.n	80024f8 <HAL_ADC_ConfigChannel+0x62c>
 80024f6:	4a16      	ldr	r2, [pc, #88]	; (8002550 <HAL_ADC_ConfigChannel+0x684>)
 80024f8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80024fa:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80024fe:	4619      	mov	r1, r3
 8002500:	4610      	mov	r0, r2
 8002502:	f7fe fdc4 	bl	800108e <LL_ADC_SetCommonPathInternalCh>
 8002506:	e012      	b.n	800252e <HAL_ADC_ConfigChannel+0x662>
        /* enabled and other ADC of the common group are enabled, internal      */
        /* measurement paths cannot be enabled.                                 */
        else
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002508:	687b      	ldr	r3, [r7, #4]
 800250a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800250c:	f043 0220 	orr.w	r2, r3, #32
 8002510:	687b      	ldr	r3, [r7, #4]
 8002512:	655a      	str	r2, [r3, #84]	; 0x54

          tmp_hal_status = HAL_ERROR;
 8002514:	2301      	movs	r3, #1
 8002516:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
 800251a:	e008      	b.n	800252e <HAL_ADC_ConfigChannel+0x662>
  /* channel could be done on neither of the channel configuration structure  */
  /* parameters.                                                              */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002520:	f043 0220 	orr.w	r2, r3, #32
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002528:	2301      	movs	r3, #1
 800252a:	f887 307f 	strb.w	r3, [r7, #127]	; 0x7f
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800252e:	687b      	ldr	r3, [r7, #4]
 8002530:	2200      	movs	r2, #0
 8002532:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002536:	f897 307f 	ldrb.w	r3, [r7, #127]	; 0x7f
}
 800253a:	4618      	mov	r0, r3
 800253c:	3784      	adds	r7, #132	; 0x84
 800253e:	46bd      	mov	sp, r7
 8002540:	bd90      	pop	{r4, r7, pc}
 8002542:	bf00      	nop
 8002544:	40022000 	.word	0x40022000
 8002548:	40022100 	.word	0x40022100
 800254c:	40022300 	.word	0x40022300
 8002550:	58026300 	.word	0x58026300
 8002554:	58026000 	.word	0x58026000
 8002558:	cb840000 	.word	0xcb840000
 800255c:	24000000 	.word	0x24000000
 8002560:	053e2d63 	.word	0x053e2d63
 8002564:	c7520000 	.word	0xc7520000
 8002568:	cfb80000 	.word	0xcfb80000

0800256c <ADC_Enable>:
  *         and voltage regulator must be enabled (done into HAL_ADC_Init()).
  * @param hadc ADC handle
  * @retval HAL status.
  */
HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800256c:	b580      	push	{r7, lr}
 800256e:	b084      	sub	sp, #16
 8002570:	af00      	add	r7, sp, #0
 8002572:	6078      	str	r0, [r7, #4]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681b      	ldr	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fe ff1d 	bl	80013b8 <LL_ADC_IsEnabled>
 800257e:	4603      	mov	r3, r0
 8002580:	2b00      	cmp	r3, #0
 8002582:	d16e      	bne.n	8002662 <ADC_Enable+0xf6>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if ((hadc->Instance->CR & (ADC_CR_ADCAL | ADC_CR_JADSTP | ADC_CR_ADSTP | ADC_CR_JADSTART | ADC_CR_ADSTART | ADC_CR_ADDIS | ADC_CR_ADEN)) != 0UL)
 8002584:	687b      	ldr	r3, [r7, #4]
 8002586:	681b      	ldr	r3, [r3, #0]
 8002588:	689a      	ldr	r2, [r3, #8]
 800258a:	4b38      	ldr	r3, [pc, #224]	; (800266c <ADC_Enable+0x100>)
 800258c:	4013      	ands	r3, r2
 800258e:	2b00      	cmp	r3, #0
 8002590:	d00d      	beq.n	80025ae <ADC_Enable+0x42>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002596:	f043 0210 	orr.w	r2, r3, #16
 800259a:	687b      	ldr	r3, [r7, #4]
 800259c:	655a      	str	r2, [r3, #84]	; 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80025a2:	f043 0201 	orr.w	r2, r3, #1
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	659a      	str	r2, [r3, #88]	; 0x58

      return HAL_ERROR;
 80025aa:	2301      	movs	r3, #1
 80025ac:	e05a      	b.n	8002664 <ADC_Enable+0xf8>
    }

    /* Enable the ADC peripheral */
    LL_ADC_Enable(hadc->Instance);
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4618      	mov	r0, r3
 80025b4:	f7fe feec 	bl	8001390 <LL_ADC_Enable>

    /* Wait for ADC effectively enabled */
    tickstart = HAL_GetTick();
 80025b8:	f7fe fd04 	bl	8000fc4 <HAL_GetTick>
 80025bc:	60f8      	str	r0, [r7, #12]

    /* Poll for ADC ready flag raised except case of multimode enabled
       and ADC slave selected. */
    uint32_t tmp_multimode_config = LL_ADC_GetMultimode(__LL_ADC_COMMON_INSTANCE(hadc->Instance));
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	4a2b      	ldr	r2, [pc, #172]	; (8002670 <ADC_Enable+0x104>)
 80025c4:	4293      	cmp	r3, r2
 80025c6:	d004      	beq.n	80025d2 <ADC_Enable+0x66>
 80025c8:	687b      	ldr	r3, [r7, #4]
 80025ca:	681b      	ldr	r3, [r3, #0]
 80025cc:	4a29      	ldr	r2, [pc, #164]	; (8002674 <ADC_Enable+0x108>)
 80025ce:	4293      	cmp	r3, r2
 80025d0:	d101      	bne.n	80025d6 <ADC_Enable+0x6a>
 80025d2:	4b29      	ldr	r3, [pc, #164]	; (8002678 <ADC_Enable+0x10c>)
 80025d4:	e000      	b.n	80025d8 <ADC_Enable+0x6c>
 80025d6:	4b29      	ldr	r3, [pc, #164]	; (800267c <ADC_Enable+0x110>)
 80025d8:	4618      	mov	r0, r3
 80025da:	f7fe fe6f 	bl	80012bc <LL_ADC_GetMultimode>
 80025de:	60b8      	str	r0, [r7, #8]
    if ((__LL_ADC_MULTI_INSTANCE_MASTER(hadc->Instance) == hadc->Instance)
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	681b      	ldr	r3, [r3, #0]
 80025e4:	4a23      	ldr	r2, [pc, #140]	; (8002674 <ADC_Enable+0x108>)
 80025e6:	4293      	cmp	r3, r2
 80025e8:	d002      	beq.n	80025f0 <ADC_Enable+0x84>
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	681b      	ldr	r3, [r3, #0]
 80025ee:	e000      	b.n	80025f2 <ADC_Enable+0x86>
 80025f0:	4b1f      	ldr	r3, [pc, #124]	; (8002670 <ADC_Enable+0x104>)
 80025f2:	687a      	ldr	r2, [r7, #4]
 80025f4:	6812      	ldr	r2, [r2, #0]
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d02c      	beq.n	8002654 <ADC_Enable+0xe8>
        || (tmp_multimode_config == LL_ADC_MULTI_INDEPENDENT)
 80025fa:	68bb      	ldr	r3, [r7, #8]
 80025fc:	2b00      	cmp	r3, #0
 80025fe:	d130      	bne.n	8002662 <ADC_Enable+0xf6>
       )
    {
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002600:	e028      	b.n	8002654 <ADC_Enable+0xe8>
            The workaround is to continue setting ADEN until ADRDY is becomes 1.
            Additionally, ADC_ENABLE_TIMEOUT is defined to encompass this
            4 ADC clock cycle duration */
        /* Note: Test of ADC enabled required due to hardware constraint to     */
        /*       not enable ADC if already enabled.                             */
        if (LL_ADC_IsEnabled(hadc->Instance) == 0UL)
 8002602:	687b      	ldr	r3, [r7, #4]
 8002604:	681b      	ldr	r3, [r3, #0]
 8002606:	4618      	mov	r0, r3
 8002608:	f7fe fed6 	bl	80013b8 <LL_ADC_IsEnabled>
 800260c:	4603      	mov	r3, r0
 800260e:	2b00      	cmp	r3, #0
 8002610:	d104      	bne.n	800261c <ADC_Enable+0xb0>
        {
          LL_ADC_Enable(hadc->Instance);
 8002612:	687b      	ldr	r3, [r7, #4]
 8002614:	681b      	ldr	r3, [r3, #0]
 8002616:	4618      	mov	r0, r3
 8002618:	f7fe feba 	bl	8001390 <LL_ADC_Enable>
        }

        if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800261c:	f7fe fcd2 	bl	8000fc4 <HAL_GetTick>
 8002620:	4602      	mov	r2, r0
 8002622:	68fb      	ldr	r3, [r7, #12]
 8002624:	1ad3      	subs	r3, r2, r3
 8002626:	2b02      	cmp	r3, #2
 8002628:	d914      	bls.n	8002654 <ADC_Enable+0xe8>
        {
          /* New check to avoid false timeout detection in case of preemption */
          if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 800262a:	687b      	ldr	r3, [r7, #4]
 800262c:	681b      	ldr	r3, [r3, #0]
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	f003 0301 	and.w	r3, r3, #1
 8002634:	2b01      	cmp	r3, #1
 8002636:	d00d      	beq.n	8002654 <ADC_Enable+0xe8>
          {
            /* Update ADC state machine to error */
            SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8002638:	687b      	ldr	r3, [r7, #4]
 800263a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800263c:	f043 0210 	orr.w	r2, r3, #16
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	655a      	str	r2, [r3, #84]	; 0x54

            /* Set ADC error code to ADC peripheral internal error */
            SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8002648:	f043 0201 	orr.w	r2, r3, #1
 800264c:	687b      	ldr	r3, [r7, #4]
 800264e:	659a      	str	r2, [r3, #88]	; 0x58

            return HAL_ERROR;
 8002650:	2301      	movs	r3, #1
 8002652:	e007      	b.n	8002664 <ADC_Enable+0xf8>
      while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == 0UL)
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	f003 0301 	and.w	r3, r3, #1
 800265e:	2b01      	cmp	r3, #1
 8002660:	d1cf      	bne.n	8002602 <ADC_Enable+0x96>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 8002662:	2300      	movs	r3, #0
}
 8002664:	4618      	mov	r0, r3
 8002666:	3710      	adds	r7, #16
 8002668:	46bd      	mov	sp, r7
 800266a:	bd80      	pop	{r7, pc}
 800266c:	8000003f 	.word	0x8000003f
 8002670:	40022000 	.word	0x40022000
 8002674:	40022100 	.word	0x40022100
 8002678:	40022300 	.word	0x40022300
 800267c:	58026300 	.word	0x58026300

08002680 <ADC_ConfigureBoostMode>:
  *         stopped.
  * @param  hadc ADC handle
  * @retval None.
  */
void ADC_ConfigureBoostMode(ADC_HandleTypeDef *hadc)
{
 8002680:	b580      	push	{r7, lr}
 8002682:	b084      	sub	sp, #16
 8002684:	af00      	add	r7, sp, #0
 8002686:	6078      	str	r0, [r7, #4]
  uint32_t freq;
  if (ADC_IS_SYNCHRONOUS_CLOCK_MODE(hadc))
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	681b      	ldr	r3, [r3, #0]
 800268c:	4a7a      	ldr	r2, [pc, #488]	; (8002878 <ADC_ConfigureBoostMode+0x1f8>)
 800268e:	4293      	cmp	r3, r2
 8002690:	d004      	beq.n	800269c <ADC_ConfigureBoostMode+0x1c>
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4a79      	ldr	r2, [pc, #484]	; (800287c <ADC_ConfigureBoostMode+0x1fc>)
 8002698:	4293      	cmp	r3, r2
 800269a:	d109      	bne.n	80026b0 <ADC_ConfigureBoostMode+0x30>
 800269c:	4b78      	ldr	r3, [pc, #480]	; (8002880 <ADC_ConfigureBoostMode+0x200>)
 800269e:	689b      	ldr	r3, [r3, #8]
 80026a0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026a4:	2b00      	cmp	r3, #0
 80026a6:	bf14      	ite	ne
 80026a8:	2301      	movne	r3, #1
 80026aa:	2300      	moveq	r3, #0
 80026ac:	b2db      	uxtb	r3, r3
 80026ae:	e008      	b.n	80026c2 <ADC_ConfigureBoostMode+0x42>
 80026b0:	4b74      	ldr	r3, [pc, #464]	; (8002884 <ADC_ConfigureBoostMode+0x204>)
 80026b2:	689b      	ldr	r3, [r3, #8]
 80026b4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	bf14      	ite	ne
 80026bc:	2301      	movne	r3, #1
 80026be:	2300      	moveq	r3, #0
 80026c0:	b2db      	uxtb	r3, r3
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d01c      	beq.n	8002700 <ADC_ConfigureBoostMode+0x80>
  {
    freq = HAL_RCC_GetHCLKFreq();
 80026c6:	f001 fcef 	bl	80040a8 <HAL_RCC_GetHCLKFreq>
 80026ca:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 80026cc:	687b      	ldr	r3, [r7, #4]
 80026ce:	685b      	ldr	r3, [r3, #4]
 80026d0:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026d4:	d010      	beq.n	80026f8 <ADC_ConfigureBoostMode+0x78>
 80026d6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80026da:	d873      	bhi.n	80027c4 <ADC_ConfigureBoostMode+0x144>
 80026dc:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80026e0:	d002      	beq.n	80026e8 <ADC_ConfigureBoostMode+0x68>
 80026e2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80026e6:	d16d      	bne.n	80027c4 <ADC_ConfigureBoostMode+0x144>
    {
      case ADC_CLOCK_SYNC_PCLK_DIV1:
      case ADC_CLOCK_SYNC_PCLK_DIV2:
        freq /= (hadc->Init.ClockPrescaler >> ADC_CCR_CKMODE_Pos);
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	685b      	ldr	r3, [r3, #4]
 80026ec:	0c1b      	lsrs	r3, r3, #16
 80026ee:	68fa      	ldr	r2, [r7, #12]
 80026f0:	fbb2 f3f3 	udiv	r3, r2, r3
 80026f4:	60fb      	str	r3, [r7, #12]
        break;
 80026f6:	e068      	b.n	80027ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_SYNC_PCLK_DIV4:
        freq /= 4UL;
 80026f8:	68fb      	ldr	r3, [r7, #12]
 80026fa:	089b      	lsrs	r3, r3, #2
 80026fc:	60fb      	str	r3, [r7, #12]
        break;
 80026fe:	e064      	b.n	80027ca <ADC_ConfigureBoostMode+0x14a>
        break;
    }
  }
  else
  {
    freq = HAL_RCCEx_GetPeriphCLKFreq(RCC_PERIPHCLK_ADC);
 8002700:	f44f 2000 	mov.w	r0, #524288	; 0x80000
 8002704:	f04f 0100 	mov.w	r1, #0
 8002708:	f002 ff74 	bl	80055f4 <HAL_RCCEx_GetPeriphCLKFreq>
 800270c:	60f8      	str	r0, [r7, #12]
    switch (hadc->Init.ClockPrescaler)
 800270e:	687b      	ldr	r3, [r7, #4]
 8002710:	685b      	ldr	r3, [r3, #4]
 8002712:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 8002716:	d051      	beq.n	80027bc <ADC_ConfigureBoostMode+0x13c>
 8002718:	f5b3 1f30 	cmp.w	r3, #2883584	; 0x2c0000
 800271c:	d854      	bhi.n	80027c8 <ADC_ConfigureBoostMode+0x148>
 800271e:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002722:	d047      	beq.n	80027b4 <ADC_ConfigureBoostMode+0x134>
 8002724:	f5b3 1f20 	cmp.w	r3, #2621440	; 0x280000
 8002728:	d84e      	bhi.n	80027c8 <ADC_ConfigureBoostMode+0x148>
 800272a:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 800272e:	d03d      	beq.n	80027ac <ADC_ConfigureBoostMode+0x12c>
 8002730:	f5b3 1f10 	cmp.w	r3, #2359296	; 0x240000
 8002734:	d848      	bhi.n	80027c8 <ADC_ConfigureBoostMode+0x148>
 8002736:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 800273a:	d033      	beq.n	80027a4 <ADC_ConfigureBoostMode+0x124>
 800273c:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8002740:	d842      	bhi.n	80027c8 <ADC_ConfigureBoostMode+0x148>
 8002742:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 8002746:	d029      	beq.n	800279c <ADC_ConfigureBoostMode+0x11c>
 8002748:	f5b3 1fe0 	cmp.w	r3, #1835008	; 0x1c0000
 800274c:	d83c      	bhi.n	80027c8 <ADC_ConfigureBoostMode+0x148>
 800274e:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002752:	d01a      	beq.n	800278a <ADC_ConfigureBoostMode+0x10a>
 8002754:	f5b3 1fc0 	cmp.w	r3, #1572864	; 0x180000
 8002758:	d836      	bhi.n	80027c8 <ADC_ConfigureBoostMode+0x148>
 800275a:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 800275e:	d014      	beq.n	800278a <ADC_ConfigureBoostMode+0x10a>
 8002760:	f5b3 1fa0 	cmp.w	r3, #1310720	; 0x140000
 8002764:	d830      	bhi.n	80027c8 <ADC_ConfigureBoostMode+0x148>
 8002766:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800276a:	d00e      	beq.n	800278a <ADC_ConfigureBoostMode+0x10a>
 800276c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8002770:	d82a      	bhi.n	80027c8 <ADC_ConfigureBoostMode+0x148>
 8002772:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 8002776:	d008      	beq.n	800278a <ADC_ConfigureBoostMode+0x10a>
 8002778:	f5b3 2f40 	cmp.w	r3, #786432	; 0xc0000
 800277c:	d824      	bhi.n	80027c8 <ADC_ConfigureBoostMode+0x148>
 800277e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8002782:	d002      	beq.n	800278a <ADC_ConfigureBoostMode+0x10a>
 8002784:	f5b3 2f00 	cmp.w	r3, #524288	; 0x80000
 8002788:	d11e      	bne.n	80027c8 <ADC_ConfigureBoostMode+0x148>
      case ADC_CLOCK_ASYNC_DIV4:
      case ADC_CLOCK_ASYNC_DIV6:
      case ADC_CLOCK_ASYNC_DIV8:
      case ADC_CLOCK_ASYNC_DIV10:
      case ADC_CLOCK_ASYNC_DIV12:
        freq /= ((hadc->Init.ClockPrescaler >> ADC_CCR_PRESC_Pos) << 1UL);
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	685b      	ldr	r3, [r3, #4]
 800278e:	0c9b      	lsrs	r3, r3, #18
 8002790:	005b      	lsls	r3, r3, #1
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	fbb2 f3f3 	udiv	r3, r2, r3
 8002798:	60fb      	str	r3, [r7, #12]
        break;
 800279a:	e016      	b.n	80027ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV16:
        freq /= 16UL;
 800279c:	68fb      	ldr	r3, [r7, #12]
 800279e:	091b      	lsrs	r3, r3, #4
 80027a0:	60fb      	str	r3, [r7, #12]
        break;
 80027a2:	e012      	b.n	80027ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV32:
        freq /= 32UL;
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	095b      	lsrs	r3, r3, #5
 80027a8:	60fb      	str	r3, [r7, #12]
        break;
 80027aa:	e00e      	b.n	80027ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV64:
        freq /= 64UL;
 80027ac:	68fb      	ldr	r3, [r7, #12]
 80027ae:	099b      	lsrs	r3, r3, #6
 80027b0:	60fb      	str	r3, [r7, #12]
        break;
 80027b2:	e00a      	b.n	80027ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV128:
        freq /= 128UL;
 80027b4:	68fb      	ldr	r3, [r7, #12]
 80027b6:	09db      	lsrs	r3, r3, #7
 80027b8:	60fb      	str	r3, [r7, #12]
        break;
 80027ba:	e006      	b.n	80027ca <ADC_ConfigureBoostMode+0x14a>
      case ADC_CLOCK_ASYNC_DIV256:
        freq /= 256UL;
 80027bc:	68fb      	ldr	r3, [r7, #12]
 80027be:	0a1b      	lsrs	r3, r3, #8
 80027c0:	60fb      	str	r3, [r7, #12]
        break;
 80027c2:	e002      	b.n	80027ca <ADC_ConfigureBoostMode+0x14a>
        break;
 80027c4:	bf00      	nop
 80027c6:	e000      	b.n	80027ca <ADC_ConfigureBoostMode+0x14a>
      default:
        break;
 80027c8:	bf00      	nop
  else /* if(freq > 25000000UL) */
  {
    MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
  }
#else
  if (HAL_GetREVID() <= REV_ID_Y) /* STM32H7 silicon Rev.Y */
 80027ca:	f7fe fc2b 	bl	8001024 <HAL_GetREVID>
 80027ce:	4603      	mov	r3, r0
 80027d0:	f241 0203 	movw	r2, #4099	; 0x1003
 80027d4:	4293      	cmp	r3, r2
 80027d6:	d815      	bhi.n	8002804 <ADC_ConfigureBoostMode+0x184>
  {
    if (freq > 20000000UL)
 80027d8:	68fb      	ldr	r3, [r7, #12]
 80027da:	4a2b      	ldr	r2, [pc, #172]	; (8002888 <ADC_ConfigureBoostMode+0x208>)
 80027dc:	4293      	cmp	r3, r2
 80027de:	d908      	bls.n	80027f2 <ADC_ConfigureBoostMode+0x172>
    {
      SET_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80027e0:	687b      	ldr	r3, [r7, #4]
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	689a      	ldr	r2, [r3, #8]
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80027ee:	609a      	str	r2, [r3, #8]
    {
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
    }
  }
#endif /* ADC_VER_V5_3 */
}
 80027f0:	e03e      	b.n	8002870 <ADC_ConfigureBoostMode+0x1f0>
      CLEAR_BIT(hadc->Instance->CR, ADC_CR_BOOST_0);
 80027f2:	687b      	ldr	r3, [r7, #4]
 80027f4:	681b      	ldr	r3, [r3, #0]
 80027f6:	689a      	ldr	r2, [r3, #8]
 80027f8:	687b      	ldr	r3, [r7, #4]
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8002800:	609a      	str	r2, [r3, #8]
}
 8002802:	e035      	b.n	8002870 <ADC_ConfigureBoostMode+0x1f0>
    freq /= 2U; /* divider by 2 for Rev.V */
 8002804:	68fb      	ldr	r3, [r7, #12]
 8002806:	085b      	lsrs	r3, r3, #1
 8002808:	60fb      	str	r3, [r7, #12]
    if (freq <= 6250000UL)
 800280a:	68fb      	ldr	r3, [r7, #12]
 800280c:	4a1f      	ldr	r2, [pc, #124]	; (800288c <ADC_ConfigureBoostMode+0x20c>)
 800280e:	4293      	cmp	r3, r2
 8002810:	d808      	bhi.n	8002824 <ADC_ConfigureBoostMode+0x1a4>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, 0UL);
 8002812:	687b      	ldr	r3, [r7, #4]
 8002814:	681b      	ldr	r3, [r3, #0]
 8002816:	689a      	ldr	r2, [r3, #8]
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8002820:	609a      	str	r2, [r3, #8]
}
 8002822:	e025      	b.n	8002870 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 12500000UL)
 8002824:	68fb      	ldr	r3, [r7, #12]
 8002826:	4a1a      	ldr	r2, [pc, #104]	; (8002890 <ADC_ConfigureBoostMode+0x210>)
 8002828:	4293      	cmp	r3, r2
 800282a:	d80a      	bhi.n	8002842 <ADC_ConfigureBoostMode+0x1c2>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_0);
 800282c:	687b      	ldr	r3, [r7, #4]
 800282e:	681b      	ldr	r3, [r3, #0]
 8002830:	689b      	ldr	r3, [r3, #8]
 8002832:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002836:	687b      	ldr	r3, [r7, #4]
 8002838:	681b      	ldr	r3, [r3, #0]
 800283a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800283e:	609a      	str	r2, [r3, #8]
}
 8002840:	e016      	b.n	8002870 <ADC_ConfigureBoostMode+0x1f0>
    else if (freq <= 25000000UL)
 8002842:	68fb      	ldr	r3, [r7, #12]
 8002844:	4a13      	ldr	r2, [pc, #76]	; (8002894 <ADC_ConfigureBoostMode+0x214>)
 8002846:	4293      	cmp	r3, r2
 8002848:	d80a      	bhi.n	8002860 <ADC_ConfigureBoostMode+0x1e0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1);
 800284a:	687b      	ldr	r3, [r7, #4]
 800284c:	681b      	ldr	r3, [r3, #0]
 800284e:	689b      	ldr	r3, [r3, #8]
 8002850:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8002854:	687b      	ldr	r3, [r7, #4]
 8002856:	681b      	ldr	r3, [r3, #0]
 8002858:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800285c:	609a      	str	r2, [r3, #8]
}
 800285e:	e007      	b.n	8002870 <ADC_ConfigureBoostMode+0x1f0>
      MODIFY_REG(hadc->Instance->CR, ADC_CR_BOOST, ADC_CR_BOOST_1 | ADC_CR_BOOST_0);
 8002860:	687b      	ldr	r3, [r7, #4]
 8002862:	681b      	ldr	r3, [r3, #0]
 8002864:	689a      	ldr	r2, [r3, #8]
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f442 7240 	orr.w	r2, r2, #768	; 0x300
 800286e:	609a      	str	r2, [r3, #8]
}
 8002870:	bf00      	nop
 8002872:	3710      	adds	r7, #16
 8002874:	46bd      	mov	sp, r7
 8002876:	bd80      	pop	{r7, pc}
 8002878:	40022000 	.word	0x40022000
 800287c:	40022100 	.word	0x40022100
 8002880:	40022300 	.word	0x40022300
 8002884:	58026300 	.word	0x58026300
 8002888:	01312d00 	.word	0x01312d00
 800288c:	005f5e10 	.word	0x005f5e10
 8002890:	00bebc20 	.word	0x00bebc20
 8002894:	017d7840 	.word	0x017d7840

08002898 <LL_ADC_IsEnabled>:
{
 8002898:	b480      	push	{r7}
 800289a:	b083      	sub	sp, #12
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADEN) == (ADC_CR_ADEN)) ? 1UL : 0UL);
 80028a0:	687b      	ldr	r3, [r7, #4]
 80028a2:	689b      	ldr	r3, [r3, #8]
 80028a4:	f003 0301 	and.w	r3, r3, #1
 80028a8:	2b01      	cmp	r3, #1
 80028aa:	d101      	bne.n	80028b0 <LL_ADC_IsEnabled+0x18>
 80028ac:	2301      	movs	r3, #1
 80028ae:	e000      	b.n	80028b2 <LL_ADC_IsEnabled+0x1a>
 80028b0:	2300      	movs	r3, #0
}
 80028b2:	4618      	mov	r0, r3
 80028b4:	370c      	adds	r7, #12
 80028b6:	46bd      	mov	sp, r7
 80028b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028bc:	4770      	bx	lr

080028be <LL_ADC_REG_IsConversionOngoing>:
{
 80028be:	b480      	push	{r7}
 80028c0:	b083      	sub	sp, #12
 80028c2:	af00      	add	r7, sp, #0
 80028c4:	6078      	str	r0, [r7, #4]
  return ((READ_BIT(ADCx->CR, ADC_CR_ADSTART) == (ADC_CR_ADSTART)) ? 1UL : 0UL);
 80028c6:	687b      	ldr	r3, [r7, #4]
 80028c8:	689b      	ldr	r3, [r3, #8]
 80028ca:	f003 0304 	and.w	r3, r3, #4
 80028ce:	2b04      	cmp	r3, #4
 80028d0:	d101      	bne.n	80028d6 <LL_ADC_REG_IsConversionOngoing+0x18>
 80028d2:	2301      	movs	r3, #1
 80028d4:	e000      	b.n	80028d8 <LL_ADC_REG_IsConversionOngoing+0x1a>
 80028d6:	2300      	movs	r3, #0
}
 80028d8:	4618      	mov	r0, r3
 80028da:	370c      	adds	r7, #12
 80028dc:	46bd      	mov	sp, r7
 80028de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028e2:	4770      	bx	lr

080028e4 <HAL_ADCEx_InjectedConvCpltCallback>:
  * @brief  Injected conversion complete callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedConvCpltCallback(ADC_HandleTypeDef *hadc)
{
 80028e4:	b480      	push	{r7}
 80028e6:	b083      	sub	sp, #12
 80028e8:	af00      	add	r7, sp, #0
 80028ea:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedConvCpltCallback must be implemented in the user file.
  */
}
 80028ec:	bf00      	nop
 80028ee:	370c      	adds	r7, #12
 80028f0:	46bd      	mov	sp, r7
 80028f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028f6:	4770      	bx	lr

080028f8 <HAL_ADCEx_InjectedQueueOverflowCallback>:
            contexts).
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_InjectedQueueOverflowCallback(ADC_HandleTypeDef *hadc)
{
 80028f8:	b480      	push	{r7}
 80028fa:	b083      	sub	sp, #12
 80028fc:	af00      	add	r7, sp, #0
 80028fe:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_InjectedQueueOverflowCallback must be implemented in the user file.
  */
}
 8002900:	bf00      	nop
 8002902:	370c      	adds	r7, #12
 8002904:	46bd      	mov	sp, r7
 8002906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800290a:	4770      	bx	lr

0800290c <HAL_ADCEx_LevelOutOfWindow2Callback>:
  * @brief  Analog watchdog 2 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow2Callback(ADC_HandleTypeDef *hadc)
{
 800290c:	b480      	push	{r7}
 800290e:	b083      	sub	sp, #12
 8002910:	af00      	add	r7, sp, #0
 8002912:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow2Callback must be implemented in the user file.
  */
}
 8002914:	bf00      	nop
 8002916:	370c      	adds	r7, #12
 8002918:	46bd      	mov	sp, r7
 800291a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800291e:	4770      	bx	lr

08002920 <HAL_ADCEx_LevelOutOfWindow3Callback>:
  * @brief  Analog watchdog 3 callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_LevelOutOfWindow3Callback(ADC_HandleTypeDef *hadc)
{
 8002920:	b480      	push	{r7}
 8002922:	b083      	sub	sp, #12
 8002924:	af00      	add	r7, sp, #0
 8002926:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_LevelOutOfWindow3Callback must be implemented in the user file.
  */
}
 8002928:	bf00      	nop
 800292a:	370c      	adds	r7, #12
 800292c:	46bd      	mov	sp, r7
 800292e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002932:	4770      	bx	lr

08002934 <HAL_ADCEx_EndOfSamplingCallback>:
  * @brief  End Of Sampling callback in non-blocking mode.
  * @param hadc ADC handle
  * @retval None
  */
__weak void HAL_ADCEx_EndOfSamplingCallback(ADC_HandleTypeDef *hadc)
{
 8002934:	b480      	push	{r7}
 8002936:	b083      	sub	sp, #12
 8002938:	af00      	add	r7, sp, #0
 800293a:	6078      	str	r0, [r7, #4]
  UNUSED(hadc);

  /* NOTE : This function should not be modified. When the callback is needed,
            function HAL_ADCEx_EndOfSamplingCallback must be implemented in the user file.
  */
}
 800293c:	bf00      	nop
 800293e:	370c      	adds	r7, #12
 8002940:	46bd      	mov	sp, r7
 8002942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002946:	4770      	bx	lr

08002948 <HAL_ADCEx_MultiModeConfigChannel>:
  * @param hadc Master ADC handle
  * @param multimode Structure of ADC multimode configuration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADCEx_MultiModeConfigChannel(ADC_HandleTypeDef *hadc, ADC_MultiModeTypeDef *multimode)
{
 8002948:	b590      	push	{r4, r7, lr}
 800294a:	b09f      	sub	sp, #124	; 0x7c
 800294c:	af00      	add	r7, sp, #0
 800294e:	6078      	str	r0, [r7, #4]
 8002950:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8002952:	2300      	movs	r3, #0
 8002954:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
    assert_param(IS_ADC_DUAL_DATA_MODE(multimode->DualModeData));
    assert_param(IS_ADC_SAMPLING_DELAY(multimode->TwoSamplingDelay));
  }

  /* Process locked */
  __HAL_LOCK(hadc);
 8002958:	687b      	ldr	r3, [r7, #4]
 800295a:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800295e:	2b01      	cmp	r3, #1
 8002960:	d101      	bne.n	8002966 <HAL_ADCEx_MultiModeConfigChannel+0x1e>
 8002962:	2302      	movs	r3, #2
 8002964:	e0be      	b.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>
 8002966:	687b      	ldr	r3, [r7, #4]
 8002968:	2201      	movs	r2, #1
 800296a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  tmphadcSlave.State = HAL_ADC_STATE_RESET;
 800296e:	2300      	movs	r3, #0
 8002970:	65fb      	str	r3, [r7, #92]	; 0x5c
  tmphadcSlave.ErrorCode = HAL_ADC_ERROR_NONE;
 8002972:	2300      	movs	r3, #0
 8002974:	663b      	str	r3, [r7, #96]	; 0x60

  ADC_MULTI_SLAVE(hadc, &tmphadcSlave);
 8002976:	687b      	ldr	r3, [r7, #4]
 8002978:	681b      	ldr	r3, [r3, #0]
 800297a:	4a5c      	ldr	r2, [pc, #368]	; (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 800297c:	4293      	cmp	r3, r2
 800297e:	d102      	bne.n	8002986 <HAL_ADCEx_MultiModeConfigChannel+0x3e>
 8002980:	4b5b      	ldr	r3, [pc, #364]	; (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002982:	60bb      	str	r3, [r7, #8]
 8002984:	e001      	b.n	800298a <HAL_ADCEx_MultiModeConfigChannel+0x42>
 8002986:	2300      	movs	r3, #0
 8002988:	60bb      	str	r3, [r7, #8]

  if (tmphadcSlave.Instance == NULL)
 800298a:	68bb      	ldr	r3, [r7, #8]
 800298c:	2b00      	cmp	r3, #0
 800298e:	d10b      	bne.n	80029a8 <HAL_ADCEx_MultiModeConfigChannel+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002990:	687b      	ldr	r3, [r7, #4]
 8002992:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002994:	f043 0220 	orr.w	r2, r3, #32
 8002998:	687b      	ldr	r3, [r7, #4]
 800299a:	655a      	str	r2, [r3, #84]	; 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	2200      	movs	r2, #0
 80029a0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    return HAL_ERROR;
 80029a4:	2301      	movs	r3, #1
 80029a6:	e09d      	b.n	8002ae4 <HAL_ADCEx_MultiModeConfigChannel+0x19c>

  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Multimode DATA Format configuration                                   */
  tmphadcSlave_conversion_on_going = LL_ADC_REG_IsConversionOngoing((&tmphadcSlave)->Instance);
 80029a8:	68bb      	ldr	r3, [r7, #8]
 80029aa:	4618      	mov	r0, r3
 80029ac:	f7ff ff87 	bl	80028be <LL_ADC_REG_IsConversionOngoing>
 80029b0:	6738      	str	r0, [r7, #112]	; 0x70
  if ((LL_ADC_REG_IsConversionOngoing(hadc->Instance) == 0UL)
 80029b2:	687b      	ldr	r3, [r7, #4]
 80029b4:	681b      	ldr	r3, [r3, #0]
 80029b6:	4618      	mov	r0, r3
 80029b8:	f7ff ff81 	bl	80028be <LL_ADC_REG_IsConversionOngoing>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d17f      	bne.n	8002ac2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
      && (tmphadcSlave_conversion_on_going == 0UL))
 80029c2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d17c      	bne.n	8002ac2 <HAL_ADCEx_MultiModeConfigChannel+0x17a>
  {
    /* Pointer to the common control register */
    tmpADC_Common = __LL_ADC_COMMON_INSTANCE(hadc->Instance);
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	4a47      	ldr	r2, [pc, #284]	; (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 80029ce:	4293      	cmp	r3, r2
 80029d0:	d004      	beq.n	80029dc <HAL_ADCEx_MultiModeConfigChannel+0x94>
 80029d2:	687b      	ldr	r3, [r7, #4]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	4a46      	ldr	r2, [pc, #280]	; (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 80029d8:	4293      	cmp	r3, r2
 80029da:	d101      	bne.n	80029e0 <HAL_ADCEx_MultiModeConfigChannel+0x98>
 80029dc:	4b45      	ldr	r3, [pc, #276]	; (8002af4 <HAL_ADCEx_MultiModeConfigChannel+0x1ac>)
 80029de:	e000      	b.n	80029e2 <HAL_ADCEx_MultiModeConfigChannel+0x9a>
 80029e0:	4b45      	ldr	r3, [pc, #276]	; (8002af8 <HAL_ADCEx_MultiModeConfigChannel+0x1b0>)
 80029e2:	66fb      	str	r3, [r7, #108]	; 0x6c

    /* If multimode is selected, configure all multimode parameters.          */
    /* Otherwise, reset multimode parameters (can be used in case of          */
    /* transition from multimode to independent mode).                        */
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 80029e4:	683b      	ldr	r3, [r7, #0]
 80029e6:	681b      	ldr	r3, [r3, #0]
 80029e8:	2b00      	cmp	r3, #0
 80029ea:	d039      	beq.n	8002a60 <HAL_ADCEx_MultiModeConfigChannel+0x118>
    {
      MODIFY_REG(tmpADC_Common->CCR, ADC_CCR_DAMDF, multimode->DualModeData);
 80029ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029ee:	689b      	ldr	r3, [r3, #8]
 80029f0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80029f4:	683b      	ldr	r3, [r7, #0]
 80029f6:	685b      	ldr	r3, [r3, #4]
 80029f8:	431a      	orrs	r2, r3
 80029fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80029fc:	609a      	str	r2, [r3, #8]
      /*      from 1 to 8 clock cycles for 12 bits                              */
      /*      from 1 to 6 clock cycles for 10 and 8 bits                        */
      /*    If a higher delay is selected, it will be clipped to maximum delay  */
      /*    range                                                               */

      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	681b      	ldr	r3, [r3, #0]
 8002a02:	4a3a      	ldr	r2, [pc, #232]	; (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a04:	4293      	cmp	r3, r2
 8002a06:	d004      	beq.n	8002a12 <HAL_ADCEx_MultiModeConfigChannel+0xca>
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	4a38      	ldr	r2, [pc, #224]	; (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a0e:	4293      	cmp	r3, r2
 8002a10:	d10e      	bne.n	8002a30 <HAL_ADCEx_MultiModeConfigChannel+0xe8>
 8002a12:	4836      	ldr	r0, [pc, #216]	; (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a14:	f7ff ff40 	bl	8002898 <LL_ADC_IsEnabled>
 8002a18:	4604      	mov	r4, r0
 8002a1a:	4835      	ldr	r0, [pc, #212]	; (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a1c:	f7ff ff3c 	bl	8002898 <LL_ADC_IsEnabled>
 8002a20:	4603      	mov	r3, r0
 8002a22:	4323      	orrs	r3, r4
 8002a24:	2b00      	cmp	r3, #0
 8002a26:	bf0c      	ite	eq
 8002a28:	2301      	moveq	r3, #1
 8002a2a:	2300      	movne	r3, #0
 8002a2c:	b2db      	uxtb	r3, r3
 8002a2e:	e008      	b.n	8002a42 <HAL_ADCEx_MultiModeConfigChannel+0xfa>
 8002a30:	4832      	ldr	r0, [pc, #200]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002a32:	f7ff ff31 	bl	8002898 <LL_ADC_IsEnabled>
 8002a36:	4603      	mov	r3, r0
 8002a38:	2b00      	cmp	r3, #0
 8002a3a:	bf0c      	ite	eq
 8002a3c:	2301      	moveq	r3, #1
 8002a3e:	2300      	movne	r3, #0
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	d047      	beq.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        MODIFY_REG(tmpADC_Common->CCR,
 8002a46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a48:	689a      	ldr	r2, [r3, #8]
 8002a4a:	4b2d      	ldr	r3, [pc, #180]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002a4c:	4013      	ands	r3, r2
 8002a4e:	683a      	ldr	r2, [r7, #0]
 8002a50:	6811      	ldr	r1, [r2, #0]
 8002a52:	683a      	ldr	r2, [r7, #0]
 8002a54:	6892      	ldr	r2, [r2, #8]
 8002a56:	430a      	orrs	r2, r1
 8002a58:	431a      	orrs	r2, r3
 8002a5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a5c:	609a      	str	r2, [r3, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002a5e:	e03a      	b.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
                  );
      }
    }
    else /* ADC_MODE_INDEPENDENT */
    {
      CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DAMDF);
 8002a60:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a62:	689b      	ldr	r3, [r3, #8]
 8002a64:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8002a68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002a6a:	609a      	str	r2, [r3, #8]

      /* Parameters that can be updated only when ADC is disabled:                */
      /*  - Multimode mode selection                                              */
      /*  - Multimode delay                                                       */
      if (__LL_ADC_IS_ENABLED_ALL_COMMON_INSTANCE(__LL_ADC_COMMON_INSTANCE(hadc->Instance)) == 0UL)
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	681b      	ldr	r3, [r3, #0]
 8002a70:	4a1e      	ldr	r2, [pc, #120]	; (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a72:	4293      	cmp	r3, r2
 8002a74:	d004      	beq.n	8002a80 <HAL_ADCEx_MultiModeConfigChannel+0x138>
 8002a76:	687b      	ldr	r3, [r7, #4]
 8002a78:	681b      	ldr	r3, [r3, #0]
 8002a7a:	4a1d      	ldr	r2, [pc, #116]	; (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a7c:	4293      	cmp	r3, r2
 8002a7e:	d10e      	bne.n	8002a9e <HAL_ADCEx_MultiModeConfigChannel+0x156>
 8002a80:	481a      	ldr	r0, [pc, #104]	; (8002aec <HAL_ADCEx_MultiModeConfigChannel+0x1a4>)
 8002a82:	f7ff ff09 	bl	8002898 <LL_ADC_IsEnabled>
 8002a86:	4604      	mov	r4, r0
 8002a88:	4819      	ldr	r0, [pc, #100]	; (8002af0 <HAL_ADCEx_MultiModeConfigChannel+0x1a8>)
 8002a8a:	f7ff ff05 	bl	8002898 <LL_ADC_IsEnabled>
 8002a8e:	4603      	mov	r3, r0
 8002a90:	4323      	orrs	r3, r4
 8002a92:	2b00      	cmp	r3, #0
 8002a94:	bf0c      	ite	eq
 8002a96:	2301      	moveq	r3, #1
 8002a98:	2300      	movne	r3, #0
 8002a9a:	b2db      	uxtb	r3, r3
 8002a9c:	e008      	b.n	8002ab0 <HAL_ADCEx_MultiModeConfigChannel+0x168>
 8002a9e:	4817      	ldr	r0, [pc, #92]	; (8002afc <HAL_ADCEx_MultiModeConfigChannel+0x1b4>)
 8002aa0:	f7ff fefa 	bl	8002898 <LL_ADC_IsEnabled>
 8002aa4:	4603      	mov	r3, r0
 8002aa6:	2b00      	cmp	r3, #0
 8002aa8:	bf0c      	ite	eq
 8002aaa:	2301      	moveq	r3, #1
 8002aac:	2300      	movne	r3, #0
 8002aae:	b2db      	uxtb	r3, r3
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d010      	beq.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
      {
        CLEAR_BIT(tmpADC_Common->CCR, ADC_CCR_DUAL | ADC_CCR_DELAY);
 8002ab4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8002ab6:	689a      	ldr	r2, [r3, #8]
 8002ab8:	4b11      	ldr	r3, [pc, #68]	; (8002b00 <HAL_ADCEx_MultiModeConfigChannel+0x1b8>)
 8002aba:	4013      	ands	r3, r2
 8002abc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8002abe:	6093      	str	r3, [r2, #8]
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ac0:	e009      	b.n	8002ad6 <HAL_ADCEx_MultiModeConfigChannel+0x18e>
  /* If one of the ADC sharing the same common group is enabled, no update    */
  /* could be done on neither of the multimode structure parameters.          */
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8002ac6:	f043 0220 	orr.w	r2, r3, #32
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	655a      	str	r2, [r3, #84]	; 0x54

    tmp_hal_status = HAL_ERROR;
 8002ace:	2301      	movs	r3, #1
 8002ad0:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
 8002ad4:	e000      	b.n	8002ad8 <HAL_ADCEx_MultiModeConfigChannel+0x190>
    if (multimode->Mode != ADC_MODE_INDEPENDENT)
 8002ad6:	bf00      	nop
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	2200      	movs	r2, #0
 8002adc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Return function status */
  return tmp_hal_status;
 8002ae0:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
}
 8002ae4:	4618      	mov	r0, r3
 8002ae6:	377c      	adds	r7, #124	; 0x7c
 8002ae8:	46bd      	mov	sp, r7
 8002aea:	bd90      	pop	{r4, r7, pc}
 8002aec:	40022000 	.word	0x40022000
 8002af0:	40022100 	.word	0x40022100
 8002af4:	40022300 	.word	0x40022300
 8002af8:	58026300 	.word	0x58026300
 8002afc:	58026000 	.word	0x58026000
 8002b00:	fffff0e0 	.word	0xfffff0e0

08002b04 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b085      	sub	sp, #20
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	f003 0307 	and.w	r3, r3, #7
 8002b12:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002b14:	4b0b      	ldr	r3, [pc, #44]	; (8002b44 <__NVIC_SetPriorityGrouping+0x40>)
 8002b16:	68db      	ldr	r3, [r3, #12]
 8002b18:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002b1a:	68ba      	ldr	r2, [r7, #8]
 8002b1c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002b20:	4013      	ands	r3, r2
 8002b22:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002b24:	68fb      	ldr	r3, [r7, #12]
 8002b26:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002b28:	68bb      	ldr	r3, [r7, #8]
 8002b2a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8002b2c:	4b06      	ldr	r3, [pc, #24]	; (8002b48 <__NVIC_SetPriorityGrouping+0x44>)
 8002b2e:	4313      	orrs	r3, r2
 8002b30:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002b32:	4a04      	ldr	r2, [pc, #16]	; (8002b44 <__NVIC_SetPriorityGrouping+0x40>)
 8002b34:	68bb      	ldr	r3, [r7, #8]
 8002b36:	60d3      	str	r3, [r2, #12]
}
 8002b38:	bf00      	nop
 8002b3a:	3714      	adds	r7, #20
 8002b3c:	46bd      	mov	sp, r7
 8002b3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b42:	4770      	bx	lr
 8002b44:	e000ed00 	.word	0xe000ed00
 8002b48:	05fa0000 	.word	0x05fa0000

08002b4c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002b50:	4b04      	ldr	r3, [pc, #16]	; (8002b64 <__NVIC_GetPriorityGrouping+0x18>)
 8002b52:	68db      	ldr	r3, [r3, #12]
 8002b54:	0a1b      	lsrs	r3, r3, #8
 8002b56:	f003 0307 	and.w	r3, r3, #7
}
 8002b5a:	4618      	mov	r0, r3
 8002b5c:	46bd      	mov	sp, r7
 8002b5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b62:	4770      	bx	lr
 8002b64:	e000ed00 	.word	0xe000ed00

08002b68 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002b68:	b480      	push	{r7}
 8002b6a:	b083      	sub	sp, #12
 8002b6c:	af00      	add	r7, sp, #0
 8002b6e:	4603      	mov	r3, r0
 8002b70:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002b72:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b76:	2b00      	cmp	r3, #0
 8002b78:	db0b      	blt.n	8002b92 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b7a:	88fb      	ldrh	r3, [r7, #6]
 8002b7c:	f003 021f 	and.w	r2, r3, #31
 8002b80:	4907      	ldr	r1, [pc, #28]	; (8002ba0 <__NVIC_EnableIRQ+0x38>)
 8002b82:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002b86:	095b      	lsrs	r3, r3, #5
 8002b88:	2001      	movs	r0, #1
 8002b8a:	fa00 f202 	lsl.w	r2, r0, r2
 8002b8e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002b92:	bf00      	nop
 8002b94:	370c      	adds	r7, #12
 8002b96:	46bd      	mov	sp, r7
 8002b98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b9c:	4770      	bx	lr
 8002b9e:	bf00      	nop
 8002ba0:	e000e100 	.word	0xe000e100

08002ba4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ba4:	b480      	push	{r7}
 8002ba6:	b083      	sub	sp, #12
 8002ba8:	af00      	add	r7, sp, #0
 8002baa:	4603      	mov	r3, r0
 8002bac:	6039      	str	r1, [r7, #0]
 8002bae:	80fb      	strh	r3, [r7, #6]
  if ((int32_t)(IRQn) >= 0)
 8002bb0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bb4:	2b00      	cmp	r3, #0
 8002bb6:	db0a      	blt.n	8002bce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bb8:	683b      	ldr	r3, [r7, #0]
 8002bba:	b2da      	uxtb	r2, r3
 8002bbc:	490c      	ldr	r1, [pc, #48]	; (8002bf0 <__NVIC_SetPriority+0x4c>)
 8002bbe:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002bc2:	0112      	lsls	r2, r2, #4
 8002bc4:	b2d2      	uxtb	r2, r2
 8002bc6:	440b      	add	r3, r1
 8002bc8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002bcc:	e00a      	b.n	8002be4 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bce:	683b      	ldr	r3, [r7, #0]
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4908      	ldr	r1, [pc, #32]	; (8002bf4 <__NVIC_SetPriority+0x50>)
 8002bd4:	88fb      	ldrh	r3, [r7, #6]
 8002bd6:	f003 030f 	and.w	r3, r3, #15
 8002bda:	3b04      	subs	r3, #4
 8002bdc:	0112      	lsls	r2, r2, #4
 8002bde:	b2d2      	uxtb	r2, r2
 8002be0:	440b      	add	r3, r1
 8002be2:	761a      	strb	r2, [r3, #24]
}
 8002be4:	bf00      	nop
 8002be6:	370c      	adds	r7, #12
 8002be8:	46bd      	mov	sp, r7
 8002bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bee:	4770      	bx	lr
 8002bf0:	e000e100 	.word	0xe000e100
 8002bf4:	e000ed00 	.word	0xe000ed00

08002bf8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	b089      	sub	sp, #36	; 0x24
 8002bfc:	af00      	add	r7, sp, #0
 8002bfe:	60f8      	str	r0, [r7, #12]
 8002c00:	60b9      	str	r1, [r7, #8]
 8002c02:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002c04:	68fb      	ldr	r3, [r7, #12]
 8002c06:	f003 0307 	and.w	r3, r3, #7
 8002c0a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002c0c:	69fb      	ldr	r3, [r7, #28]
 8002c0e:	f1c3 0307 	rsb	r3, r3, #7
 8002c12:	2b04      	cmp	r3, #4
 8002c14:	bf28      	it	cs
 8002c16:	2304      	movcs	r3, #4
 8002c18:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002c1a:	69fb      	ldr	r3, [r7, #28]
 8002c1c:	3304      	adds	r3, #4
 8002c1e:	2b06      	cmp	r3, #6
 8002c20:	d902      	bls.n	8002c28 <NVIC_EncodePriority+0x30>
 8002c22:	69fb      	ldr	r3, [r7, #28]
 8002c24:	3b03      	subs	r3, #3
 8002c26:	e000      	b.n	8002c2a <NVIC_EncodePriority+0x32>
 8002c28:	2300      	movs	r3, #0
 8002c2a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c2c:	f04f 32ff 	mov.w	r2, #4294967295
 8002c30:	69bb      	ldr	r3, [r7, #24]
 8002c32:	fa02 f303 	lsl.w	r3, r2, r3
 8002c36:	43da      	mvns	r2, r3
 8002c38:	68bb      	ldr	r3, [r7, #8]
 8002c3a:	401a      	ands	r2, r3
 8002c3c:	697b      	ldr	r3, [r7, #20]
 8002c3e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002c40:	f04f 31ff 	mov.w	r1, #4294967295
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	fa01 f303 	lsl.w	r3, r1, r3
 8002c4a:	43d9      	mvns	r1, r3
 8002c4c:	687b      	ldr	r3, [r7, #4]
 8002c4e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002c50:	4313      	orrs	r3, r2
         );
}
 8002c52:	4618      	mov	r0, r3
 8002c54:	3724      	adds	r7, #36	; 0x24
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
	...

08002c60 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b082      	sub	sp, #8
 8002c64:	af00      	add	r7, sp, #0
 8002c66:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	3b01      	subs	r3, #1
 8002c6c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c70:	d301      	bcc.n	8002c76 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c72:	2301      	movs	r3, #1
 8002c74:	e00f      	b.n	8002c96 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c76:	4a0a      	ldr	r2, [pc, #40]	; (8002ca0 <SysTick_Config+0x40>)
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	3b01      	subs	r3, #1
 8002c7c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c7e:	210f      	movs	r1, #15
 8002c80:	f04f 30ff 	mov.w	r0, #4294967295
 8002c84:	f7ff ff8e 	bl	8002ba4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c88:	4b05      	ldr	r3, [pc, #20]	; (8002ca0 <SysTick_Config+0x40>)
 8002c8a:	2200      	movs	r2, #0
 8002c8c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c8e:	4b04      	ldr	r3, [pc, #16]	; (8002ca0 <SysTick_Config+0x40>)
 8002c90:	2207      	movs	r2, #7
 8002c92:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c94:	2300      	movs	r3, #0
}
 8002c96:	4618      	mov	r0, r3
 8002c98:	3708      	adds	r7, #8
 8002c9a:	46bd      	mov	sp, r7
 8002c9c:	bd80      	pop	{r7, pc}
 8002c9e:	bf00      	nop
 8002ca0:	e000e010 	.word	0xe000e010

08002ca4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible.
  *         The pending IRQ priority will be managed only by the subpriority.
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ca4:	b580      	push	{r7, lr}
 8002ca6:	b082      	sub	sp, #8
 8002ca8:	af00      	add	r7, sp, #0
 8002caa:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));

  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002cac:	6878      	ldr	r0, [r7, #4]
 8002cae:	f7ff ff29 	bl	8002b04 <__NVIC_SetPriorityGrouping>
}
 8002cb2:	bf00      	nop
 8002cb4:	3708      	adds	r7, #8
 8002cb6:	46bd      	mov	sp, r7
 8002cb8:	bd80      	pop	{r7, pc}

08002cba <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002cba:	b580      	push	{r7, lr}
 8002cbc:	b086      	sub	sp, #24
 8002cbe:	af00      	add	r7, sp, #0
 8002cc0:	4603      	mov	r3, r0
 8002cc2:	60b9      	str	r1, [r7, #8]
 8002cc4:	607a      	str	r2, [r7, #4]
 8002cc6:	81fb      	strh	r3, [r7, #14]

  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));

  prioritygroup = NVIC_GetPriorityGrouping();
 8002cc8:	f7ff ff40 	bl	8002b4c <__NVIC_GetPriorityGrouping>
 8002ccc:	6178      	str	r0, [r7, #20]

  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002cce:	687a      	ldr	r2, [r7, #4]
 8002cd0:	68b9      	ldr	r1, [r7, #8]
 8002cd2:	6978      	ldr	r0, [r7, #20]
 8002cd4:	f7ff ff90 	bl	8002bf8 <NVIC_EncodePriority>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 8002cde:	4611      	mov	r1, r2
 8002ce0:	4618      	mov	r0, r3
 8002ce2:	f7ff ff5f 	bl	8002ba4 <__NVIC_SetPriority>
}
 8002ce6:	bf00      	nop
 8002ce8:	3718      	adds	r7, #24
 8002cea:	46bd      	mov	sp, r7
 8002cec:	bd80      	pop	{r7, pc}

08002cee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32h7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cee:	b580      	push	{r7, lr}
 8002cf0:	b082      	sub	sp, #8
 8002cf2:	af00      	add	r7, sp, #0
 8002cf4:	4603      	mov	r3, r0
 8002cf6:	80fb      	strh	r3, [r7, #6]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));

  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002cf8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f7ff ff33 	bl	8002b68 <__NVIC_EnableIRQ>
}
 8002d02:	bf00      	nop
 8002d04:	3708      	adds	r7, #8
 8002d06:	46bd      	mov	sp, r7
 8002d08:	bd80      	pop	{r7, pc}

08002d0a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status   - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002d0a:	b580      	push	{r7, lr}
 8002d0c:	b082      	sub	sp, #8
 8002d0e:	af00      	add	r7, sp, #0
 8002d10:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002d12:	6878      	ldr	r0, [r7, #4]
 8002d14:	f7ff ffa4 	bl	8002c60 <SysTick_Config>
 8002d18:	4603      	mov	r3, r0
}
 8002d1a:	4618      	mov	r0, r3
 8002d1c:	3708      	adds	r7, #8
 8002d1e:	46bd      	mov	sp, r7
 8002d20:	bd80      	pop	{r7, pc}
	...

08002d24 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d24:	b480      	push	{r7}
 8002d26:	b089      	sub	sp, #36	; 0x24
 8002d28:	af00      	add	r7, sp, #0
 8002d2a:	6078      	str	r0, [r7, #4]
 8002d2c:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 8002d2e:	2300      	movs	r3, #0
 8002d30:	61fb      	str	r3, [r7, #28]
  EXTI_Core_TypeDef *EXTI_CurrentCPU;

#if defined(DUAL_CORE) && defined(CORE_CM4)
  EXTI_CurrentCPU = EXTI_D2; /* EXTI for CM4 CPU */
#else
  EXTI_CurrentCPU = EXTI_D1; /* EXTI for CM7 CPU */
 8002d32:	4b89      	ldr	r3, [pc, #548]	; (8002f58 <HAL_GPIO_Init+0x234>)
 8002d34:	617b      	str	r3, [r7, #20]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8002d36:	e194      	b.n	8003062 <HAL_GPIO_Init+0x33e>
  {
    /* Get current io position */
    iocurrent = (GPIO_Init->Pin) & (1UL << position);
 8002d38:	683b      	ldr	r3, [r7, #0]
 8002d3a:	681a      	ldr	r2, [r3, #0]
 8002d3c:	2101      	movs	r1, #1
 8002d3e:	69fb      	ldr	r3, [r7, #28]
 8002d40:	fa01 f303 	lsl.w	r3, r1, r3
 8002d44:	4013      	ands	r3, r2
 8002d46:	613b      	str	r3, [r7, #16]

    if (iocurrent != 0x00U)
 8002d48:	693b      	ldr	r3, [r7, #16]
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 8186 	beq.w	800305c <HAL_GPIO_Init+0x338>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	685b      	ldr	r3, [r3, #4]
 8002d54:	f003 0303 	and.w	r3, r3, #3
 8002d58:	2b01      	cmp	r3, #1
 8002d5a:	d005      	beq.n	8002d68 <HAL_GPIO_Init+0x44>
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	685b      	ldr	r3, [r3, #4]
 8002d60:	f003 0303 	and.w	r3, r3, #3
 8002d64:	2b02      	cmp	r3, #2
 8002d66:	d130      	bne.n	8002dca <HAL_GPIO_Init+0xa6>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));

        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 8002d68:	687b      	ldr	r3, [r7, #4]
 8002d6a:	689b      	ldr	r3, [r3, #8]
 8002d6c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDR_OSPEED0 << (position * 2U));
 8002d6e:	69fb      	ldr	r3, [r7, #28]
 8002d70:	005b      	lsls	r3, r3, #1
 8002d72:	2203      	movs	r2, #3
 8002d74:	fa02 f303 	lsl.w	r3, r2, r3
 8002d78:	43db      	mvns	r3, r3
 8002d7a:	69ba      	ldr	r2, [r7, #24]
 8002d7c:	4013      	ands	r3, r2
 8002d7e:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d80:	683b      	ldr	r3, [r7, #0]
 8002d82:	68da      	ldr	r2, [r3, #12]
 8002d84:	69fb      	ldr	r3, [r7, #28]
 8002d86:	005b      	lsls	r3, r3, #1
 8002d88:	fa02 f303 	lsl.w	r3, r2, r3
 8002d8c:	69ba      	ldr	r2, [r7, #24]
 8002d8e:	4313      	orrs	r3, r2
 8002d90:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d92:	687b      	ldr	r3, [r7, #4]
 8002d94:	69ba      	ldr	r2, [r7, #24]
 8002d96:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d98:	687b      	ldr	r3, [r7, #4]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT0 << position) ;
 8002d9e:	2201      	movs	r2, #1
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	fa02 f303 	lsl.w	r3, r2, r3
 8002da6:	43db      	mvns	r3, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4013      	ands	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002dae:	683b      	ldr	r3, [r7, #0]
 8002db0:	685b      	ldr	r3, [r3, #4]
 8002db2:	091b      	lsrs	r3, r3, #4
 8002db4:	f003 0201 	and.w	r2, r3, #1
 8002db8:	69fb      	ldr	r3, [r7, #28]
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dca:	683b      	ldr	r3, [r7, #0]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	f003 0303 	and.w	r3, r3, #3
 8002dd2:	2b03      	cmp	r3, #3
 8002dd4:	d017      	beq.n	8002e06 <HAL_GPIO_Init+0xe2>
      {
       /* Check the Pull parameter */
       assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002dd6:	687b      	ldr	r3, [r7, #4]
 8002dd8:	68db      	ldr	r3, [r3, #12]
 8002dda:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 8002ddc:	69fb      	ldr	r3, [r7, #28]
 8002dde:	005b      	lsls	r3, r3, #1
 8002de0:	2203      	movs	r2, #3
 8002de2:	fa02 f303 	lsl.w	r3, r2, r3
 8002de6:	43db      	mvns	r3, r3
 8002de8:	69ba      	ldr	r2, [r7, #24]
 8002dea:	4013      	ands	r3, r2
 8002dec:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dee:	683b      	ldr	r3, [r7, #0]
 8002df0:	689a      	ldr	r2, [r3, #8]
 8002df2:	69fb      	ldr	r3, [r7, #28]
 8002df4:	005b      	lsls	r3, r3, #1
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	69ba      	ldr	r2, [r7, #24]
 8002dfc:	4313      	orrs	r3, r2
 8002dfe:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002e00:	687b      	ldr	r3, [r7, #4]
 8002e02:	69ba      	ldr	r2, [r7, #24]
 8002e04:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e06:	683b      	ldr	r3, [r7, #0]
 8002e08:	685b      	ldr	r3, [r3, #4]
 8002e0a:	f003 0303 	and.w	r3, r3, #3
 8002e0e:	2b02      	cmp	r3, #2
 8002e10:	d123      	bne.n	8002e5a <HAL_GPIO_Init+0x136>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e12:	69fb      	ldr	r3, [r7, #28]
 8002e14:	08da      	lsrs	r2, r3, #3
 8002e16:	687b      	ldr	r3, [r7, #4]
 8002e18:	3208      	adds	r2, #8
 8002e1a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((position & 0x07U) * 4U));
 8002e20:	69fb      	ldr	r3, [r7, #28]
 8002e22:	f003 0307 	and.w	r3, r3, #7
 8002e26:	009b      	lsls	r3, r3, #2
 8002e28:	220f      	movs	r2, #15
 8002e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2e:	43db      	mvns	r3, r3
 8002e30:	69ba      	ldr	r2, [r7, #24]
 8002e32:	4013      	ands	r3, r2
 8002e34:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Alternate) << ((position & 0x07U) * 4U));
 8002e36:	683b      	ldr	r3, [r7, #0]
 8002e38:	691a      	ldr	r2, [r3, #16]
 8002e3a:	69fb      	ldr	r3, [r7, #28]
 8002e3c:	f003 0307 	and.w	r3, r3, #7
 8002e40:	009b      	lsls	r3, r3, #2
 8002e42:	fa02 f303 	lsl.w	r3, r2, r3
 8002e46:	69ba      	ldr	r2, [r7, #24]
 8002e48:	4313      	orrs	r3, r2
 8002e4a:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e4c:	69fb      	ldr	r3, [r7, #28]
 8002e4e:	08da      	lsrs	r2, r3, #3
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	3208      	adds	r2, #8
 8002e54:	69b9      	ldr	r1, [r7, #24]
 8002e56:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e5a:	687b      	ldr	r3, [r7, #4]
 8002e5c:	681b      	ldr	r3, [r3, #0]
 8002e5e:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 8002e60:	69fb      	ldr	r3, [r7, #28]
 8002e62:	005b      	lsls	r3, r3, #1
 8002e64:	2203      	movs	r2, #3
 8002e66:	fa02 f303 	lsl.w	r3, r2, r3
 8002e6a:	43db      	mvns	r3, r3
 8002e6c:	69ba      	ldr	r2, [r7, #24]
 8002e6e:	4013      	ands	r3, r2
 8002e70:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	685b      	ldr	r3, [r3, #4]
 8002e76:	f003 0203 	and.w	r2, r3, #3
 8002e7a:	69fb      	ldr	r3, [r7, #28]
 8002e7c:	005b      	lsls	r3, r3, #1
 8002e7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002e82:	69ba      	ldr	r2, [r7, #24]
 8002e84:	4313      	orrs	r3, r2
 8002e86:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	69ba      	ldr	r2, [r7, #24]
 8002e8c:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002e8e:	683b      	ldr	r3, [r7, #0]
 8002e90:	685b      	ldr	r3, [r3, #4]
 8002e92:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002e96:	2b00      	cmp	r3, #0
 8002e98:	f000 80e0 	beq.w	800305c <HAL_GPIO_Init+0x338>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e9c:	4b2f      	ldr	r3, [pc, #188]	; (8002f5c <HAL_GPIO_Init+0x238>)
 8002e9e:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002ea2:	4a2e      	ldr	r2, [pc, #184]	; (8002f5c <HAL_GPIO_Init+0x238>)
 8002ea4:	f043 0302 	orr.w	r3, r3, #2
 8002ea8:	f8c2 30f4 	str.w	r3, [r2, #244]	; 0xf4
 8002eac:	4b2b      	ldr	r3, [pc, #172]	; (8002f5c <HAL_GPIO_Init+0x238>)
 8002eae:	f8d3 30f4 	ldr.w	r3, [r3, #244]	; 0xf4
 8002eb2:	f003 0302 	and.w	r3, r3, #2
 8002eb6:	60fb      	str	r3, [r7, #12]
 8002eb8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eba:	4a29      	ldr	r2, [pc, #164]	; (8002f60 <HAL_GPIO_Init+0x23c>)
 8002ebc:	69fb      	ldr	r3, [r7, #28]
 8002ebe:	089b      	lsrs	r3, r3, #2
 8002ec0:	3302      	adds	r3, #2
 8002ec2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ec6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FUL << (4U * (position & 0x03U)));
 8002ec8:	69fb      	ldr	r3, [r7, #28]
 8002eca:	f003 0303 	and.w	r3, r3, #3
 8002ece:	009b      	lsls	r3, r3, #2
 8002ed0:	220f      	movs	r2, #15
 8002ed2:	fa02 f303 	lsl.w	r3, r2, r3
 8002ed6:	43db      	mvns	r3, r3
 8002ed8:	69ba      	ldr	r2, [r7, #24]
 8002eda:	4013      	ands	r3, r2
 8002edc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_GET_INDEX(GPIOx) << (4U * (position & 0x03U)));
 8002ede:	687b      	ldr	r3, [r7, #4]
 8002ee0:	4a20      	ldr	r2, [pc, #128]	; (8002f64 <HAL_GPIO_Init+0x240>)
 8002ee2:	4293      	cmp	r3, r2
 8002ee4:	d052      	beq.n	8002f8c <HAL_GPIO_Init+0x268>
 8002ee6:	687b      	ldr	r3, [r7, #4]
 8002ee8:	4a1f      	ldr	r2, [pc, #124]	; (8002f68 <HAL_GPIO_Init+0x244>)
 8002eea:	4293      	cmp	r3, r2
 8002eec:	d031      	beq.n	8002f52 <HAL_GPIO_Init+0x22e>
 8002eee:	687b      	ldr	r3, [r7, #4]
 8002ef0:	4a1e      	ldr	r2, [pc, #120]	; (8002f6c <HAL_GPIO_Init+0x248>)
 8002ef2:	4293      	cmp	r3, r2
 8002ef4:	d02b      	beq.n	8002f4e <HAL_GPIO_Init+0x22a>
 8002ef6:	687b      	ldr	r3, [r7, #4]
 8002ef8:	4a1d      	ldr	r2, [pc, #116]	; (8002f70 <HAL_GPIO_Init+0x24c>)
 8002efa:	4293      	cmp	r3, r2
 8002efc:	d025      	beq.n	8002f4a <HAL_GPIO_Init+0x226>
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	4a1c      	ldr	r2, [pc, #112]	; (8002f74 <HAL_GPIO_Init+0x250>)
 8002f02:	4293      	cmp	r3, r2
 8002f04:	d01f      	beq.n	8002f46 <HAL_GPIO_Init+0x222>
 8002f06:	687b      	ldr	r3, [r7, #4]
 8002f08:	4a1b      	ldr	r2, [pc, #108]	; (8002f78 <HAL_GPIO_Init+0x254>)
 8002f0a:	4293      	cmp	r3, r2
 8002f0c:	d019      	beq.n	8002f42 <HAL_GPIO_Init+0x21e>
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a1a      	ldr	r2, [pc, #104]	; (8002f7c <HAL_GPIO_Init+0x258>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d013      	beq.n	8002f3e <HAL_GPIO_Init+0x21a>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a19      	ldr	r2, [pc, #100]	; (8002f80 <HAL_GPIO_Init+0x25c>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d00d      	beq.n	8002f3a <HAL_GPIO_Init+0x216>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a18      	ldr	r2, [pc, #96]	; (8002f84 <HAL_GPIO_Init+0x260>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d007      	beq.n	8002f36 <HAL_GPIO_Init+0x212>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a17      	ldr	r2, [pc, #92]	; (8002f88 <HAL_GPIO_Init+0x264>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d101      	bne.n	8002f32 <HAL_GPIO_Init+0x20e>
 8002f2e:	2309      	movs	r3, #9
 8002f30:	e02d      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f32:	230a      	movs	r3, #10
 8002f34:	e02b      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f36:	2308      	movs	r3, #8
 8002f38:	e029      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f3a:	2307      	movs	r3, #7
 8002f3c:	e027      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f3e:	2306      	movs	r3, #6
 8002f40:	e025      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f42:	2305      	movs	r3, #5
 8002f44:	e023      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f46:	2304      	movs	r3, #4
 8002f48:	e021      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f4a:	2303      	movs	r3, #3
 8002f4c:	e01f      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f4e:	2302      	movs	r3, #2
 8002f50:	e01d      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f52:	2301      	movs	r3, #1
 8002f54:	e01b      	b.n	8002f8e <HAL_GPIO_Init+0x26a>
 8002f56:	bf00      	nop
 8002f58:	58000080 	.word	0x58000080
 8002f5c:	58024400 	.word	0x58024400
 8002f60:	58000400 	.word	0x58000400
 8002f64:	58020000 	.word	0x58020000
 8002f68:	58020400 	.word	0x58020400
 8002f6c:	58020800 	.word	0x58020800
 8002f70:	58020c00 	.word	0x58020c00
 8002f74:	58021000 	.word	0x58021000
 8002f78:	58021400 	.word	0x58021400
 8002f7c:	58021800 	.word	0x58021800
 8002f80:	58021c00 	.word	0x58021c00
 8002f84:	58022000 	.word	0x58022000
 8002f88:	58022400 	.word	0x58022400
 8002f8c:	2300      	movs	r3, #0
 8002f8e:	69fa      	ldr	r2, [r7, #28]
 8002f90:	f002 0203 	and.w	r2, r2, #3
 8002f94:	0092      	lsls	r2, r2, #2
 8002f96:	4093      	lsls	r3, r2
 8002f98:	69ba      	ldr	r2, [r7, #24]
 8002f9a:	4313      	orrs	r3, r2
 8002f9c:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f9e:	4938      	ldr	r1, [pc, #224]	; (8003080 <HAL_GPIO_Init+0x35c>)
 8002fa0:	69fb      	ldr	r3, [r7, #28]
 8002fa2:	089b      	lsrs	r3, r3, #2
 8002fa4:	3302      	adds	r3, #2
 8002fa6:	69ba      	ldr	r2, [r7, #24]
 8002fa8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR1;
 8002fac:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fb4:	693b      	ldr	r3, [r7, #16]
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	685b      	ldr	r3, [r3, #4]
 8002fc2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d003      	beq.n	8002fd2 <HAL_GPIO_Init+0x2ae>
        {
          temp |= iocurrent;
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	693b      	ldr	r3, [r7, #16]
 8002fce:	4313      	orrs	r3, r2
 8002fd0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR1 = temp;
 8002fd2:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8002fd6:	69bb      	ldr	r3, [r7, #24]
 8002fd8:	6013      	str	r3, [r2, #0]

        temp = EXTI->FTSR1;
 8002fda:	f04f 43b0 	mov.w	r3, #1476395008	; 0x58000000
 8002fde:	685b      	ldr	r3, [r3, #4]
 8002fe0:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8002fe2:	693b      	ldr	r3, [r7, #16]
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002ff4:	2b00      	cmp	r3, #0
 8002ff6:	d003      	beq.n	8003000 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8002ff8:	69ba      	ldr	r2, [r7, #24]
 8002ffa:	693b      	ldr	r3, [r7, #16]
 8002ffc:	4313      	orrs	r3, r2
 8002ffe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR1 = temp;
 8003000:	f04f 42b0 	mov.w	r2, #1476395008	; 0x58000000
 8003004:	69bb      	ldr	r3, [r7, #24]
 8003006:	6053      	str	r3, [r2, #4]

        temp = EXTI_CurrentCPU->EMR1;
 8003008:	697b      	ldr	r3, [r7, #20]
 800300a:	685b      	ldr	r3, [r3, #4]
 800300c:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 800300e:	693b      	ldr	r3, [r7, #16]
 8003010:	43db      	mvns	r3, r3
 8003012:	69ba      	ldr	r2, [r7, #24]
 8003014:	4013      	ands	r3, r2
 8003016:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003018:	683b      	ldr	r3, [r7, #0]
 800301a:	685b      	ldr	r3, [r3, #4]
 800301c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003020:	2b00      	cmp	r3, #0
 8003022:	d003      	beq.n	800302c <HAL_GPIO_Init+0x308>
        {
          temp |= iocurrent;
 8003024:	69ba      	ldr	r2, [r7, #24]
 8003026:	693b      	ldr	r3, [r7, #16]
 8003028:	4313      	orrs	r3, r2
 800302a:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->EMR1 = temp;
 800302c:	697b      	ldr	r3, [r7, #20]
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI_CurrentCPU->IMR1;
 8003032:	697b      	ldr	r3, [r7, #20]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	61bb      	str	r3, [r7, #24]
        temp &= ~(iocurrent);
 8003038:	693b      	ldr	r3, [r7, #16]
 800303a:	43db      	mvns	r3, r3
 800303c:	69ba      	ldr	r2, [r7, #24]
 800303e:	4013      	ands	r3, r2
 8003040:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003042:	683b      	ldr	r3, [r7, #0]
 8003044:	685b      	ldr	r3, [r3, #4]
 8003046:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800304a:	2b00      	cmp	r3, #0
 800304c:	d003      	beq.n	8003056 <HAL_GPIO_Init+0x332>
        {
          temp |= iocurrent;
 800304e:	69ba      	ldr	r2, [r7, #24]
 8003050:	693b      	ldr	r3, [r7, #16]
 8003052:	4313      	orrs	r3, r2
 8003054:	61bb      	str	r3, [r7, #24]
        }
        EXTI_CurrentCPU->IMR1 = temp;
 8003056:	697b      	ldr	r3, [r7, #20]
 8003058:	69ba      	ldr	r2, [r7, #24]
 800305a:	601a      	str	r2, [r3, #0]
      }
    }

    position++;
 800305c:	69fb      	ldr	r3, [r7, #28]
 800305e:	3301      	adds	r3, #1
 8003060:	61fb      	str	r3, [r7, #28]
  while (((GPIO_Init->Pin) >> position) != 0x00U)
 8003062:	683b      	ldr	r3, [r7, #0]
 8003064:	681a      	ldr	r2, [r3, #0]
 8003066:	69fb      	ldr	r3, [r7, #28]
 8003068:	fa22 f303 	lsr.w	r3, r2, r3
 800306c:	2b00      	cmp	r3, #0
 800306e:	f47f ae63 	bne.w	8002d38 <HAL_GPIO_Init+0x14>
  }
}
 8003072:	bf00      	nop
 8003074:	bf00      	nop
 8003076:	3724      	adds	r7, #36	; 0x24
 8003078:	46bd      	mov	sp, r7
 800307a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800307e:	4770      	bx	lr
 8003080:	58000400 	.word	0x58000400

08003084 <HAL_HSEM_FastTake>:
  * @brief  Fast Take a semaphore with 1 Step mode.
  * @param  SemID: semaphore ID from 0 to 31
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_HSEM_FastTake(uint32_t SemID)
{
 8003084:	b480      	push	{r7}
 8003086:	b083      	sub	sp, #12
 8003088:	af00      	add	r7, sp, #0
 800308a:	6078      	str	r0, [r7, #4]
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
  }
#else  
  /* Read the RLR register to take the semaphore */
  if (HSEM->RLR[SemID] == (HSEM_CR_COREID_CURRENT | HSEM_RLR_LOCK))
 800308c:	4a08      	ldr	r2, [pc, #32]	; (80030b0 <HAL_HSEM_FastTake+0x2c>)
 800308e:	687b      	ldr	r3, [r7, #4]
 8003090:	3320      	adds	r3, #32
 8003092:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003096:	4a07      	ldr	r2, [pc, #28]	; (80030b4 <HAL_HSEM_FastTake+0x30>)
 8003098:	4293      	cmp	r3, r2
 800309a:	d101      	bne.n	80030a0 <HAL_HSEM_FastTake+0x1c>
  {
    /*take success when MasterID match and take bit set*/
    return HAL_OK;
 800309c:	2300      	movs	r3, #0
 800309e:	e000      	b.n	80030a2 <HAL_HSEM_FastTake+0x1e>
  }
#endif

  /* Semaphore take fails */
  return HAL_ERROR;
 80030a0:	2301      	movs	r3, #1
}
 80030a2:	4618      	mov	r0, r3
 80030a4:	370c      	adds	r7, #12
 80030a6:	46bd      	mov	sp, r7
 80030a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ac:	4770      	bx	lr
 80030ae:	bf00      	nop
 80030b0:	58026400 	.word	0x58026400
 80030b4:	80000300 	.word	0x80000300

080030b8 <HAL_HSEM_Release>:
  * @param  SemID: semaphore ID from 0 to 31
  * @param  ProcessID: Process ID from 0 to 255
  * @retval None
  */
void  HAL_HSEM_Release(uint32_t SemID, uint32_t ProcessID)
{
 80030b8:	b480      	push	{r7}
 80030ba:	b083      	sub	sp, #12
 80030bc:	af00      	add	r7, sp, #0
 80030be:	6078      	str	r0, [r7, #4]
 80030c0:	6039      	str	r1, [r7, #0]

  /* Clear the semaphore by writing to the R register : the MasterID , the processID and take bit = 0  */
#if  USE_MULTI_CORE_SHARED_CODE != 0U
  HSEM->R[SemID] = (ProcessID | ((HAL_GetCurrentCPUID() << POSITION_VAL(HSEM_R_MASTERID)) & HSEM_R_MASTERID));
#else
  HSEM->R[SemID] = (ProcessID | HSEM_CR_COREID_CURRENT);
 80030c2:	4906      	ldr	r1, [pc, #24]	; (80030dc <HAL_HSEM_Release+0x24>)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	f443 7240 	orr.w	r2, r3, #768	; 0x300
 80030ca:	687b      	ldr	r3, [r7, #4]
 80030cc:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
#endif

}
 80030d0:	bf00      	nop
 80030d2:	370c      	adds	r7, #12
 80030d4:	46bd      	mov	sp, r7
 80030d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030da:	4770      	bx	lr
 80030dc:	58026400 	.word	0x58026400

080030e0 <HAL_PWREx_ConfigSupply>:
  *         PWR_SMPS_2V5_SUPPLIES_EXT are used only for lines that supports SMPS
  *         regulator.
  * @retval HAL status.
  */
HAL_StatusTypeDef HAL_PWREx_ConfigSupply (uint32_t SupplySource)
{
 80030e0:	b580      	push	{r7, lr}
 80030e2:	b084      	sub	sp, #16
 80030e4:	af00      	add	r7, sp, #0
 80030e6:	6078      	str	r0, [r7, #4]

  /* Check if supply source was configured */
#if defined (PWR_FLAG_SCUEN)
  if (__HAL_PWR_GET_FLAG (PWR_FLAG_SCUEN) == 0U)
#else
  if ((PWR->CR3 & (PWR_CR3_SMPSEN | PWR_CR3_LDOEN | PWR_CR3_BYPASS)) != (PWR_CR3_SMPSEN | PWR_CR3_LDOEN))
 80030e8:	4b29      	ldr	r3, [pc, #164]	; (8003190 <HAL_PWREx_ConfigSupply+0xb0>)
 80030ea:	68db      	ldr	r3, [r3, #12]
 80030ec:	f003 0307 	and.w	r3, r3, #7
 80030f0:	2b06      	cmp	r3, #6
 80030f2:	d00a      	beq.n	800310a <HAL_PWREx_ConfigSupply+0x2a>
#endif /* defined (PWR_FLAG_SCUEN) */
  {
    /* Check supply configuration */
    if ((PWR->CR3 & PWR_SUPPLY_CONFIG_MASK) != SupplySource)
 80030f4:	4b26      	ldr	r3, [pc, #152]	; (8003190 <HAL_PWREx_ConfigSupply+0xb0>)
 80030f6:	68db      	ldr	r3, [r3, #12]
 80030f8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80030fc:	687a      	ldr	r2, [r7, #4]
 80030fe:	429a      	cmp	r2, r3
 8003100:	d001      	beq.n	8003106 <HAL_PWREx_ConfigSupply+0x26>
    {
      /* Supply configuration update locked, can't apply a new supply config */
      return HAL_ERROR;
 8003102:	2301      	movs	r3, #1
 8003104:	e040      	b.n	8003188 <HAL_PWREx_ConfigSupply+0xa8>
    else
    {
      /* Supply configuration update locked, but new supply configuration
         matches with old supply configuration : nothing to do
      */
      return HAL_OK;
 8003106:	2300      	movs	r3, #0
 8003108:	e03e      	b.n	8003188 <HAL_PWREx_ConfigSupply+0xa8>
    }
  }

  /* Set the power supply configuration */
  MODIFY_REG (PWR->CR3, PWR_SUPPLY_CONFIG_MASK, SupplySource);
 800310a:	4b21      	ldr	r3, [pc, #132]	; (8003190 <HAL_PWREx_ConfigSupply+0xb0>)
 800310c:	68db      	ldr	r3, [r3, #12]
 800310e:	f023 023f 	bic.w	r2, r3, #63	; 0x3f
 8003112:	491f      	ldr	r1, [pc, #124]	; (8003190 <HAL_PWREx_ConfigSupply+0xb0>)
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	4313      	orrs	r3, r2
 8003118:	60cb      	str	r3, [r1, #12]

  /* Get tick */
  tickstart = HAL_GetTick ();
 800311a:	f7fd ff53 	bl	8000fc4 <HAL_GetTick>
 800311e:	60f8      	str	r0, [r7, #12]

  /* Wait till voltage level flag is set */
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003120:	e009      	b.n	8003136 <HAL_PWREx_ConfigSupply+0x56>
  {
    if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003122:	f7fd ff4f 	bl	8000fc4 <HAL_GetTick>
 8003126:	4602      	mov	r2, r0
 8003128:	68fb      	ldr	r3, [r7, #12]
 800312a:	1ad3      	subs	r3, r2, r3
 800312c:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003130:	d901      	bls.n	8003136 <HAL_PWREx_ConfigSupply+0x56>
    {
      return HAL_ERROR;
 8003132:	2301      	movs	r3, #1
 8003134:	e028      	b.n	8003188 <HAL_PWREx_ConfigSupply+0xa8>
  while (__HAL_PWR_GET_FLAG (PWR_FLAG_ACTVOSRDY) == 0U)
 8003136:	4b16      	ldr	r3, [pc, #88]	; (8003190 <HAL_PWREx_ConfigSupply+0xb0>)
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800313e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003142:	d1ee      	bne.n	8003122 <HAL_PWREx_ConfigSupply+0x42>
    }
  }

#if defined (SMPS)
  /* When the SMPS supplies external circuits verify that SDEXTRDY flag is set */
  if ((SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT_AND_LDO) ||
 8003144:	687b      	ldr	r3, [r7, #4]
 8003146:	2b1e      	cmp	r3, #30
 8003148:	d008      	beq.n	800315c <HAL_PWREx_ConfigSupply+0x7c>
 800314a:	687b      	ldr	r3, [r7, #4]
 800314c:	2b2e      	cmp	r3, #46	; 0x2e
 800314e:	d005      	beq.n	800315c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT_AND_LDO) ||
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	2b1d      	cmp	r3, #29
 8003154:	d002      	beq.n	800315c <HAL_PWREx_ConfigSupply+0x7c>
      (SupplySource == PWR_SMPS_1V8_SUPPLIES_EXT)         ||
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	2b2d      	cmp	r3, #45	; 0x2d
 800315a:	d114      	bne.n	8003186 <HAL_PWREx_ConfigSupply+0xa6>
      (SupplySource == PWR_SMPS_2V5_SUPPLIES_EXT))
  {
    /* Get the current tick number */
    tickstart = HAL_GetTick ();
 800315c:	f7fd ff32 	bl	8000fc4 <HAL_GetTick>
 8003160:	60f8      	str	r0, [r7, #12]

    /* Wait till SMPS external supply ready flag is set */
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003162:	e009      	b.n	8003178 <HAL_PWREx_ConfigSupply+0x98>
    {
      if ((HAL_GetTick () - tickstart) > PWR_FLAG_SETTING_DELAY)
 8003164:	f7fd ff2e 	bl	8000fc4 <HAL_GetTick>
 8003168:	4602      	mov	r2, r0
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	1ad3      	subs	r3, r2, r3
 800316e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8003172:	d901      	bls.n	8003178 <HAL_PWREx_ConfigSupply+0x98>
      {
        return HAL_ERROR;
 8003174:	2301      	movs	r3, #1
 8003176:	e007      	b.n	8003188 <HAL_PWREx_ConfigSupply+0xa8>
    while (__HAL_PWR_GET_FLAG (PWR_FLAG_SMPSEXTRDY) == 0U)
 8003178:	4b05      	ldr	r3, [pc, #20]	; (8003190 <HAL_PWREx_ConfigSupply+0xb0>)
 800317a:	68db      	ldr	r3, [r3, #12]
 800317c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003180:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003184:	d1ee      	bne.n	8003164 <HAL_PWREx_ConfigSupply+0x84>
      }
    }
  }
#endif /* defined (SMPS) */

  return HAL_OK;
 8003186:	2300      	movs	r3, #0
}
 8003188:	4618      	mov	r0, r3
 800318a:	3710      	adds	r7, #16
 800318c:	46bd      	mov	sp, r7
 800318e:	bd80      	pop	{r7, pc}
 8003190:	58024800 	.word	0x58024800

08003194 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003194:	b580      	push	{r7, lr}
 8003196:	b08c      	sub	sp, #48	; 0x30
 8003198:	af00      	add	r7, sp, #0
 800319a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp1_pllckcfg, temp2_pllckcfg;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800319c:	687b      	ldr	r3, [r7, #4]
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d102      	bne.n	80031a8 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	f000 bc48 	b.w	8003a38 <HAL_RCC_OscConfig+0x8a4>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031a8:	687b      	ldr	r3, [r7, #4]
 80031aa:	681b      	ldr	r3, [r3, #0]
 80031ac:	f003 0301 	and.w	r3, r3, #1
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	f000 8088 	beq.w	80032c6 <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80031b6:	4b99      	ldr	r3, [pc, #612]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80031b8:	691b      	ldr	r3, [r3, #16]
 80031ba:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80031be:	62fb      	str	r3, [r7, #44]	; 0x2c
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80031c0:	4b96      	ldr	r3, [pc, #600]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80031c2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80031c4:	62bb      	str	r3, [r7, #40]	; 0x28
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSE) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSE)))
 80031c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031c8:	2b10      	cmp	r3, #16
 80031ca:	d007      	beq.n	80031dc <HAL_RCC_OscConfig+0x48>
 80031cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80031ce:	2b18      	cmp	r3, #24
 80031d0:	d111      	bne.n	80031f6 <HAL_RCC_OscConfig+0x62>
 80031d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80031d4:	f003 0303 	and.w	r3, r3, #3
 80031d8:	2b02      	cmp	r3, #2
 80031da:	d10c      	bne.n	80031f6 <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80031dc:	4b8f      	ldr	r3, [pc, #572]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031e4:	2b00      	cmp	r3, #0
 80031e6:	d06d      	beq.n	80032c4 <HAL_RCC_OscConfig+0x130>
 80031e8:	687b      	ldr	r3, [r7, #4]
 80031ea:	685b      	ldr	r3, [r3, #4]
 80031ec:	2b00      	cmp	r3, #0
 80031ee:	d169      	bne.n	80032c4 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 80031f0:	2301      	movs	r3, #1
 80031f2:	f000 bc21 	b.w	8003a38 <HAL_RCC_OscConfig+0x8a4>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80031f6:	687b      	ldr	r3, [r7, #4]
 80031f8:	685b      	ldr	r3, [r3, #4]
 80031fa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80031fe:	d106      	bne.n	800320e <HAL_RCC_OscConfig+0x7a>
 8003200:	4b86      	ldr	r3, [pc, #536]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	4a85      	ldr	r2, [pc, #532]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003206:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800320a:	6013      	str	r3, [r2, #0]
 800320c:	e02e      	b.n	800326c <HAL_RCC_OscConfig+0xd8>
 800320e:	687b      	ldr	r3, [r7, #4]
 8003210:	685b      	ldr	r3, [r3, #4]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d10c      	bne.n	8003230 <HAL_RCC_OscConfig+0x9c>
 8003216:	4b81      	ldr	r3, [pc, #516]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003218:	681b      	ldr	r3, [r3, #0]
 800321a:	4a80      	ldr	r2, [pc, #512]	; (800341c <HAL_RCC_OscConfig+0x288>)
 800321c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003220:	6013      	str	r3, [r2, #0]
 8003222:	4b7e      	ldr	r3, [pc, #504]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a7d      	ldr	r2, [pc, #500]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003228:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e01d      	b.n	800326c <HAL_RCC_OscConfig+0xd8>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0xc0>
 800323a:	4b78      	ldr	r3, [pc, #480]	; (800341c <HAL_RCC_OscConfig+0x288>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a77      	ldr	r2, [pc, #476]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b75      	ldr	r3, [pc, #468]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a74      	ldr	r2, [pc, #464]	; (800341c <HAL_RCC_OscConfig+0x288>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0xd8>
 8003254:	4b71      	ldr	r3, [pc, #452]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a70      	ldr	r2, [pc, #448]	; (800341c <HAL_RCC_OscConfig+0x288>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b6e      	ldr	r3, [pc, #440]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a6d      	ldr	r2, [pc, #436]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003274:	f7fd fea6 	bl	8000fc4 <HAL_GetTick>
 8003278:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xfa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800327c:	f7fd fea2 	bl	8000fc4 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e3d4      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 800328e:	4b63      	ldr	r3, [pc, #396]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0xe8>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800329c:	f7fd fe92 	bl	8000fc4 <HAL_GetTick>
 80032a0:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0x122>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fd fe8e 	bl	8000fc4 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e3c0      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 80032b6:	4b59      	ldr	r3, [pc, #356]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0x110>
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	f000 80ca 	beq.w	8003468 <HAL_RCC_OscConfig+0x2d4>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_HSICALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* When the HSI is used as system clock it will not be disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 80032d4:	4b51      	ldr	r3, [pc, #324]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80032d6:	691b      	ldr	r3, [r3, #16]
 80032d8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80032dc:	623b      	str	r3, [r7, #32]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 80032de:	4b4f      	ldr	r3, [pc, #316]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80032e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80032e2:	61fb      	str	r3, [r7, #28]
    if ((temp_sysclksrc == RCC_CFGR_SWS_HSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_HSI)))
 80032e4:	6a3b      	ldr	r3, [r7, #32]
 80032e6:	2b00      	cmp	r3, #0
 80032e8:	d007      	beq.n	80032fa <HAL_RCC_OscConfig+0x166>
 80032ea:	6a3b      	ldr	r3, [r7, #32]
 80032ec:	2b18      	cmp	r3, #24
 80032ee:	d156      	bne.n	800339e <HAL_RCC_OscConfig+0x20a>
 80032f0:	69fb      	ldr	r3, [r7, #28]
 80032f2:	f003 0303 	and.w	r3, r3, #3
 80032f6:	2b00      	cmp	r3, #0
 80032f8:	d151      	bne.n	800339e <HAL_RCC_OscConfig+0x20a>
    {
      /* When HSI is used as system clock it will not be disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 80032fa:	4b48      	ldr	r3, [pc, #288]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80032fc:	681b      	ldr	r3, [r3, #0]
 80032fe:	f003 0304 	and.w	r3, r3, #4
 8003302:	2b00      	cmp	r3, #0
 8003304:	d005      	beq.n	8003312 <HAL_RCC_OscConfig+0x17e>
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	68db      	ldr	r3, [r3, #12]
 800330a:	2b00      	cmp	r3, #0
 800330c:	d101      	bne.n	8003312 <HAL_RCC_OscConfig+0x17e>
      {
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e392      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, only HSI division and calibration are allowed */
      else
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2, HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 8003312:	4b42      	ldr	r3, [pc, #264]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f023 0219 	bic.w	r2, r3, #25
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	68db      	ldr	r3, [r3, #12]
 800331e:	493f      	ldr	r1, [pc, #252]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003320:	4313      	orrs	r3, r2
 8003322:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003324:	f7fd fe4e 	bl	8000fc4 <HAL_GetTick>
 8003328:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800332a:	e008      	b.n	800333e <HAL_RCC_OscConfig+0x1aa>
        {
          if ((uint32_t)(HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800332c:	f7fd fe4a 	bl	8000fc4 <HAL_GetTick>
 8003330:	4602      	mov	r2, r0
 8003332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003334:	1ad3      	subs	r3, r2, r3
 8003336:	2b02      	cmp	r3, #2
 8003338:	d901      	bls.n	800333e <HAL_RCC_OscConfig+0x1aa>
          {
            return HAL_TIMEOUT;
 800333a:	2303      	movs	r3, #3
 800333c:	e37c      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 800333e:	4b37      	ldr	r3, [pc, #220]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0304 	and.w	r3, r3, #4
 8003346:	2b00      	cmp	r3, #0
 8003348:	d0f0      	beq.n	800332c <HAL_RCC_OscConfig+0x198>
          }
        }
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800334a:	f7fd fe6b 	bl	8001024 <HAL_GetREVID>
 800334e:	4603      	mov	r3, r0
 8003350:	f241 0203 	movw	r2, #4099	; 0x1003
 8003354:	4293      	cmp	r3, r2
 8003356:	d817      	bhi.n	8003388 <HAL_RCC_OscConfig+0x1f4>
 8003358:	687b      	ldr	r3, [r7, #4]
 800335a:	691b      	ldr	r3, [r3, #16]
 800335c:	2b40      	cmp	r3, #64	; 0x40
 800335e:	d108      	bne.n	8003372 <HAL_RCC_OscConfig+0x1de>
 8003360:	4b2e      	ldr	r3, [pc, #184]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 8003368:	4a2c      	ldr	r2, [pc, #176]	; (800341c <HAL_RCC_OscConfig+0x288>)
 800336a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800336e:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003370:	e07a      	b.n	8003468 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003372:	4b2a      	ldr	r3, [pc, #168]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003374:	685b      	ldr	r3, [r3, #4]
 8003376:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	031b      	lsls	r3, r3, #12
 8003380:	4926      	ldr	r1, [pc, #152]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003382:	4313      	orrs	r3, r2
 8003384:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 8003386:	e06f      	b.n	8003468 <HAL_RCC_OscConfig+0x2d4>
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003388:	4b24      	ldr	r3, [pc, #144]	; (800341c <HAL_RCC_OscConfig+0x288>)
 800338a:	685b      	ldr	r3, [r3, #4]
 800338c:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	691b      	ldr	r3, [r3, #16]
 8003394:	061b      	lsls	r3, r3, #24
 8003396:	4921      	ldr	r1, [pc, #132]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003398:	4313      	orrs	r3, r2
 800339a:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (RCC_OscInitStruct->HSIState == RCC_HSI_OFF))
 800339c:	e064      	b.n	8003468 <HAL_RCC_OscConfig+0x2d4>
    }

    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	68db      	ldr	r3, [r3, #12]
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d047      	beq.n	8003436 <HAL_RCC_OscConfig+0x2a2>
      {
        /* Enable the Internal High Speed oscillator (HSI, HSIDIV2,HSIDIV4, or HSIDIV8) */
        __HAL_RCC_HSI_CONFIG(RCC_OscInitStruct->HSIState);
 80033a6:	4b1d      	ldr	r3, [pc, #116]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f023 0219 	bic.w	r2, r3, #25
 80033ae:	687b      	ldr	r3, [r7, #4]
 80033b0:	68db      	ldr	r3, [r3, #12]
 80033b2:	491a      	ldr	r1, [pc, #104]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80033b4:	4313      	orrs	r3, r2
 80033b6:	600b      	str	r3, [r1, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80033b8:	f7fd fe04 	bl	8000fc4 <HAL_GetTick>
 80033bc:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033be:	e008      	b.n	80033d2 <HAL_RCC_OscConfig+0x23e>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033c0:	f7fd fe00 	bl	8000fc4 <HAL_GetTick>
 80033c4:	4602      	mov	r2, r0
 80033c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80033c8:	1ad3      	subs	r3, r2, r3
 80033ca:	2b02      	cmp	r3, #2
 80033cc:	d901      	bls.n	80033d2 <HAL_RCC_OscConfig+0x23e>
          {
            return HAL_TIMEOUT;
 80033ce:	2303      	movs	r3, #3
 80033d0:	e332      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 80033d2:	4b12      	ldr	r3, [pc, #72]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80033d4:	681b      	ldr	r3, [r3, #0]
 80033d6:	f003 0304 	and.w	r3, r3, #4
 80033da:	2b00      	cmp	r3, #0
 80033dc:	d0f0      	beq.n	80033c0 <HAL_RCC_OscConfig+0x22c>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033de:	f7fd fe21 	bl	8001024 <HAL_GetREVID>
 80033e2:	4603      	mov	r3, r0
 80033e4:	f241 0203 	movw	r2, #4099	; 0x1003
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d819      	bhi.n	8003420 <HAL_RCC_OscConfig+0x28c>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	691b      	ldr	r3, [r3, #16]
 80033f0:	2b40      	cmp	r3, #64	; 0x40
 80033f2:	d108      	bne.n	8003406 <HAL_RCC_OscConfig+0x272>
 80033f4:	4b09      	ldr	r3, [pc, #36]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80033f6:	685b      	ldr	r3, [r3, #4]
 80033f8:	f423 337c 	bic.w	r3, r3, #258048	; 0x3f000
 80033fc:	4a07      	ldr	r2, [pc, #28]	; (800341c <HAL_RCC_OscConfig+0x288>)
 80033fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003402:	6053      	str	r3, [r2, #4]
 8003404:	e030      	b.n	8003468 <HAL_RCC_OscConfig+0x2d4>
 8003406:	4b05      	ldr	r3, [pc, #20]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003408:	685b      	ldr	r3, [r3, #4]
 800340a:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800340e:	687b      	ldr	r3, [r7, #4]
 8003410:	691b      	ldr	r3, [r3, #16]
 8003412:	031b      	lsls	r3, r3, #12
 8003414:	4901      	ldr	r1, [pc, #4]	; (800341c <HAL_RCC_OscConfig+0x288>)
 8003416:	4313      	orrs	r3, r2
 8003418:	604b      	str	r3, [r1, #4]
 800341a:	e025      	b.n	8003468 <HAL_RCC_OscConfig+0x2d4>
 800341c:	58024400 	.word	0x58024400
 8003420:	4b9a      	ldr	r3, [pc, #616]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003422:	685b      	ldr	r3, [r3, #4]
 8003424:	f023 42fe 	bic.w	r2, r3, #2130706432	; 0x7f000000
 8003428:	687b      	ldr	r3, [r7, #4]
 800342a:	691b      	ldr	r3, [r3, #16]
 800342c:	061b      	lsls	r3, r3, #24
 800342e:	4997      	ldr	r1, [pc, #604]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003430:	4313      	orrs	r3, r2
 8003432:	604b      	str	r3, [r1, #4]
 8003434:	e018      	b.n	8003468 <HAL_RCC_OscConfig+0x2d4>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8003436:	4b95      	ldr	r3, [pc, #596]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4a94      	ldr	r2, [pc, #592]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800343c:	f023 0301 	bic.w	r3, r3, #1
 8003440:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003442:	f7fd fdbf 	bl	8000fc4 <HAL_GetTick>
 8003446:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 8003448:	e008      	b.n	800345c <HAL_RCC_OscConfig+0x2c8>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 800344a:	f7fd fdbb 	bl	8000fc4 <HAL_GetTick>
 800344e:	4602      	mov	r2, r0
 8003450:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003452:	1ad3      	subs	r3, r2, r3
 8003454:	2b02      	cmp	r3, #2
 8003456:	d901      	bls.n	800345c <HAL_RCC_OscConfig+0x2c8>
          {
            return HAL_TIMEOUT;
 8003458:	2303      	movs	r3, #3
 800345a:	e2ed      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 800345c:	4b8b      	ldr	r3, [pc, #556]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800345e:	681b      	ldr	r3, [r3, #0]
 8003460:	f003 0304 	and.w	r3, r3, #4
 8003464:	2b00      	cmp	r3, #0
 8003466:	d1f0      	bne.n	800344a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }
  }
  /*----------------------------- CSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_CSI) == RCC_OSCILLATORTYPE_CSI)
 8003468:	687b      	ldr	r3, [r7, #4]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f003 0310 	and.w	r3, r3, #16
 8003470:	2b00      	cmp	r3, #0
 8003472:	f000 80a9 	beq.w	80035c8 <HAL_RCC_OscConfig+0x434>
    /* Check the parameters */
    assert_param(IS_RCC_CSI(RCC_OscInitStruct->CSIState));
    assert_param(IS_RCC_CSICALIBRATION_VALUE(RCC_OscInitStruct->CSICalibrationValue));

    /* When the CSI is used as system clock it will not disabled */
    const uint32_t temp_sysclksrc = __HAL_RCC_GET_SYSCLK_SOURCE();
 8003476:	4b85      	ldr	r3, [pc, #532]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003478:	691b      	ldr	r3, [r3, #16]
 800347a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800347e:	61bb      	str	r3, [r7, #24]
    const uint32_t temp_pllckselr = RCC->PLLCKSELR;
 8003480:	4b82      	ldr	r3, [pc, #520]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003482:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003484:	617b      	str	r3, [r7, #20]
    if ((temp_sysclksrc == RCC_CFGR_SWS_CSI) || ((temp_sysclksrc == RCC_CFGR_SWS_PLL1) && ((temp_pllckselr & RCC_PLLCKSELR_PLLSRC) == RCC_PLLCKSELR_PLLSRC_CSI)))
 8003486:	69bb      	ldr	r3, [r7, #24]
 8003488:	2b08      	cmp	r3, #8
 800348a:	d007      	beq.n	800349c <HAL_RCC_OscConfig+0x308>
 800348c:	69bb      	ldr	r3, [r7, #24]
 800348e:	2b18      	cmp	r3, #24
 8003490:	d13a      	bne.n	8003508 <HAL_RCC_OscConfig+0x374>
 8003492:	697b      	ldr	r3, [r7, #20]
 8003494:	f003 0303 	and.w	r3, r3, #3
 8003498:	2b01      	cmp	r3, #1
 800349a:	d135      	bne.n	8003508 <HAL_RCC_OscConfig+0x374>
    {
      /* When CSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 800349c:	4b7b      	ldr	r3, [pc, #492]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d005      	beq.n	80034b4 <HAL_RCC_OscConfig+0x320>
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	69db      	ldr	r3, [r3, #28]
 80034ac:	2b80      	cmp	r3, #128	; 0x80
 80034ae:	d001      	beq.n	80034b4 <HAL_RCC_OscConfig+0x320>
      {
        return HAL_ERROR;
 80034b0:	2301      	movs	r3, #1
 80034b2:	e2c1      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034b4:	f7fd fdb6 	bl	8001024 <HAL_GetREVID>
 80034b8:	4603      	mov	r3, r0
 80034ba:	f241 0203 	movw	r2, #4099	; 0x1003
 80034be:	4293      	cmp	r3, r2
 80034c0:	d817      	bhi.n	80034f2 <HAL_RCC_OscConfig+0x35e>
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	6a1b      	ldr	r3, [r3, #32]
 80034c6:	2b20      	cmp	r3, #32
 80034c8:	d108      	bne.n	80034dc <HAL_RCC_OscConfig+0x348>
 80034ca:	4b70      	ldr	r3, [pc, #448]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 80034cc:	685b      	ldr	r3, [r3, #4]
 80034ce:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 80034d2:	4a6e      	ldr	r2, [pc, #440]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 80034d4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80034d8:	6053      	str	r3, [r2, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034da:	e075      	b.n	80035c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034dc:	4b6b      	ldr	r3, [pc, #428]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 80034de:	685b      	ldr	r3, [r3, #4]
 80034e0:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 80034e4:	687b      	ldr	r3, [r7, #4]
 80034e6:	6a1b      	ldr	r3, [r3, #32]
 80034e8:	069b      	lsls	r3, r3, #26
 80034ea:	4968      	ldr	r1, [pc, #416]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 80034ec:	4313      	orrs	r3, r2
 80034ee:	604b      	str	r3, [r1, #4]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 80034f0:	e06a      	b.n	80035c8 <HAL_RCC_OscConfig+0x434>
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 80034f2:	4b66      	ldr	r3, [pc, #408]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 80034f4:	68db      	ldr	r3, [r3, #12]
 80034f6:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	6a1b      	ldr	r3, [r3, #32]
 80034fe:	061b      	lsls	r3, r3, #24
 8003500:	4962      	ldr	r1, [pc, #392]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003502:	4313      	orrs	r3, r2
 8003504:	60cb      	str	r3, [r1, #12]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U) && (RCC_OscInitStruct->CSIState != RCC_CSI_ON))
 8003506:	e05f      	b.n	80035c8 <HAL_RCC_OscConfig+0x434>
      }
    }
    else
    {
      /* Check the CSI State */
      if ((RCC_OscInitStruct->CSIState) != RCC_CSI_OFF)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	69db      	ldr	r3, [r3, #28]
 800350c:	2b00      	cmp	r3, #0
 800350e:	d042      	beq.n	8003596 <HAL_RCC_OscConfig+0x402>
      {
        /* Enable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_ENABLE();
 8003510:	4b5e      	ldr	r3, [pc, #376]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003512:	681b      	ldr	r3, [r3, #0]
 8003514:	4a5d      	ldr	r2, [pc, #372]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003516:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800351a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800351c:	f7fd fd52 	bl	8000fc4 <HAL_GetTick>
 8003520:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003522:	e008      	b.n	8003536 <HAL_RCC_OscConfig+0x3a2>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 8003524:	f7fd fd4e 	bl	8000fc4 <HAL_GetTick>
 8003528:	4602      	mov	r2, r0
 800352a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800352c:	1ad3      	subs	r3, r2, r3
 800352e:	2b02      	cmp	r3, #2
 8003530:	d901      	bls.n	8003536 <HAL_RCC_OscConfig+0x3a2>
          {
            return HAL_TIMEOUT;
 8003532:	2303      	movs	r3, #3
 8003534:	e280      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003536:	4b55      	ldr	r3, [pc, #340]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003538:	681b      	ldr	r3, [r3, #0]
 800353a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800353e:	2b00      	cmp	r3, #0
 8003540:	d0f0      	beq.n	8003524 <HAL_RCC_OscConfig+0x390>
          }
        }

        /* Adjusts the Internal High Speed oscillator (CSI) calibration value.*/
        __HAL_RCC_CSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->CSICalibrationValue);
 8003542:	f7fd fd6f 	bl	8001024 <HAL_GetREVID>
 8003546:	4603      	mov	r3, r0
 8003548:	f241 0203 	movw	r2, #4099	; 0x1003
 800354c:	4293      	cmp	r3, r2
 800354e:	d817      	bhi.n	8003580 <HAL_RCC_OscConfig+0x3ec>
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	6a1b      	ldr	r3, [r3, #32]
 8003554:	2b20      	cmp	r3, #32
 8003556:	d108      	bne.n	800356a <HAL_RCC_OscConfig+0x3d6>
 8003558:	4b4c      	ldr	r3, [pc, #304]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800355a:	685b      	ldr	r3, [r3, #4]
 800355c:	f023 43f8 	bic.w	r3, r3, #2080374784	; 0x7c000000
 8003560:	4a4a      	ldr	r2, [pc, #296]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003562:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8003566:	6053      	str	r3, [r2, #4]
 8003568:	e02e      	b.n	80035c8 <HAL_RCC_OscConfig+0x434>
 800356a:	4b48      	ldr	r3, [pc, #288]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800356c:	685b      	ldr	r3, [r3, #4]
 800356e:	f023 42f8 	bic.w	r2, r3, #2080374784	; 0x7c000000
 8003572:	687b      	ldr	r3, [r7, #4]
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	069b      	lsls	r3, r3, #26
 8003578:	4944      	ldr	r1, [pc, #272]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800357a:	4313      	orrs	r3, r2
 800357c:	604b      	str	r3, [r1, #4]
 800357e:	e023      	b.n	80035c8 <HAL_RCC_OscConfig+0x434>
 8003580:	4b42      	ldr	r3, [pc, #264]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003582:	68db      	ldr	r3, [r3, #12]
 8003584:	f023 527c 	bic.w	r2, r3, #1056964608	; 0x3f000000
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	6a1b      	ldr	r3, [r3, #32]
 800358c:	061b      	lsls	r3, r3, #24
 800358e:	493f      	ldr	r1, [pc, #252]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003590:	4313      	orrs	r3, r2
 8003592:	60cb      	str	r3, [r1, #12]
 8003594:	e018      	b.n	80035c8 <HAL_RCC_OscConfig+0x434>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (CSI). */
        __HAL_RCC_CSI_DISABLE();
 8003596:	4b3d      	ldr	r3, [pc, #244]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	4a3c      	ldr	r2, [pc, #240]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800359c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80035a0:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80035a2:	f7fd fd0f 	bl	8000fc4 <HAL_GetTick>
 80035a6:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till CSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035a8:	e008      	b.n	80035bc <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > CSI_TIMEOUT_VALUE)
 80035aa:	f7fd fd0b 	bl	8000fc4 <HAL_GetTick>
 80035ae:	4602      	mov	r2, r0
 80035b0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035b2:	1ad3      	subs	r3, r2, r3
 80035b4:	2b02      	cmp	r3, #2
 80035b6:	d901      	bls.n	80035bc <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035b8:	2303      	movs	r3, #3
 80035ba:	e23d      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) != 0U)
 80035bc:	4b33      	ldr	r3, [pc, #204]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80035c4:	2b00      	cmp	r3, #0
 80035c6:	d1f0      	bne.n	80035aa <HAL_RCC_OscConfig+0x416>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	f003 0308 	and.w	r3, r3, #8
 80035d0:	2b00      	cmp	r3, #0
 80035d2:	d036      	beq.n	8003642 <HAL_RCC_OscConfig+0x4ae>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 80035d4:	687b      	ldr	r3, [r7, #4]
 80035d6:	695b      	ldr	r3, [r3, #20]
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d019      	beq.n	8003610 <HAL_RCC_OscConfig+0x47c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80035dc:	4b2b      	ldr	r3, [pc, #172]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 80035de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80035e0:	4a2a      	ldr	r2, [pc, #168]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 80035e2:	f043 0301 	orr.w	r3, r3, #1
 80035e6:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80035e8:	f7fd fcec 	bl	8000fc4 <HAL_GetTick>
 80035ec:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 80035ee:	e008      	b.n	8003602 <HAL_RCC_OscConfig+0x46e>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 80035f0:	f7fd fce8 	bl	8000fc4 <HAL_GetTick>
 80035f4:	4602      	mov	r2, r0
 80035f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80035f8:	1ad3      	subs	r3, r2, r3
 80035fa:	2b02      	cmp	r3, #2
 80035fc:	d901      	bls.n	8003602 <HAL_RCC_OscConfig+0x46e>
        {
          return HAL_TIMEOUT;
 80035fe:	2303      	movs	r3, #3
 8003600:	e21a      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8003602:	4b22      	ldr	r3, [pc, #136]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003604:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003606:	f003 0302 	and.w	r3, r3, #2
 800360a:	2b00      	cmp	r3, #0
 800360c:	d0f0      	beq.n	80035f0 <HAL_RCC_OscConfig+0x45c>
 800360e:	e018      	b.n	8003642 <HAL_RCC_OscConfig+0x4ae>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003610:	4b1e      	ldr	r3, [pc, #120]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8003614:	4a1d      	ldr	r2, [pc, #116]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003616:	f023 0301 	bic.w	r3, r3, #1
 800361a:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800361c:	f7fd fcd2 	bl	8000fc4 <HAL_GetTick>
 8003620:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003622:	e008      	b.n	8003636 <HAL_RCC_OscConfig+0x4a2>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003624:	f7fd fcce 	bl	8000fc4 <HAL_GetTick>
 8003628:	4602      	mov	r2, r0
 800362a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800362c:	1ad3      	subs	r3, r2, r3
 800362e:	2b02      	cmp	r3, #2
 8003630:	d901      	bls.n	8003636 <HAL_RCC_OscConfig+0x4a2>
        {
          return HAL_TIMEOUT;
 8003632:	2303      	movs	r3, #3
 8003634:	e200      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8003636:	4b15      	ldr	r3, [pc, #84]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003638:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800363a:	f003 0302 	and.w	r3, r3, #2
 800363e:	2b00      	cmp	r3, #0
 8003640:	d1f0      	bne.n	8003624 <HAL_RCC_OscConfig+0x490>
      }
    }
  }

  /*------------------------------ HSI48 Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f003 0320 	and.w	r3, r3, #32
 800364a:	2b00      	cmp	r3, #0
 800364c:	d039      	beq.n	80036c2 <HAL_RCC_OscConfig+0x52e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

    /* Check the HSI48 State */
    if ((RCC_OscInitStruct->HSI48State) != RCC_HSI48_OFF)
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	699b      	ldr	r3, [r3, #24]
 8003652:	2b00      	cmp	r3, #0
 8003654:	d01c      	beq.n	8003690 <HAL_RCC_OscConfig+0x4fc>
    {
      /* Enable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_ENABLE();
 8003656:	4b0d      	ldr	r3, [pc, #52]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 8003658:	681b      	ldr	r3, [r3, #0]
 800365a:	4a0c      	ldr	r2, [pc, #48]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800365c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003660:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 8003662:	f7fd fcaf 	bl	8000fc4 <HAL_GetTick>
 8003666:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8003668:	e008      	b.n	800367c <HAL_RCC_OscConfig+0x4e8>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 800366a:	f7fd fcab 	bl	8000fc4 <HAL_GetTick>
 800366e:	4602      	mov	r2, r0
 8003670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003672:	1ad3      	subs	r3, r2, r3
 8003674:	2b02      	cmp	r3, #2
 8003676:	d901      	bls.n	800367c <HAL_RCC_OscConfig+0x4e8>
        {
          return HAL_TIMEOUT;
 8003678:	2303      	movs	r3, #3
 800367a:	e1dd      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 800367c:	4b03      	ldr	r3, [pc, #12]	; (800368c <HAL_RCC_OscConfig+0x4f8>)
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003684:	2b00      	cmp	r3, #0
 8003686:	d0f0      	beq.n	800366a <HAL_RCC_OscConfig+0x4d6>
 8003688:	e01b      	b.n	80036c2 <HAL_RCC_OscConfig+0x52e>
 800368a:	bf00      	nop
 800368c:	58024400 	.word	0x58024400
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (HSI48). */
      __HAL_RCC_HSI48_DISABLE();
 8003690:	4b9b      	ldr	r3, [pc, #620]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a9a      	ldr	r2, [pc, #616]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003696:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800369a:	6013      	str	r3, [r2, #0]

      /* Get time-out */
      tickstart = HAL_GetTick();
 800369c:	f7fd fc92 	bl	8000fc4 <HAL_GetTick>
 80036a0:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till HSI48 is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036a2:	e008      	b.n	80036b6 <HAL_RCC_OscConfig+0x522>
      {
        if ((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 80036a4:	f7fd fc8e 	bl	8000fc4 <HAL_GetTick>
 80036a8:	4602      	mov	r2, r0
 80036aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ac:	1ad3      	subs	r3, r2, r3
 80036ae:	2b02      	cmp	r3, #2
 80036b0:	d901      	bls.n	80036b6 <HAL_RCC_OscConfig+0x522>
        {
          return HAL_TIMEOUT;
 80036b2:	2303      	movs	r3, #3
 80036b4:	e1c0      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 80036b6:	4b92      	ldr	r3, [pc, #584]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d1f0      	bne.n	80036a4 <HAL_RCC_OscConfig+0x510>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f003 0304 	and.w	r3, r3, #4
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	f000 8081 	beq.w	80037d2 <HAL_RCC_OscConfig+0x63e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 80036d0:	4b8c      	ldr	r3, [pc, #560]	; (8003904 <HAL_RCC_OscConfig+0x770>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4a8b      	ldr	r2, [pc, #556]	; (8003904 <HAL_RCC_OscConfig+0x770>)
 80036d6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80036da:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80036dc:	f7fd fc72 	bl	8000fc4 <HAL_GetTick>
 80036e0:	6278      	str	r0, [r7, #36]	; 0x24

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036e2:	e008      	b.n	80036f6 <HAL_RCC_OscConfig+0x562>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80036e4:	f7fd fc6e 	bl	8000fc4 <HAL_GetTick>
 80036e8:	4602      	mov	r2, r0
 80036ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80036ec:	1ad3      	subs	r3, r2, r3
 80036ee:	2b64      	cmp	r3, #100	; 0x64
 80036f0:	d901      	bls.n	80036f6 <HAL_RCC_OscConfig+0x562>
      {
        return HAL_TIMEOUT;
 80036f2:	2303      	movs	r3, #3
 80036f4:	e1a0      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80036f6:	4b83      	ldr	r3, [pc, #524]	; (8003904 <HAL_RCC_OscConfig+0x770>)
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d0f0      	beq.n	80036e4 <HAL_RCC_OscConfig+0x550>
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003702:	687b      	ldr	r3, [r7, #4]
 8003704:	689b      	ldr	r3, [r3, #8]
 8003706:	2b01      	cmp	r3, #1
 8003708:	d106      	bne.n	8003718 <HAL_RCC_OscConfig+0x584>
 800370a:	4b7d      	ldr	r3, [pc, #500]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800370c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800370e:	4a7c      	ldr	r2, [pc, #496]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003710:	f043 0301 	orr.w	r3, r3, #1
 8003714:	6713      	str	r3, [r2, #112]	; 0x70
 8003716:	e02d      	b.n	8003774 <HAL_RCC_OscConfig+0x5e0>
 8003718:	687b      	ldr	r3, [r7, #4]
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	2b00      	cmp	r3, #0
 800371e:	d10c      	bne.n	800373a <HAL_RCC_OscConfig+0x5a6>
 8003720:	4b77      	ldr	r3, [pc, #476]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003722:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003724:	4a76      	ldr	r2, [pc, #472]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003726:	f023 0301 	bic.w	r3, r3, #1
 800372a:	6713      	str	r3, [r2, #112]	; 0x70
 800372c:	4b74      	ldr	r3, [pc, #464]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800372e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003730:	4a73      	ldr	r2, [pc, #460]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003732:	f023 0304 	bic.w	r3, r3, #4
 8003736:	6713      	str	r3, [r2, #112]	; 0x70
 8003738:	e01c      	b.n	8003774 <HAL_RCC_OscConfig+0x5e0>
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	689b      	ldr	r3, [r3, #8]
 800373e:	2b05      	cmp	r3, #5
 8003740:	d10c      	bne.n	800375c <HAL_RCC_OscConfig+0x5c8>
 8003742:	4b6f      	ldr	r3, [pc, #444]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003746:	4a6e      	ldr	r2, [pc, #440]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003748:	f043 0304 	orr.w	r3, r3, #4
 800374c:	6713      	str	r3, [r2, #112]	; 0x70
 800374e:	4b6c      	ldr	r3, [pc, #432]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003750:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003752:	4a6b      	ldr	r2, [pc, #428]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003754:	f043 0301 	orr.w	r3, r3, #1
 8003758:	6713      	str	r3, [r2, #112]	; 0x70
 800375a:	e00b      	b.n	8003774 <HAL_RCC_OscConfig+0x5e0>
 800375c:	4b68      	ldr	r3, [pc, #416]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800375e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003760:	4a67      	ldr	r2, [pc, #412]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003762:	f023 0301 	bic.w	r3, r3, #1
 8003766:	6713      	str	r3, [r2, #112]	; 0x70
 8003768:	4b65      	ldr	r3, [pc, #404]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800376a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800376c:	4a64      	ldr	r2, [pc, #400]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800376e:	f023 0304 	bic.w	r3, r3, #4
 8003772:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	689b      	ldr	r3, [r3, #8]
 8003778:	2b00      	cmp	r3, #0
 800377a:	d015      	beq.n	80037a8 <HAL_RCC_OscConfig+0x614>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800377c:	f7fd fc22 	bl	8000fc4 <HAL_GetTick>
 8003780:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8003782:	e00a      	b.n	800379a <HAL_RCC_OscConfig+0x606>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8003784:	f7fd fc1e 	bl	8000fc4 <HAL_GetTick>
 8003788:	4602      	mov	r2, r0
 800378a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800378c:	1ad3      	subs	r3, r2, r3
 800378e:	f241 3288 	movw	r2, #5000	; 0x1388
 8003792:	4293      	cmp	r3, r2
 8003794:	d901      	bls.n	800379a <HAL_RCC_OscConfig+0x606>
        {
          return HAL_TIMEOUT;
 8003796:	2303      	movs	r3, #3
 8003798:	e14e      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 800379a:	4b59      	ldr	r3, [pc, #356]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800379c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800379e:	f003 0302 	and.w	r3, r3, #2
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d0ee      	beq.n	8003784 <HAL_RCC_OscConfig+0x5f0>
 80037a6:	e014      	b.n	80037d2 <HAL_RCC_OscConfig+0x63e>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80037a8:	f7fd fc0c 	bl	8000fc4 <HAL_GetTick>
 80037ac:	6278      	str	r0, [r7, #36]	; 0x24

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037ae:	e00a      	b.n	80037c6 <HAL_RCC_OscConfig+0x632>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80037b0:	f7fd fc08 	bl	8000fc4 <HAL_GetTick>
 80037b4:	4602      	mov	r2, r0
 80037b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80037b8:	1ad3      	subs	r3, r2, r3
 80037ba:	f241 3288 	movw	r2, #5000	; 0x1388
 80037be:	4293      	cmp	r3, r2
 80037c0:	d901      	bls.n	80037c6 <HAL_RCC_OscConfig+0x632>
        {
          return HAL_TIMEOUT;
 80037c2:	2303      	movs	r3, #3
 80037c4:	e138      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 80037c6:	4b4e      	ldr	r3, [pc, #312]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80037c8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80037ca:	f003 0302 	and.w	r3, r3, #2
 80037ce:	2b00      	cmp	r3, #0
 80037d0:	d1ee      	bne.n	80037b0 <HAL_RCC_OscConfig+0x61c>
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037d6:	2b00      	cmp	r3, #0
 80037d8:	f000 812d 	beq.w	8003a36 <HAL_RCC_OscConfig+0x8a2>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL1)
 80037dc:	4b48      	ldr	r3, [pc, #288]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80037de:	691b      	ldr	r3, [r3, #16]
 80037e0:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80037e4:	2b18      	cmp	r3, #24
 80037e6:	f000 80bd 	beq.w	8003964 <HAL_RCC_OscConfig+0x7d0>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80037ee:	2b02      	cmp	r3, #2
 80037f0:	f040 809e 	bne.w	8003930 <HAL_RCC_OscConfig+0x79c>
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
        assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80037f4:	4b42      	ldr	r3, [pc, #264]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a41      	ldr	r2, [pc, #260]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80037fa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80037fe:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003800:	f7fd fbe0 	bl	8000fc4 <HAL_GetTick>
 8003804:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003806:	e008      	b.n	800381a <HAL_RCC_OscConfig+0x686>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003808:	f7fd fbdc 	bl	8000fc4 <HAL_GetTick>
 800380c:	4602      	mov	r2, r0
 800380e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003810:	1ad3      	subs	r3, r2, r3
 8003812:	2b02      	cmp	r3, #2
 8003814:	d901      	bls.n	800381a <HAL_RCC_OscConfig+0x686>
          {
            return HAL_TIMEOUT;
 8003816:	2303      	movs	r3, #3
 8003818:	e10e      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 800381a:	4b39      	ldr	r3, [pc, #228]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800381c:	681b      	ldr	r3, [r3, #0]
 800381e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003822:	2b00      	cmp	r3, #0
 8003824:	d1f0      	bne.n	8003808 <HAL_RCC_OscConfig+0x674>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003826:	4b36      	ldr	r3, [pc, #216]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003828:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800382a:	4b37      	ldr	r3, [pc, #220]	; (8003908 <HAL_RCC_OscConfig+0x774>)
 800382c:	4013      	ands	r3, r2
 800382e:	687a      	ldr	r2, [r7, #4]
 8003830:	6a91      	ldr	r1, [r2, #40]	; 0x28
 8003832:	687a      	ldr	r2, [r7, #4]
 8003834:	6ad2      	ldr	r2, [r2, #44]	; 0x2c
 8003836:	0112      	lsls	r2, r2, #4
 8003838:	430a      	orrs	r2, r1
 800383a:	4931      	ldr	r1, [pc, #196]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800383c:	4313      	orrs	r3, r2
 800383e:	628b      	str	r3, [r1, #40]	; 0x28
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003844:	3b01      	subs	r3, #1
 8003846:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800384a:	687b      	ldr	r3, [r7, #4]
 800384c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800384e:	3b01      	subs	r3, #1
 8003850:	025b      	lsls	r3, r3, #9
 8003852:	b29b      	uxth	r3, r3
 8003854:	431a      	orrs	r2, r3
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800385a:	3b01      	subs	r3, #1
 800385c:	041b      	lsls	r3, r3, #16
 800385e:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8003862:	431a      	orrs	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003868:	3b01      	subs	r3, #1
 800386a:	061b      	lsls	r3, r3, #24
 800386c:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8003870:	4923      	ldr	r1, [pc, #140]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003872:	4313      	orrs	r3, r2
 8003874:	630b      	str	r3, [r1, #48]	; 0x30
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Disable PLLFRACN . */
        __HAL_RCC_PLLFRACN_DISABLE();
 8003876:	4b22      	ldr	r3, [pc, #136]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003878:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800387a:	4a21      	ldr	r2, [pc, #132]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 800387c:	f023 0301 	bic.w	r3, r3, #1
 8003880:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Configure PLL PLL1FRACN */
        __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003882:	4b1f      	ldr	r3, [pc, #124]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003886:	4b21      	ldr	r3, [pc, #132]	; (800390c <HAL_RCC_OscConfig+0x778>)
 8003888:	4013      	ands	r3, r2
 800388a:	687a      	ldr	r2, [r7, #4]
 800388c:	6c92      	ldr	r2, [r2, #72]	; 0x48
 800388e:	00d2      	lsls	r2, r2, #3
 8003890:	491b      	ldr	r1, [pc, #108]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003892:	4313      	orrs	r3, r2
 8003894:	634b      	str	r3, [r1, #52]	; 0x34

        /* Select PLL1 input reference frequency range: VCI */
        __HAL_RCC_PLL_VCIRANGE(RCC_OscInitStruct->PLL.PLLRGE) ;
 8003896:	4b1a      	ldr	r3, [pc, #104]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 8003898:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800389a:	f023 020c 	bic.w	r2, r3, #12
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038a2:	4917      	ldr	r1, [pc, #92]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038a4:	4313      	orrs	r3, r2
 80038a6:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Select PLL1 output frequency range : VCO */
        __HAL_RCC_PLL_VCORANGE(RCC_OscInitStruct->PLL.PLLVCOSEL) ;
 80038a8:	4b15      	ldr	r3, [pc, #84]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ac:	f023 0202 	bic.w	r2, r3, #2
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80038b4:	4912      	ldr	r1, [pc, #72]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038b6:	4313      	orrs	r3, r2
 80038b8:	62cb      	str	r3, [r1, #44]	; 0x2c

        /* Enable PLL System Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVP);
 80038ba:	4b11      	ldr	r3, [pc, #68]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038be:	4a10      	ldr	r2, [pc, #64]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038c0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80038c4:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1Q Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80038c6:	4b0e      	ldr	r3, [pc, #56]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038c8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038ca:	4a0d      	ldr	r2, [pc, #52]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038cc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038d0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1R  Clock output. */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVR);
 80038d2:	4b0b      	ldr	r3, [pc, #44]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038d6:	4a0a      	ldr	r2, [pc, #40]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038d8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80038dc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable PLL1FRACN . */
        __HAL_RCC_PLLFRACN_ENABLE();
 80038de:	4b08      	ldr	r3, [pc, #32]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80038e2:	4a07      	ldr	r2, [pc, #28]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038e4:	f043 0301 	orr.w	r3, r3, #1
 80038e8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	4a04      	ldr	r2, [pc, #16]	; (8003900 <HAL_RCC_OscConfig+0x76c>)
 80038f0:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80038f4:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80038f6:	f7fd fb65 	bl	8000fc4 <HAL_GetTick>
 80038fa:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 80038fc:	e011      	b.n	8003922 <HAL_RCC_OscConfig+0x78e>
 80038fe:	bf00      	nop
 8003900:	58024400 	.word	0x58024400
 8003904:	58024800 	.word	0x58024800
 8003908:	fffffc0c 	.word	0xfffffc0c
 800390c:	ffff0007 	.word	0xffff0007
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003910:	f7fd fb58 	bl	8000fc4 <HAL_GetTick>
 8003914:	4602      	mov	r2, r0
 8003916:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003918:	1ad3      	subs	r3, r2, r3
 800391a:	2b02      	cmp	r3, #2
 800391c:	d901      	bls.n	8003922 <HAL_RCC_OscConfig+0x78e>
          {
            return HAL_TIMEOUT;
 800391e:	2303      	movs	r3, #3
 8003920:	e08a      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003922:	4b47      	ldr	r3, [pc, #284]	; (8003a40 <HAL_RCC_OscConfig+0x8ac>)
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800392a:	2b00      	cmp	r3, #0
 800392c:	d0f0      	beq.n	8003910 <HAL_RCC_OscConfig+0x77c>
 800392e:	e082      	b.n	8003a36 <HAL_RCC_OscConfig+0x8a2>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003930:	4b43      	ldr	r3, [pc, #268]	; (8003a40 <HAL_RCC_OscConfig+0x8ac>)
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a42      	ldr	r2, [pc, #264]	; (8003a40 <HAL_RCC_OscConfig+0x8ac>)
 8003936:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800393a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800393c:	f7fd fb42 	bl	8000fc4 <HAL_GetTick>
 8003940:	6278      	str	r0, [r7, #36]	; 0x24

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003942:	e008      	b.n	8003956 <HAL_RCC_OscConfig+0x7c2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8003944:	f7fd fb3e 	bl	8000fc4 <HAL_GetTick>
 8003948:	4602      	mov	r2, r0
 800394a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800394c:	1ad3      	subs	r3, r2, r3
 800394e:	2b02      	cmp	r3, #2
 8003950:	d901      	bls.n	8003956 <HAL_RCC_OscConfig+0x7c2>
          {
            return HAL_TIMEOUT;
 8003952:	2303      	movs	r3, #3
 8003954:	e070      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != 0U)
 8003956:	4b3a      	ldr	r3, [pc, #232]	; (8003a40 <HAL_RCC_OscConfig+0x8ac>)
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800395e:	2b00      	cmp	r3, #0
 8003960:	d1f0      	bne.n	8003944 <HAL_RCC_OscConfig+0x7b0>
 8003962:	e068      	b.n	8003a36 <HAL_RCC_OscConfig+0x8a2>
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      temp1_pllckcfg = RCC->PLLCKSELR;
 8003964:	4b36      	ldr	r3, [pc, #216]	; (8003a40 <HAL_RCC_OscConfig+0x8ac>)
 8003966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003968:	613b      	str	r3, [r7, #16]
      temp2_pllckcfg = RCC->PLL1DIVR;
 800396a:	4b35      	ldr	r3, [pc, #212]	; (8003a40 <HAL_RCC_OscConfig+0x8ac>)
 800396c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800396e:	60fb      	str	r3, [r7, #12]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003970:	687b      	ldr	r3, [r7, #4]
 8003972:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003974:	2b01      	cmp	r3, #1
 8003976:	d031      	beq.n	80039dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003978:	693b      	ldr	r3, [r7, #16]
 800397a:	f003 0203 	and.w	r2, r3, #3
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003982:	429a      	cmp	r2, r3
 8003984:	d12a      	bne.n	80039dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 8003986:	693b      	ldr	r3, [r7, #16]
 8003988:	091b      	lsrs	r3, r3, #4
 800398a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          (READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003992:	429a      	cmp	r2, r3
 8003994:	d122      	bne.n	80039dc <HAL_RCC_OscConfig+0x848>
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	f3c3 0208 	ubfx	r2, r3, #0, #9
 800399c:	687b      	ldr	r3, [r7, #4]
 800399e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039a0:	3b01      	subs	r3, #1
          ((READ_BIT(temp1_pllckcfg, RCC_PLLCKSELR_DIVM1) >> RCC_PLLCKSELR_DIVM1_Pos) != RCC_OscInitStruct->PLL.PLLM) ||
 80039a2:	429a      	cmp	r2, r3
 80039a4:	d11a      	bne.n	80039dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039a6:	68fb      	ldr	r3, [r7, #12]
 80039a8:	0a5b      	lsrs	r3, r3, #9
 80039aa:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039b2:	3b01      	subs	r3, #1
          (READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_N1) != (RCC_OscInitStruct->PLL.PLLN - 1U)) ||
 80039b4:	429a      	cmp	r2, r3
 80039b6:	d111      	bne.n	80039dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	0c1b      	lsrs	r3, r3, #16
 80039bc:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80039c4:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_P1) >> RCC_PLL1DIVR_P1_Pos) != (RCC_OscInitStruct->PLL.PLLP - 1U)) ||
 80039c6:	429a      	cmp	r2, r3
 80039c8:	d108      	bne.n	80039dc <HAL_RCC_OscConfig+0x848>
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_R1) >> RCC_PLL1DIVR_R1_Pos) != (RCC_OscInitStruct->PLL.PLLR - 1U)))
 80039ca:	68fb      	ldr	r3, [r7, #12]
 80039cc:	0e1b      	lsrs	r3, r3, #24
 80039ce:	f003 027f 	and.w	r2, r3, #127	; 0x7f
 80039d2:	687b      	ldr	r3, [r7, #4]
 80039d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039d6:	3b01      	subs	r3, #1
          ((READ_BIT(temp2_pllckcfg, RCC_PLL1DIVR_Q1) >> RCC_PLL1DIVR_Q1_Pos) != (RCC_OscInitStruct->PLL.PLLQ - 1U)) ||
 80039d8:	429a      	cmp	r2, r3
 80039da:	d001      	beq.n	80039e0 <HAL_RCC_OscConfig+0x84c>
      {
        return HAL_ERROR;
 80039dc:	2301      	movs	r3, #1
 80039de:	e02b      	b.n	8003a38 <HAL_RCC_OscConfig+0x8a4>
      }
      else
      {
        /* Check if only fractional part needs to be updated  */
        temp1_pllckcfg = ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> RCC_PLL1FRACR_FRACN1_Pos);
 80039e0:	4b17      	ldr	r3, [pc, #92]	; (8003a40 <HAL_RCC_OscConfig+0x8ac>)
 80039e2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80039e4:	08db      	lsrs	r3, r3, #3
 80039e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80039ea:	613b      	str	r3, [r7, #16]
        if (RCC_OscInitStruct->PLL.PLLFRACN != temp1_pllckcfg)
 80039ec:	687b      	ldr	r3, [r7, #4]
 80039ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80039f0:	693a      	ldr	r2, [r7, #16]
 80039f2:	429a      	cmp	r2, r3
 80039f4:	d01f      	beq.n	8003a36 <HAL_RCC_OscConfig+0x8a2>
        {
          assert_param(IS_RCC_PLLFRACN_VALUE(RCC_OscInitStruct->PLL.PLLFRACN));
          /* Disable PLL1FRACEN */
          __HAL_RCC_PLLFRACN_DISABLE();
 80039f6:	4b12      	ldr	r3, [pc, #72]	; (8003a40 <HAL_RCC_OscConfig+0x8ac>)
 80039f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80039fa:	4a11      	ldr	r2, [pc, #68]	; (8003a40 <HAL_RCC_OscConfig+0x8ac>)
 80039fc:	f023 0301 	bic.w	r3, r3, #1
 8003a00:	62d3      	str	r3, [r2, #44]	; 0x2c
          /* Get Start Tick*/
          tickstart = HAL_GetTick();
 8003a02:	f7fd fadf 	bl	8000fc4 <HAL_GetTick>
 8003a06:	6278      	str	r0, [r7, #36]	; 0x24
          /* Wait at least 2 CK_REF (PLL input source divided by M) period to make sure next latched value will be taken into account. */
          while ((HAL_GetTick() - tickstart) < PLL_FRAC_TIMEOUT_VALUE)
 8003a08:	bf00      	nop
 8003a0a:	f7fd fadb 	bl	8000fc4 <HAL_GetTick>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a12:	4293      	cmp	r3, r2
 8003a14:	d0f9      	beq.n	8003a0a <HAL_RCC_OscConfig+0x876>
          {
          }
          /* Configure PLL1 PLL1FRACN */
          __HAL_RCC_PLLFRACN_CONFIG(RCC_OscInitStruct->PLL.PLLFRACN);
 8003a16:	4b0a      	ldr	r3, [pc, #40]	; (8003a40 <HAL_RCC_OscConfig+0x8ac>)
 8003a18:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8003a1a:	4b0a      	ldr	r3, [pc, #40]	; (8003a44 <HAL_RCC_OscConfig+0x8b0>)
 8003a1c:	4013      	ands	r3, r2
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	6c92      	ldr	r2, [r2, #72]	; 0x48
 8003a22:	00d2      	lsls	r2, r2, #3
 8003a24:	4906      	ldr	r1, [pc, #24]	; (8003a40 <HAL_RCC_OscConfig+0x8ac>)
 8003a26:	4313      	orrs	r3, r2
 8003a28:	634b      	str	r3, [r1, #52]	; 0x34
          /* Enable PLL1FRACEN to latch new value. */
          __HAL_RCC_PLLFRACN_ENABLE();
 8003a2a:	4b05      	ldr	r3, [pc, #20]	; (8003a40 <HAL_RCC_OscConfig+0x8ac>)
 8003a2c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a2e:	4a04      	ldr	r2, [pc, #16]	; (8003a40 <HAL_RCC_OscConfig+0x8ac>)
 8003a30:	f043 0301 	orr.w	r3, r3, #1
 8003a34:	62d3      	str	r3, [r2, #44]	; 0x2c
        }
      }
    }
  }
  return HAL_OK;
 8003a36:	2300      	movs	r3, #0
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	3730      	adds	r7, #48	; 0x30
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	bd80      	pop	{r7, pc}
 8003a40:	58024400 	.word	0x58024400
 8003a44:	ffff0007 	.word	0xffff0007

08003a48 <HAL_RCC_ClockConfig>:
  *         D1CPRE[3:0] bits to ensure that  Domain1 core clock not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003a48:	b580      	push	{r7, lr}
 8003a4a:	b086      	sub	sp, #24
 8003a4c:	af00      	add	r7, sp, #0
 8003a4e:	6078      	str	r0, [r7, #4]
 8003a50:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef halstatus;
  uint32_t tickstart;
  uint32_t common_system_clock;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2b00      	cmp	r3, #0
 8003a56:	d101      	bne.n	8003a5c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003a58:	2301      	movs	r3, #1
 8003a5a:	e19c      	b.n	8003d96 <HAL_RCC_ClockConfig+0x34e>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003a5c:	4b8a      	ldr	r3, [pc, #552]	; (8003c88 <HAL_RCC_ClockConfig+0x240>)
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	f003 030f 	and.w	r3, r3, #15
 8003a64:	683a      	ldr	r2, [r7, #0]
 8003a66:	429a      	cmp	r2, r3
 8003a68:	d910      	bls.n	8003a8c <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003a6a:	4b87      	ldr	r3, [pc, #540]	; (8003c88 <HAL_RCC_ClockConfig+0x240>)
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	f023 020f 	bic.w	r2, r3, #15
 8003a72:	4985      	ldr	r1, [pc, #532]	; (8003c88 <HAL_RCC_ClockConfig+0x240>)
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	4313      	orrs	r3, r2
 8003a78:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003a7a:	4b83      	ldr	r3, [pc, #524]	; (8003c88 <HAL_RCC_ClockConfig+0x240>)
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f003 030f 	and.w	r3, r3, #15
 8003a82:	683a      	ldr	r2, [r7, #0]
 8003a84:	429a      	cmp	r2, r3
 8003a86:	d001      	beq.n	8003a8c <HAL_RCC_ClockConfig+0x44>
    {
      return HAL_ERROR;
 8003a88:	2301      	movs	r3, #1
 8003a8a:	e184      	b.n	8003d96 <HAL_RCC_ClockConfig+0x34e>

  }

  /* Increasing the BUS frequency divider */
  /*-------------------------- D1PCLK1/CDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	f003 0304 	and.w	r3, r3, #4
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d010      	beq.n	8003aba <HAL_RCC_ClockConfig+0x72>
  {
#if defined (RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	691a      	ldr	r2, [r3, #16]
 8003a9c:	4b7b      	ldr	r3, [pc, #492]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003a9e:	699b      	ldr	r3, [r3, #24]
 8003aa0:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003aa4:	429a      	cmp	r2, r3
 8003aa6:	d908      	bls.n	8003aba <HAL_RCC_ClockConfig+0x72>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003aa8:	4b78      	ldr	r3, [pc, #480]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	691b      	ldr	r3, [r3, #16]
 8003ab4:	4975      	ldr	r1, [pc, #468]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003ab6:	4313      	orrs	r3, r2
 8003ab8:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f003 0308 	and.w	r3, r3, #8
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d010      	beq.n	8003ae8 <HAL_RCC_ClockConfig+0xa0>
  {
#if defined (RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	695a      	ldr	r2, [r3, #20]
 8003aca:	4b70      	ldr	r3, [pc, #448]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003acc:	69db      	ldr	r3, [r3, #28]
 8003ace:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ad2:	429a      	cmp	r2, r3
 8003ad4:	d908      	bls.n	8003ae8 <HAL_RCC_ClockConfig+0xa0>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003ad6:	4b6d      	ldr	r3, [pc, #436]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003ad8:	69db      	ldr	r3, [r3, #28]
 8003ada:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	695b      	ldr	r3, [r3, #20]
 8003ae2:	496a      	ldr	r1, [pc, #424]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003ae4:	4313      	orrs	r3, r2
 8003ae6:	61cb      	str	r3, [r1, #28]
      MODIFY_REG(RCC->CDCFGR2, RCC_CDCFGR2_CDPPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
    }
#endif
  }
  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f003 0310 	and.w	r3, r3, #16
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d010      	beq.n	8003b16 <HAL_RCC_ClockConfig+0xce>
  {
#if defined(RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) > (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	699a      	ldr	r2, [r3, #24]
 8003af8:	4b64      	ldr	r3, [pc, #400]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003afa:	69db      	ldr	r3, [r3, #28]
 8003afc:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003b00:	429a      	cmp	r2, r3
 8003b02:	d908      	bls.n	8003b16 <HAL_RCC_ClockConfig+0xce>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003b04:	4b61      	ldr	r3, [pc, #388]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003b06:	69db      	ldr	r3, [r3, #28]
 8003b08:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	699b      	ldr	r3, [r3, #24]
 8003b10:	495e      	ldr	r1, [pc, #376]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003b12:	4313      	orrs	r3, r2
 8003b14:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f003 0320 	and.w	r3, r3, #32
 8003b1e:	2b00      	cmp	r3, #0
 8003b20:	d010      	beq.n	8003b44 <HAL_RCC_ClockConfig+0xfc>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) > (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003b22:	687b      	ldr	r3, [r7, #4]
 8003b24:	69da      	ldr	r2, [r3, #28]
 8003b26:	4b59      	ldr	r3, [pc, #356]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003b28:	6a1b      	ldr	r3, [r3, #32]
 8003b2a:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003b2e:	429a      	cmp	r2, r3
 8003b30:	d908      	bls.n	8003b44 <HAL_RCC_ClockConfig+0xfc>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003b32:	4b56      	ldr	r3, [pc, #344]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003b34:	6a1b      	ldr	r3, [r3, #32]
 8003b36:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003b3a:	687b      	ldr	r3, [r7, #4]
 8003b3c:	69db      	ldr	r3, [r3, #28]
 8003b3e:	4953      	ldr	r1, [pc, #332]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003b40:	4313      	orrs	r3, r2
 8003b42:	620b      	str	r3, [r1, #32]
    }
#endif
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	681b      	ldr	r3, [r3, #0]
 8003b48:	f003 0302 	and.w	r3, r3, #2
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d010      	beq.n	8003b72 <HAL_RCC_ClockConfig+0x12a>
  {
#if defined (RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) > (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	68da      	ldr	r2, [r3, #12]
 8003b54:	4b4d      	ldr	r3, [pc, #308]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003b56:	699b      	ldr	r3, [r3, #24]
 8003b58:	f003 030f 	and.w	r3, r3, #15
 8003b5c:	429a      	cmp	r2, r3
 8003b5e:	d908      	bls.n	8003b72 <HAL_RCC_ClockConfig+0x12a>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003b60:	4b4a      	ldr	r3, [pc, #296]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003b62:	699b      	ldr	r3, [r3, #24]
 8003b64:	f023 020f 	bic.w	r2, r3, #15
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	68db      	ldr	r3, [r3, #12]
 8003b6c:	4947      	ldr	r1, [pc, #284]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003b6e:	4313      	orrs	r3, r2
 8003b70:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*------------------------- SYSCLK Configuration -------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f003 0301 	and.w	r3, r3, #1
 8003b7a:	2b00      	cmp	r3, #0
 8003b7c:	d055      	beq.n	8003c2a <HAL_RCC_ClockConfig+0x1e2>
  {
    assert_param(IS_RCC_SYSCLK(RCC_ClkInitStruct->SYSCLKDivider));
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));
#if defined(RCC_D1CFGR_D1CPRE)
    MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1CPRE, RCC_ClkInitStruct->SYSCLKDivider);
 8003b7e:	4b43      	ldr	r3, [pc, #268]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003b80:	699b      	ldr	r3, [r3, #24]
 8003b82:	f423 6270 	bic.w	r2, r3, #3840	; 0xf00
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	689b      	ldr	r3, [r3, #8]
 8003b8a:	4940      	ldr	r1, [pc, #256]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003b8c:	4313      	orrs	r3, r2
 8003b8e:	618b      	str	r3, [r1, #24]
#else
    MODIFY_REG(RCC->CDCFGR1, RCC_CDCFGR1_CDCPRE, RCC_ClkInitStruct->SYSCLKDivider);
#endif
    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	685b      	ldr	r3, [r3, #4]
 8003b94:	2b02      	cmp	r3, #2
 8003b96:	d107      	bne.n	8003ba8 <HAL_RCC_ClockConfig+0x160>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8003b98:	4b3c      	ldr	r3, [pc, #240]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	d121      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003ba4:	2301      	movs	r3, #1
 8003ba6:	e0f6      	b.n	8003d96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	685b      	ldr	r3, [r3, #4]
 8003bac:	2b03      	cmp	r3, #3
 8003bae:	d107      	bne.n	8003bc0 <HAL_RCC_ClockConfig+0x178>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8003bb0:	4b36      	ldr	r3, [pc, #216]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003bb8:	2b00      	cmp	r3, #0
 8003bba:	d115      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bbc:	2301      	movs	r3, #1
 8003bbe:	e0ea      	b.n	8003d96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    /* CSI is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_CSI)
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	685b      	ldr	r3, [r3, #4]
 8003bc4:	2b01      	cmp	r3, #1
 8003bc6:	d107      	bne.n	8003bd8 <HAL_RCC_ClockConfig+0x190>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_CSIRDY) == 0U)
 8003bc8:	4b30      	ldr	r3, [pc, #192]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d109      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	e0de      	b.n	8003d96 <HAL_RCC_ClockConfig+0x34e>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8003bd8:	4b2c      	ldr	r3, [pc, #176]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003bda:	681b      	ldr	r3, [r3, #0]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b00      	cmp	r3, #0
 8003be2:	d101      	bne.n	8003be8 <HAL_RCC_ClockConfig+0x1a0>
      {
        return HAL_ERROR;
 8003be4:	2301      	movs	r3, #1
 8003be6:	e0d6      	b.n	8003d96 <HAL_RCC_ClockConfig+0x34e>
      }
    }
    MODIFY_REG(RCC->CFGR, RCC_CFGR_SW, RCC_ClkInitStruct->SYSCLKSource);
 8003be8:	4b28      	ldr	r3, [pc, #160]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003bea:	691b      	ldr	r3, [r3, #16]
 8003bec:	f023 0207 	bic.w	r2, r3, #7
 8003bf0:	687b      	ldr	r3, [r7, #4]
 8003bf2:	685b      	ldr	r3, [r3, #4]
 8003bf4:	4925      	ldr	r1, [pc, #148]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003bf6:	4313      	orrs	r3, r2
 8003bf8:	610b      	str	r3, [r1, #16]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8003bfa:	f7fd f9e3 	bl	8000fc4 <HAL_GetTick>
 8003bfe:	6178      	str	r0, [r7, #20]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c00:	e00a      	b.n	8003c18 <HAL_RCC_ClockConfig+0x1d0>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003c02:	f7fd f9df 	bl	8000fc4 <HAL_GetTick>
 8003c06:	4602      	mov	r2, r0
 8003c08:	697b      	ldr	r3, [r7, #20]
 8003c0a:	1ad3      	subs	r3, r2, r3
 8003c0c:	f241 3288 	movw	r2, #5000	; 0x1388
 8003c10:	4293      	cmp	r3, r2
 8003c12:	d901      	bls.n	8003c18 <HAL_RCC_ClockConfig+0x1d0>
      {
        return HAL_TIMEOUT;
 8003c14:	2303      	movs	r3, #3
 8003c16:	e0be      	b.n	8003d96 <HAL_RCC_ClockConfig+0x34e>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003c18:	4b1c      	ldr	r3, [pc, #112]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003c1a:	691b      	ldr	r3, [r3, #16]
 8003c1c:	f003 0238 	and.w	r2, r3, #56	; 0x38
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	685b      	ldr	r3, [r3, #4]
 8003c24:	00db      	lsls	r3, r3, #3
 8003c26:	429a      	cmp	r2, r3
 8003c28:	d1eb      	bne.n	8003c02 <HAL_RCC_ClockConfig+0x1ba>

  }

  /* Decreasing the BUS frequency divider */
  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003c2a:	687b      	ldr	r3, [r7, #4]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	f003 0302 	and.w	r3, r3, #2
 8003c32:	2b00      	cmp	r3, #0
 8003c34:	d010      	beq.n	8003c58 <HAL_RCC_ClockConfig+0x210>
  {
#if defined(RCC_D1CFGR_HPRE)
    if ((RCC_ClkInitStruct->AHBCLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_HPRE))
 8003c36:	687b      	ldr	r3, [r7, #4]
 8003c38:	68da      	ldr	r2, [r3, #12]
 8003c3a:	4b14      	ldr	r3, [pc, #80]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003c3c:	699b      	ldr	r3, [r3, #24]
 8003c3e:	f003 030f 	and.w	r3, r3, #15
 8003c42:	429a      	cmp	r2, r3
 8003c44:	d208      	bcs.n	8003c58 <HAL_RCC_ClockConfig+0x210>
    {
      /* Set the new HCLK clock divider */
      assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003c46:	4b11      	ldr	r3, [pc, #68]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003c48:	699b      	ldr	r3, [r3, #24]
 8003c4a:	f023 020f 	bic.w	r2, r3, #15
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	68db      	ldr	r3, [r3, #12]
 8003c52:	490e      	ldr	r1, [pc, #56]	; (8003c8c <HAL_RCC_ClockConfig+0x244>)
 8003c54:	4313      	orrs	r3, r2
 8003c56:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003c58:	4b0b      	ldr	r3, [pc, #44]	; (8003c88 <HAL_RCC_ClockConfig+0x240>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
 8003c5c:	f003 030f 	and.w	r3, r3, #15
 8003c60:	683a      	ldr	r2, [r7, #0]
 8003c62:	429a      	cmp	r2, r3
 8003c64:	d214      	bcs.n	8003c90 <HAL_RCC_ClockConfig+0x248>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003c66:	4b08      	ldr	r3, [pc, #32]	; (8003c88 <HAL_RCC_ClockConfig+0x240>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	f023 020f 	bic.w	r2, r3, #15
 8003c6e:	4906      	ldr	r1, [pc, #24]	; (8003c88 <HAL_RCC_ClockConfig+0x240>)
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	4313      	orrs	r3, r2
 8003c74:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003c76:	4b04      	ldr	r3, [pc, #16]	; (8003c88 <HAL_RCC_ClockConfig+0x240>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	f003 030f 	and.w	r3, r3, #15
 8003c7e:	683a      	ldr	r2, [r7, #0]
 8003c80:	429a      	cmp	r2, r3
 8003c82:	d005      	beq.n	8003c90 <HAL_RCC_ClockConfig+0x248>
    {
      return HAL_ERROR;
 8003c84:	2301      	movs	r3, #1
 8003c86:	e086      	b.n	8003d96 <HAL_RCC_ClockConfig+0x34e>
 8003c88:	52002000 	.word	0x52002000
 8003c8c:	58024400 	.word	0x58024400
    }
  }

  /*-------------------------- D1PCLK1/CDPCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D1PCLK1) == RCC_CLOCKTYPE_D1PCLK1)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	f003 0304 	and.w	r3, r3, #4
 8003c98:	2b00      	cmp	r3, #0
 8003c9a:	d010      	beq.n	8003cbe <HAL_RCC_ClockConfig+0x276>
  {
#if defined(RCC_D1CFGR_D1PPRE)
    if ((RCC_ClkInitStruct->APB3CLKDivider) < (RCC->D1CFGR & RCC_D1CFGR_D1PPRE))
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	691a      	ldr	r2, [r3, #16]
 8003ca0:	4b3f      	ldr	r3, [pc, #252]	; (8003da0 <HAL_RCC_ClockConfig+0x358>)
 8003ca2:	699b      	ldr	r3, [r3, #24]
 8003ca4:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003ca8:	429a      	cmp	r2, r3
 8003caa:	d208      	bcs.n	8003cbe <HAL_RCC_ClockConfig+0x276>
    {
      assert_param(IS_RCC_D1PCLK1(RCC_ClkInitStruct->APB3CLKDivider));
      MODIFY_REG(RCC->D1CFGR, RCC_D1CFGR_D1PPRE, RCC_ClkInitStruct->APB3CLKDivider);
 8003cac:	4b3c      	ldr	r3, [pc, #240]	; (8003da0 <HAL_RCC_ClockConfig+0x358>)
 8003cae:	699b      	ldr	r3, [r3, #24]
 8003cb0:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003cb4:	687b      	ldr	r3, [r7, #4]
 8003cb6:	691b      	ldr	r3, [r3, #16]
 8003cb8:	4939      	ldr	r1, [pc, #228]	; (8003da0 <HAL_RCC_ClockConfig+0x358>)
 8003cba:	4313      	orrs	r3, r2
 8003cbc:	618b      	str	r3, [r1, #24]
    }
#endif
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003cbe:	687b      	ldr	r3, [r7, #4]
 8003cc0:	681b      	ldr	r3, [r3, #0]
 8003cc2:	f003 0308 	and.w	r3, r3, #8
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d010      	beq.n	8003cec <HAL_RCC_ClockConfig+0x2a4>
  {
#if defined(RCC_D2CFGR_D2PPRE1)
    if ((RCC_ClkInitStruct->APB1CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE1))
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	695a      	ldr	r2, [r3, #20]
 8003cce:	4b34      	ldr	r3, [pc, #208]	; (8003da0 <HAL_RCC_ClockConfig+0x358>)
 8003cd0:	69db      	ldr	r3, [r3, #28]
 8003cd2:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003cd6:	429a      	cmp	r2, r3
 8003cd8:	d208      	bcs.n	8003cec <HAL_RCC_ClockConfig+0x2a4>
    {
      assert_param(IS_RCC_PCLK1(RCC_ClkInitStruct->APB1CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE1, (RCC_ClkInitStruct->APB1CLKDivider));
 8003cda:	4b31      	ldr	r3, [pc, #196]	; (8003da0 <HAL_RCC_ClockConfig+0x358>)
 8003cdc:	69db      	ldr	r3, [r3, #28]
 8003cde:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	695b      	ldr	r3, [r3, #20]
 8003ce6:	492e      	ldr	r1, [pc, #184]	; (8003da0 <HAL_RCC_ClockConfig+0x358>)
 8003ce8:	4313      	orrs	r3, r2
 8003cea:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	f003 0310 	and.w	r3, r3, #16
 8003cf4:	2b00      	cmp	r3, #0
 8003cf6:	d010      	beq.n	8003d1a <HAL_RCC_ClockConfig+0x2d2>
  {
#if defined (RCC_D2CFGR_D2PPRE2)
    if ((RCC_ClkInitStruct->APB2CLKDivider) < (RCC->D2CFGR & RCC_D2CFGR_D2PPRE2))
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	699a      	ldr	r2, [r3, #24]
 8003cfc:	4b28      	ldr	r3, [pc, #160]	; (8003da0 <HAL_RCC_ClockConfig+0x358>)
 8003cfe:	69db      	ldr	r3, [r3, #28]
 8003d00:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8003d04:	429a      	cmp	r2, r3
 8003d06:	d208      	bcs.n	8003d1a <HAL_RCC_ClockConfig+0x2d2>
    {
      assert_param(IS_RCC_PCLK2(RCC_ClkInitStruct->APB2CLKDivider));
      MODIFY_REG(RCC->D2CFGR, RCC_D2CFGR_D2PPRE2, (RCC_ClkInitStruct->APB2CLKDivider));
 8003d08:	4b25      	ldr	r3, [pc, #148]	; (8003da0 <HAL_RCC_ClockConfig+0x358>)
 8003d0a:	69db      	ldr	r3, [r3, #28]
 8003d0c:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003d10:	687b      	ldr	r3, [r7, #4]
 8003d12:	699b      	ldr	r3, [r3, #24]
 8003d14:	4922      	ldr	r1, [pc, #136]	; (8003da0 <HAL_RCC_ClockConfig+0x358>)
 8003d16:	4313      	orrs	r3, r2
 8003d18:	61cb      	str	r3, [r1, #28]
    }
#endif
  }

  /*-------------------------- D3PCLK1/SRDPCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_D3PCLK1) == RCC_CLOCKTYPE_D3PCLK1)
 8003d1a:	687b      	ldr	r3, [r7, #4]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f003 0320 	and.w	r3, r3, #32
 8003d22:	2b00      	cmp	r3, #0
 8003d24:	d010      	beq.n	8003d48 <HAL_RCC_ClockConfig+0x300>
  {
#if defined(RCC_D3CFGR_D3PPRE)
    if ((RCC_ClkInitStruct->APB4CLKDivider) < (RCC->D3CFGR & RCC_D3CFGR_D3PPRE))
 8003d26:	687b      	ldr	r3, [r7, #4]
 8003d28:	69da      	ldr	r2, [r3, #28]
 8003d2a:	4b1d      	ldr	r3, [pc, #116]	; (8003da0 <HAL_RCC_ClockConfig+0x358>)
 8003d2c:	6a1b      	ldr	r3, [r3, #32]
 8003d2e:	f003 0370 	and.w	r3, r3, #112	; 0x70
 8003d32:	429a      	cmp	r2, r3
 8003d34:	d208      	bcs.n	8003d48 <HAL_RCC_ClockConfig+0x300>
    {
      assert_param(IS_RCC_D3PCLK1(RCC_ClkInitStruct->APB4CLKDivider));
      MODIFY_REG(RCC->D3CFGR, RCC_D3CFGR_D3PPRE, (RCC_ClkInitStruct->APB4CLKDivider));
 8003d36:	4b1a      	ldr	r3, [pc, #104]	; (8003da0 <HAL_RCC_ClockConfig+0x358>)
 8003d38:	6a1b      	ldr	r3, [r3, #32]
 8003d3a:	f023 0270 	bic.w	r2, r3, #112	; 0x70
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	69db      	ldr	r3, [r3, #28]
 8003d42:	4917      	ldr	r1, [pc, #92]	; (8003da0 <HAL_RCC_ClockConfig+0x358>)
 8003d44:	4313      	orrs	r3, r2
 8003d46:	620b      	str	r3, [r1, #32]
#endif
  }

  /* Update the SystemCoreClock global variable */
#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos]) & 0x1FU);
 8003d48:	f000 f834 	bl	8003db4 <HAL_RCC_GetSysClockFreq>
 8003d4c:	4602      	mov	r2, r0
 8003d4e:	4b14      	ldr	r3, [pc, #80]	; (8003da0 <HAL_RCC_ClockConfig+0x358>)
 8003d50:	699b      	ldr	r3, [r3, #24]
 8003d52:	0a1b      	lsrs	r3, r3, #8
 8003d54:	f003 030f 	and.w	r3, r3, #15
 8003d58:	4912      	ldr	r1, [pc, #72]	; (8003da4 <HAL_RCC_ClockConfig+0x35c>)
 8003d5a:	5ccb      	ldrb	r3, [r1, r3]
 8003d5c:	f003 031f 	and.w	r3, r3, #31
 8003d60:	fa22 f303 	lsr.w	r3, r2, r3
 8003d64:	613b      	str	r3, [r7, #16]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> ((D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos]) & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 8003d66:	4b0e      	ldr	r3, [pc, #56]	; (8003da0 <HAL_RCC_ClockConfig+0x358>)
 8003d68:	699b      	ldr	r3, [r3, #24]
 8003d6a:	f003 030f 	and.w	r3, r3, #15
 8003d6e:	4a0d      	ldr	r2, [pc, #52]	; (8003da4 <HAL_RCC_ClockConfig+0x35c>)
 8003d70:	5cd3      	ldrb	r3, [r2, r3]
 8003d72:	f003 031f 	and.w	r3, r3, #31
 8003d76:	693a      	ldr	r2, [r7, #16]
 8003d78:	fa22 f303 	lsr.w	r3, r2, r3
 8003d7c:	4a0a      	ldr	r2, [pc, #40]	; (8003da8 <HAL_RCC_ClockConfig+0x360>)
 8003d7e:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 8003d80:	4a0a      	ldr	r2, [pc, #40]	; (8003dac <HAL_RCC_ClockConfig+0x364>)
 8003d82:	693b      	ldr	r3, [r7, #16]
 8003d84:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  /* Configure the source of time base considering new system clocks settings*/
  halstatus = HAL_InitTick(uwTickPrio);
 8003d86:	4b0a      	ldr	r3, [pc, #40]	; (8003db0 <HAL_RCC_ClockConfig+0x368>)
 8003d88:	681b      	ldr	r3, [r3, #0]
 8003d8a:	4618      	mov	r0, r3
 8003d8c:	f7fd f8d0 	bl	8000f30 <HAL_InitTick>
 8003d90:	4603      	mov	r3, r0
 8003d92:	73fb      	strb	r3, [r7, #15]

  return halstatus;
 8003d94:	7bfb      	ldrb	r3, [r7, #15]
}
 8003d96:	4618      	mov	r0, r3
 8003d98:	3718      	adds	r7, #24
 8003d9a:	46bd      	mov	sp, r7
 8003d9c:	bd80      	pop	{r7, pc}
 8003d9e:	bf00      	nop
 8003da0:	58024400 	.word	0x58024400
 8003da4:	08008810 	.word	0x08008810
 8003da8:	24000004 	.word	0x24000004
 8003dac:	24000000 	.word	0x24000000
 8003db0:	24000008 	.word	0x24000008

08003db4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	b089      	sub	sp, #36	; 0x24
 8003db8:	af00      	add	r7, sp, #0
  float_t fracn1, pllvco;
  uint32_t sysclockfreq;

  /* Get SYSCLK source -------------------------------------------------------*/

  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003dba:	4bb3      	ldr	r3, [pc, #716]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003dbc:	691b      	ldr	r3, [r3, #16]
 8003dbe:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003dc2:	2b18      	cmp	r3, #24
 8003dc4:	f200 8155 	bhi.w	8004072 <HAL_RCC_GetSysClockFreq+0x2be>
 8003dc8:	a201      	add	r2, pc, #4	; (adr r2, 8003dd0 <HAL_RCC_GetSysClockFreq+0x1c>)
 8003dca:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003dce:	bf00      	nop
 8003dd0:	08003e35 	.word	0x08003e35
 8003dd4:	08004073 	.word	0x08004073
 8003dd8:	08004073 	.word	0x08004073
 8003ddc:	08004073 	.word	0x08004073
 8003de0:	08004073 	.word	0x08004073
 8003de4:	08004073 	.word	0x08004073
 8003de8:	08004073 	.word	0x08004073
 8003dec:	08004073 	.word	0x08004073
 8003df0:	08003e5b 	.word	0x08003e5b
 8003df4:	08004073 	.word	0x08004073
 8003df8:	08004073 	.word	0x08004073
 8003dfc:	08004073 	.word	0x08004073
 8003e00:	08004073 	.word	0x08004073
 8003e04:	08004073 	.word	0x08004073
 8003e08:	08004073 	.word	0x08004073
 8003e0c:	08004073 	.word	0x08004073
 8003e10:	08003e61 	.word	0x08003e61
 8003e14:	08004073 	.word	0x08004073
 8003e18:	08004073 	.word	0x08004073
 8003e1c:	08004073 	.word	0x08004073
 8003e20:	08004073 	.word	0x08004073
 8003e24:	08004073 	.word	0x08004073
 8003e28:	08004073 	.word	0x08004073
 8003e2c:	08004073 	.word	0x08004073
 8003e30:	08003e67 	.word	0x08003e67
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */

      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003e34:	4b94      	ldr	r3, [pc, #592]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	f003 0320 	and.w	r3, r3, #32
 8003e3c:	2b00      	cmp	r3, #0
 8003e3e:	d009      	beq.n	8003e54 <HAL_RCC_GetSysClockFreq+0xa0>
      {
        sysclockfreq = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003e40:	4b91      	ldr	r3, [pc, #580]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	08db      	lsrs	r3, r3, #3
 8003e46:	f003 0303 	and.w	r3, r3, #3
 8003e4a:	4a90      	ldr	r2, [pc, #576]	; (800408c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e4c:	fa22 f303 	lsr.w	r3, r2, r3
 8003e50:	61bb      	str	r3, [r7, #24]
      else
      {
        sysclockfreq = (uint32_t) HSI_VALUE;
      }

      break;
 8003e52:	e111      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = (uint32_t) HSI_VALUE;
 8003e54:	4b8d      	ldr	r3, [pc, #564]	; (800408c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003e56:	61bb      	str	r3, [r7, #24]
      break;
 8003e58:	e10e      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_CSI:  /* CSI used as system clock  source */
      sysclockfreq = CSI_VALUE;
 8003e5a:	4b8d      	ldr	r3, [pc, #564]	; (8004090 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8003e5c:	61bb      	str	r3, [r7, #24]
      break;
 8003e5e:	e10b      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x2c4>

    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
      sysclockfreq = HSE_VALUE;
 8003e60:	4b8c      	ldr	r3, [pc, #560]	; (8004094 <HAL_RCC_GetSysClockFreq+0x2e0>)
 8003e62:	61bb      	str	r3, [r7, #24]
      break;
 8003e64:	e108      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x2c4>
    case RCC_CFGR_SWS_PLL1:  /* PLL1 used as system clock  source */

      /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR
      */
      pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8003e66:	4b88      	ldr	r3, [pc, #544]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e68:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e6a:	f003 0303 	and.w	r3, r3, #3
 8003e6e:	617b      	str	r3, [r7, #20]
      pllm = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4)  ;
 8003e70:	4b85      	ldr	r3, [pc, #532]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e72:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e74:	091b      	lsrs	r3, r3, #4
 8003e76:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8003e7a:	613b      	str	r3, [r7, #16]
      pllfracen = ((RCC-> PLLCFGR & RCC_PLLCFGR_PLL1FRACEN) >> RCC_PLLCFGR_PLL1FRACEN_Pos);
 8003e7c:	4b82      	ldr	r3, [pc, #520]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e80:	f003 0301 	and.w	r3, r3, #1
 8003e84:	60fb      	str	r3, [r7, #12]
      fracn1 = (float_t)(uint32_t)(pllfracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8003e86:	4b80      	ldr	r3, [pc, #512]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003e88:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8003e8a:	08db      	lsrs	r3, r3, #3
 8003e8c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8003e90:	68fa      	ldr	r2, [r7, #12]
 8003e92:	fb02 f303 	mul.w	r3, r2, r3
 8003e96:	ee07 3a90 	vmov	s15, r3
 8003e9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e9e:	edc7 7a02 	vstr	s15, [r7, #8]

      if (pllm != 0U)
 8003ea2:	693b      	ldr	r3, [r7, #16]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	f000 80e1 	beq.w	800406c <HAL_RCC_GetSysClockFreq+0x2b8>
 8003eaa:	697b      	ldr	r3, [r7, #20]
 8003eac:	2b02      	cmp	r3, #2
 8003eae:	f000 8083 	beq.w	8003fb8 <HAL_RCC_GetSysClockFreq+0x204>
 8003eb2:	697b      	ldr	r3, [r7, #20]
 8003eb4:	2b02      	cmp	r3, #2
 8003eb6:	f200 80a1 	bhi.w	8003ffc <HAL_RCC_GetSysClockFreq+0x248>
 8003eba:	697b      	ldr	r3, [r7, #20]
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <HAL_RCC_GetSysClockFreq+0x114>
 8003ec0:	697b      	ldr	r3, [r7, #20]
 8003ec2:	2b01      	cmp	r3, #1
 8003ec4:	d056      	beq.n	8003f74 <HAL_RCC_GetSysClockFreq+0x1c0>
 8003ec6:	e099      	b.n	8003ffc <HAL_RCC_GetSysClockFreq+0x248>
      {
        switch (pllsource)
        {
          case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

            if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8003ec8:	4b6f      	ldr	r3, [pc, #444]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f003 0320 	and.w	r3, r3, #32
 8003ed0:	2b00      	cmp	r3, #0
 8003ed2:	d02d      	beq.n	8003f30 <HAL_RCC_GetSysClockFreq+0x17c>
            {
              hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8003ed4:	4b6c      	ldr	r3, [pc, #432]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	08db      	lsrs	r3, r3, #3
 8003eda:	f003 0303 	and.w	r3, r3, #3
 8003ede:	4a6b      	ldr	r2, [pc, #428]	; (800408c <HAL_RCC_GetSysClockFreq+0x2d8>)
 8003ee0:	fa22 f303 	lsr.w	r3, r2, r3
 8003ee4:	607b      	str	r3, [r7, #4]
              pllvco = ((float_t)hsivalue / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	ee07 3a90 	vmov	s15, r3
 8003eec:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003ef0:	693b      	ldr	r3, [r7, #16]
 8003ef2:	ee07 3a90 	vmov	s15, r3
 8003ef6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003efa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003efe:	4b62      	ldr	r3, [pc, #392]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f02:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f06:	ee07 3a90 	vmov	s15, r3
 8003f0a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f0e:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f12:	eddf 5a61 	vldr	s11, [pc, #388]	; 8004098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f16:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f1a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f1e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f22:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f26:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f2a:	edc7 7a07 	vstr	s15, [r7, #28]
            }
            else
            {
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
            }
            break;
 8003f2e:	e087      	b.n	8004040 <HAL_RCC_GetSysClockFreq+0x28c>
              pllvco = ((float_t)HSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f30:	693b      	ldr	r3, [r7, #16]
 8003f32:	ee07 3a90 	vmov	s15, r3
 8003f36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f3a:	eddf 6a58 	vldr	s13, [pc, #352]	; 800409c <HAL_RCC_GetSysClockFreq+0x2e8>
 8003f3e:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f42:	4b51      	ldr	r3, [pc, #324]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f46:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f4a:	ee07 3a90 	vmov	s15, r3
 8003f4e:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f52:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f56:	eddf 5a50 	vldr	s11, [pc, #320]	; 8004098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f5a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003f5e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003f62:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003f66:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003f6a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f6e:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003f72:	e065      	b.n	8004040 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003f74:	693b      	ldr	r3, [r7, #16]
 8003f76:	ee07 3a90 	vmov	s15, r3
 8003f7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003f7e:	eddf 6a48 	vldr	s13, [pc, #288]	; 80040a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 8003f82:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003f86:	4b40      	ldr	r3, [pc, #256]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003f88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f8a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003f8e:	ee07 3a90 	vmov	s15, r3
 8003f92:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003f96:	ed97 6a02 	vldr	s12, [r7, #8]
 8003f9a:	eddf 5a3f 	vldr	s11, [pc, #252]	; 8004098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003f9e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fa2:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fa6:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003faa:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003fae:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003fb2:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003fb6:	e043      	b.n	8004040 <HAL_RCC_GetSysClockFreq+0x28c>

          case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
            pllvco = ((float_t)HSE_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003fb8:	693b      	ldr	r3, [r7, #16]
 8003fba:	ee07 3a90 	vmov	s15, r3
 8003fbe:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003fc2:	eddf 6a38 	vldr	s13, [pc, #224]	; 80040a4 <HAL_RCC_GetSysClockFreq+0x2f0>
 8003fc6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8003fca:	4b2f      	ldr	r3, [pc, #188]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8003fcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fce:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8003fd2:	ee07 3a90 	vmov	s15, r3
 8003fd6:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8003fda:	ed97 6a02 	vldr	s12, [r7, #8]
 8003fde:	eddf 5a2e 	vldr	s11, [pc, #184]	; 8004098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8003fe2:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8003fe6:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003fea:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8003fee:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8003ff2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ff6:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 8003ffa:	e021      	b.n	8004040 <HAL_RCC_GetSysClockFreq+0x28c>

          default:
            pllvco = ((float_t)CSI_VALUE / (float_t)pllm) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8003ffc:	693b      	ldr	r3, [r7, #16]
 8003ffe:	ee07 3a90 	vmov	s15, r3
 8004002:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004006:	eddf 6a26 	vldr	s13, [pc, #152]	; 80040a0 <HAL_RCC_GetSysClockFreq+0x2ec>
 800400a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800400e:	4b1e      	ldr	r3, [pc, #120]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004010:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004012:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004016:	ee07 3a90 	vmov	s15, r3
 800401a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800401e:	ed97 6a02 	vldr	s12, [r7, #8]
 8004022:	eddf 5a1d 	vldr	s11, [pc, #116]	; 8004098 <HAL_RCC_GetSysClockFreq+0x2e4>
 8004026:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800402a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800402e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8004032:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8004036:	ee67 7a27 	vmul.f32	s15, s14, s15
 800403a:	edc7 7a07 	vstr	s15, [r7, #28]
            break;
 800403e:	bf00      	nop
        }
        pllp = (((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9) + 1U) ;
 8004040:	4b11      	ldr	r3, [pc, #68]	; (8004088 <HAL_RCC_GetSysClockFreq+0x2d4>)
 8004042:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004044:	0a5b      	lsrs	r3, r3, #9
 8004046:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800404a:	3301      	adds	r3, #1
 800404c:	603b      	str	r3, [r7, #0]
        sysclockfreq = (uint32_t)(float_t)(pllvco / (float_t)pllp);
 800404e:	683b      	ldr	r3, [r7, #0]
 8004050:	ee07 3a90 	vmov	s15, r3
 8004054:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8004058:	edd7 6a07 	vldr	s13, [r7, #28]
 800405c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8004060:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004064:	ee17 3a90 	vmov	r3, s15
 8004068:	61bb      	str	r3, [r7, #24]
      }
      else
      {
        sysclockfreq = 0U;
      }
      break;
 800406a:	e005      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x2c4>
        sysclockfreq = 0U;
 800406c:	2300      	movs	r3, #0
 800406e:	61bb      	str	r3, [r7, #24]
      break;
 8004070:	e002      	b.n	8004078 <HAL_RCC_GetSysClockFreq+0x2c4>

    default:
      sysclockfreq = CSI_VALUE;
 8004072:	4b07      	ldr	r3, [pc, #28]	; (8004090 <HAL_RCC_GetSysClockFreq+0x2dc>)
 8004074:	61bb      	str	r3, [r7, #24]
      break;
 8004076:	bf00      	nop
  }

  return sysclockfreq;
 8004078:	69bb      	ldr	r3, [r7, #24]
}
 800407a:	4618      	mov	r0, r3
 800407c:	3724      	adds	r7, #36	; 0x24
 800407e:	46bd      	mov	sp, r7
 8004080:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004084:	4770      	bx	lr
 8004086:	bf00      	nop
 8004088:	58024400 	.word	0x58024400
 800408c:	03d09000 	.word	0x03d09000
 8004090:	003d0900 	.word	0x003d0900
 8004094:	017d7840 	.word	0x017d7840
 8004098:	46000000 	.word	0x46000000
 800409c:	4c742400 	.word	0x4c742400
 80040a0:	4a742400 	.word	0x4a742400
 80040a4:	4bbebc20 	.word	0x4bbebc20

080040a8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemD2Clock CMSIS variable is used to store System domain2 Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b082      	sub	sp, #8
 80040ac:	af00      	add	r7, sp, #0
  uint32_t common_system_clock;

#if defined(RCC_D1CFGR_D1CPRE)
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_D1CPRE) >> RCC_D1CFGR_D1CPRE_Pos] & 0x1FU);
 80040ae:	f7ff fe81 	bl	8003db4 <HAL_RCC_GetSysClockFreq>
 80040b2:	4602      	mov	r2, r0
 80040b4:	4b10      	ldr	r3, [pc, #64]	; (80040f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80040b6:	699b      	ldr	r3, [r3, #24]
 80040b8:	0a1b      	lsrs	r3, r3, #8
 80040ba:	f003 030f 	and.w	r3, r3, #15
 80040be:	490f      	ldr	r1, [pc, #60]	; (80040fc <HAL_RCC_GetHCLKFreq+0x54>)
 80040c0:	5ccb      	ldrb	r3, [r1, r3]
 80040c2:	f003 031f 	and.w	r3, r3, #31
 80040c6:	fa22 f303 	lsr.w	r3, r2, r3
 80040ca:	607b      	str	r3, [r7, #4]
#else
  common_system_clock = HAL_RCC_GetSysClockFreq() >> (D1CorePrescTable[(RCC->CDCFGR1 & RCC_CDCFGR1_CDCPRE) >> RCC_CDCFGR1_CDCPRE_Pos] & 0x1FU);
#endif

#if defined(RCC_D1CFGR_HPRE)
  SystemD2Clock = (common_system_clock >> ((D1CorePrescTable[(RCC->D1CFGR & RCC_D1CFGR_HPRE) >> RCC_D1CFGR_HPRE_Pos]) & 0x1FU));
 80040cc:	4b0a      	ldr	r3, [pc, #40]	; (80040f8 <HAL_RCC_GetHCLKFreq+0x50>)
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	f003 030f 	and.w	r3, r3, #15
 80040d4:	4a09      	ldr	r2, [pc, #36]	; (80040fc <HAL_RCC_GetHCLKFreq+0x54>)
 80040d6:	5cd3      	ldrb	r3, [r2, r3]
 80040d8:	f003 031f 	and.w	r3, r3, #31
 80040dc:	687a      	ldr	r2, [r7, #4]
 80040de:	fa22 f303 	lsr.w	r3, r2, r3
 80040e2:	4a07      	ldr	r2, [pc, #28]	; (8004100 <HAL_RCC_GetHCLKFreq+0x58>)
 80040e4:	6013      	str	r3, [r2, #0]
#endif

#if defined(DUAL_CORE) && defined(CORE_CM4)
  SystemCoreClock = SystemD2Clock;
#else
  SystemCoreClock = common_system_clock;
 80040e6:	4a07      	ldr	r2, [pc, #28]	; (8004104 <HAL_RCC_GetHCLKFreq+0x5c>)
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6013      	str	r3, [r2, #0]
#endif /* DUAL_CORE && CORE_CM4 */

  return SystemD2Clock;
 80040ec:	4b04      	ldr	r3, [pc, #16]	; (8004100 <HAL_RCC_GetHCLKFreq+0x58>)
 80040ee:	681b      	ldr	r3, [r3, #0]
}
 80040f0:	4618      	mov	r0, r3
 80040f2:	3708      	adds	r7, #8
 80040f4:	46bd      	mov	sp, r7
 80040f6:	bd80      	pop	{r7, pc}
 80040f8:	58024400 	.word	0x58024400
 80040fc:	08008810 	.word	0x08008810
 8004100:	24000004 	.word	0x24000004
 8004104:	24000000 	.word	0x24000000

08004108 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004108:	b580      	push	{r7, lr}
 800410a:	af00      	add	r7, sp, #0
#if defined (RCC_D2CFGR_D2PPRE1)
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE1) >> RCC_D2CFGR_D2PPRE1_Pos]) & 0x1FU));
 800410c:	f7ff ffcc 	bl	80040a8 <HAL_RCC_GetHCLKFreq>
 8004110:	4602      	mov	r2, r0
 8004112:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_RCC_GetPCLK1Freq+0x24>)
 8004114:	69db      	ldr	r3, [r3, #28]
 8004116:	091b      	lsrs	r3, r3, #4
 8004118:	f003 0307 	and.w	r3, r3, #7
 800411c:	4904      	ldr	r1, [pc, #16]	; (8004130 <HAL_RCC_GetPCLK1Freq+0x28>)
 800411e:	5ccb      	ldrb	r3, [r1, r3]
 8004120:	f003 031f 	and.w	r3, r3, #31
 8004124:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE1) >> RCC_CDCFGR2_CDPPRE1_Pos]) & 0x1FU));
#endif
}
 8004128:	4618      	mov	r0, r3
 800412a:	bd80      	pop	{r7, pc}
 800412c:	58024400 	.word	0x58024400
 8004130:	08008810 	.word	0x08008810

08004134 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8004134:	b580      	push	{r7, lr}
 8004136:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
#if defined(RCC_D2CFGR_D2PPRE2)
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->D2CFGR & RCC_D2CFGR_D2PPRE2) >> RCC_D2CFGR_D2PPRE2_Pos]) & 0x1FU));
 8004138:	f7ff ffb6 	bl	80040a8 <HAL_RCC_GetHCLKFreq>
 800413c:	4602      	mov	r2, r0
 800413e:	4b06      	ldr	r3, [pc, #24]	; (8004158 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004140:	69db      	ldr	r3, [r3, #28]
 8004142:	0a1b      	lsrs	r3, r3, #8
 8004144:	f003 0307 	and.w	r3, r3, #7
 8004148:	4904      	ldr	r1, [pc, #16]	; (800415c <HAL_RCC_GetPCLK2Freq+0x28>)
 800414a:	5ccb      	ldrb	r3, [r1, r3]
 800414c:	f003 031f 	and.w	r3, r3, #31
 8004150:	fa22 f303 	lsr.w	r3, r2, r3
#else
  return (HAL_RCC_GetHCLKFreq() >> ((D1CorePrescTable[(RCC->CDCFGR2 & RCC_CDCFGR2_CDPPRE2) >> RCC_CDCFGR2_CDPPRE2_Pos]) & 0x1FU));
#endif
}
 8004154:	4618      	mov	r0, r3
 8004156:	bd80      	pop	{r7, pc}
 8004158:	58024400 	.word	0x58024400
 800415c:	08008810 	.word	0x08008810

08004160 <HAL_RCCEx_PeriphCLKConfig>:
  * (*) : Available on some STM32H7 lines only.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8004160:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004164:	b0cc      	sub	sp, #304	; 0x130
 8004166:	af00      	add	r7, sp, #0
 8004168:	f8c7 011c 	str.w	r0, [r7, #284]	; 0x11c
  uint32_t tmpreg;
  uint32_t tickstart;
  HAL_StatusTypeDef ret = HAL_OK;      /* Intermediate status */
 800416c:	2300      	movs	r3, #0
 800416e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  HAL_StatusTypeDef status = HAL_OK;   /* Final status */
 8004172:	2300      	movs	r3, #0
 8004174:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

  /*---------------------------- SPDIFRX configuration -------------------------------*/

  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8004178:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800417c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004180:	f002 6400 	and.w	r4, r2, #134217728	; 0x8000000
 8004184:	2500      	movs	r5, #0
 8004186:	ea54 0305 	orrs.w	r3, r4, r5
 800418a:	d049      	beq.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xc0>
  {

    switch (PeriphClkInit->SpdifrxClockSelection)
 800418c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004190:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004192:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8004196:	d02f      	beq.n	80041f8 <HAL_RCCEx_PeriphCLKConfig+0x98>
 8004198:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800419c:	d828      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 800419e:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041a2:	d01a      	beq.n	80041da <HAL_RCCEx_PeriphCLKConfig+0x7a>
 80041a4:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80041a8:	d822      	bhi.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
 80041aa:	2b00      	cmp	r3, #0
 80041ac:	d003      	beq.n	80041b6 <HAL_RCCEx_PeriphCLKConfig+0x56>
 80041ae:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80041b2:	d007      	beq.n	80041c4 <HAL_RCCEx_PeriphCLKConfig+0x64>
 80041b4:	e01c      	b.n	80041f0 <HAL_RCCEx_PeriphCLKConfig+0x90>
    {
      case RCC_SPDIFRXCLKSOURCE_PLL:      /* PLL is used as clock source for SPDIFRX*/
        /* Enable PLL1Q Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80041b6:	4bb8      	ldr	r3, [pc, #736]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041b8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ba:	4ab7      	ldr	r2, [pc, #732]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80041bc:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c0:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041c2:	e01a      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL2: /* PLL2 is used as clock source for SPDIFRX*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80041c4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041c8:	3308      	adds	r3, #8
 80041ca:	2102      	movs	r1, #2
 80041cc:	4618      	mov	r0, r3
 80041ce:	f002 fba1 	bl	8006914 <RCCEx_PLL2_Config>
 80041d2:	4603      	mov	r3, r0
 80041d4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041d8:	e00f      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x9a>

      case RCC_SPDIFRXCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPDIFRX*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80041da:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80041de:	3328      	adds	r3, #40	; 0x28
 80041e0:	2102      	movs	r1, #2
 80041e2:	4618      	mov	r0, r3
 80041e4:	f002 fc48 	bl	8006a78 <RCCEx_PLL3_Config>
 80041e8:	4603      	mov	r3, r0
 80041ea:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPDIFRX clock source configuration done later after clock selection check */
        break;
 80041ee:	e004      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        /* Internal OSC clock is used as source of SPDIFRX clock*/
        /* SPDIFRX clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80041f0:	2301      	movs	r3, #1
 80041f2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80041f6:	e000      	b.n	80041fa <HAL_RCCEx_PeriphCLKConfig+0x9a>
        break;
 80041f8:	bf00      	nop
    }

    if (ret == HAL_OK)
 80041fa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d10a      	bne.n	8004218 <HAL_RCCEx_PeriphCLKConfig+0xb8>
    {
      /* Set the source of SPDIFRX clock*/
      __HAL_RCC_SPDIFRX_CONFIG(PeriphClkInit->SpdifrxClockSelection);
 8004202:	4ba5      	ldr	r3, [pc, #660]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004204:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004206:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 800420a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800420e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004210:	4aa1      	ldr	r2, [pc, #644]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004212:	430b      	orrs	r3, r1
 8004214:	6513      	str	r3, [r2, #80]	; 0x50
 8004216:	e003      	b.n	8004220 <HAL_RCCEx_PeriphCLKConfig+0xc0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004218:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800421c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SAI1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1)
 8004220:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004224:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004228:	f402 7880 	and.w	r8, r2, #256	; 0x100
 800422c:	f04f 0900 	mov.w	r9, #0
 8004230:	ea58 0309 	orrs.w	r3, r8, r9
 8004234:	d047      	beq.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
  {
    switch (PeriphClkInit->Sai1ClockSelection)
 8004236:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800423a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800423c:	2b04      	cmp	r3, #4
 800423e:	d82a      	bhi.n	8004296 <HAL_RCCEx_PeriphCLKConfig+0x136>
 8004240:	a201      	add	r2, pc, #4	; (adr r2, 8004248 <HAL_RCCEx_PeriphCLKConfig+0xe8>)
 8004242:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004246:	bf00      	nop
 8004248:	0800425d 	.word	0x0800425d
 800424c:	0800426b 	.word	0x0800426b
 8004250:	08004281 	.word	0x08004281
 8004254:	0800429f 	.word	0x0800429f
 8004258:	0800429f 	.word	0x0800429f
    {
      case RCC_SAI1CLKSOURCE_PLL:      /* PLL is used as clock source for SAI1*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800425c:	4b8e      	ldr	r3, [pc, #568]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800425e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004260:	4a8d      	ldr	r2, [pc, #564]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004262:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004266:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004268:	e01a      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 800426a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800426e:	3308      	adds	r3, #8
 8004270:	2100      	movs	r1, #0
 8004272:	4618      	mov	r0, r3
 8004274:	f002 fb4e 	bl	8006914 <RCCEx_PLL2_Config>
 8004278:	4603      	mov	r3, r0
 800427a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 800427e:	e00f      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x140>

      case RCC_SAI1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8004280:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004284:	3328      	adds	r3, #40	; 0x28
 8004286:	2100      	movs	r1, #0
 8004288:	4618      	mov	r0, r3
 800428a:	f002 fbf5 	bl	8006a78 <RCCEx_PLL3_Config>
 800428e:	4603      	mov	r3, r0
 8004290:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004294:	e004      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        /* HSI, HSE, or CSI oscillator is used as source of SAI1 clock */
        /* SAI1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004296:	2301      	movs	r3, #1
 8004298:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800429c:	e000      	b.n	80042a0 <HAL_RCCEx_PeriphCLKConfig+0x140>
        break;
 800429e:	bf00      	nop
    }

    if (ret == HAL_OK)
 80042a0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10a      	bne.n	80042be <HAL_RCCEx_PeriphCLKConfig+0x15e>
    {
      /* Set the source of SAI1 clock*/
      __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 80042a8:	4b7b      	ldr	r3, [pc, #492]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042ac:	f023 0107 	bic.w	r1, r3, #7
 80042b0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042b6:	4a78      	ldr	r2, [pc, #480]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80042b8:	430b      	orrs	r3, r1
 80042ba:	6513      	str	r3, [r2, #80]	; 0x50
 80042bc:	e003      	b.n	80042c6 <HAL_RCCEx_PeriphCLKConfig+0x166>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80042be:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80042c2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(SAI3)
  /*---------------------------- SAI2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI23) == RCC_PERIPHCLK_SAI23)
 80042c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042ce:	f402 7a00 	and.w	sl, r2, #512	; 0x200
 80042d2:	f04f 0b00 	mov.w	fp, #0
 80042d6:	ea5a 030b 	orrs.w	r3, sl, fp
 80042da:	d04c      	beq.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x216>
  {
    switch (PeriphClkInit->Sai23ClockSelection)
 80042dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80042e0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80042e2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042e6:	d030      	beq.n	800434a <HAL_RCCEx_PeriphCLKConfig+0x1ea>
 80042e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80042ec:	d829      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80042ee:	2bc0      	cmp	r3, #192	; 0xc0
 80042f0:	d02d      	beq.n	800434e <HAL_RCCEx_PeriphCLKConfig+0x1ee>
 80042f2:	2bc0      	cmp	r3, #192	; 0xc0
 80042f4:	d825      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80042f6:	2b80      	cmp	r3, #128	; 0x80
 80042f8:	d018      	beq.n	800432c <HAL_RCCEx_PeriphCLKConfig+0x1cc>
 80042fa:	2b80      	cmp	r3, #128	; 0x80
 80042fc:	d821      	bhi.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d002      	beq.n	8004308 <HAL_RCCEx_PeriphCLKConfig+0x1a8>
 8004302:	2b40      	cmp	r3, #64	; 0x40
 8004304:	d007      	beq.n	8004316 <HAL_RCCEx_PeriphCLKConfig+0x1b6>
 8004306:	e01c      	b.n	8004342 <HAL_RCCEx_PeriphCLKConfig+0x1e2>
    {
      case RCC_SAI23CLKSOURCE_PLL:      /* PLL is used as clock source for SAI2/3 */
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004308:	4b63      	ldr	r3, [pc, #396]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800430a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800430c:	4a62      	ldr	r2, [pc, #392]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800430e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004312:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004314:	e01c      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2/3 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004316:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800431a:	3308      	adds	r3, #8
 800431c:	2100      	movs	r1, #0
 800431e:	4618      	mov	r0, r3
 8004320:	f002 faf8 	bl	8006914 <RCCEx_PLL2_Config>
 8004324:	4603      	mov	r3, r0
 8004326:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 800432a:	e011      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>

      case RCC_SAI23CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800432c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004330:	3328      	adds	r3, #40	; 0x28
 8004332:	2100      	movs	r1, #0
 8004334:	4618      	mov	r0, r3
 8004336:	f002 fb9f 	bl	8006a78 <RCCEx_PLL3_Config>
 800433a:	4603      	mov	r3, r0
 800433c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2/3 clock source configuration done later after clock selection check */
        break;
 8004340:	e006      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        /* HSI, HSE, or CSI oscillator is used as source of SAI2/3 clock */
        /* SAI2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004342:	2301      	movs	r3, #1
 8004344:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004348:	e002      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800434a:	bf00      	nop
 800434c:	e000      	b.n	8004350 <HAL_RCCEx_PeriphCLKConfig+0x1f0>
        break;
 800434e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004350:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004354:	2b00      	cmp	r3, #0
 8004356:	d10a      	bne.n	800436e <HAL_RCCEx_PeriphCLKConfig+0x20e>
    {
      /* Set the source of SAI2/3 clock*/
      __HAL_RCC_SAI23_CONFIG(PeriphClkInit->Sai23ClockSelection);
 8004358:	4b4f      	ldr	r3, [pc, #316]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 800435a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800435c:	f423 71e0 	bic.w	r1, r3, #448	; 0x1c0
 8004360:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004364:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8004366:	4a4c      	ldr	r2, [pc, #304]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004368:	430b      	orrs	r3, r1
 800436a:	6513      	str	r3, [r2, #80]	; 0x50
 800436c:	e003      	b.n	8004376 <HAL_RCCEx_PeriphCLKConfig+0x216>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800436e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004372:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI2B*/

#if defined(SAI4)
  /*---------------------------- SAI4A configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4A) == RCC_PERIPHCLK_SAI4A)
 8004376:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800437a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800437e:	f402 6380 	and.w	r3, r2, #1024	; 0x400
 8004382:	f8c7 3110 	str.w	r3, [r7, #272]	; 0x110
 8004386:	2300      	movs	r3, #0
 8004388:	f8c7 3114 	str.w	r3, [r7, #276]	; 0x114
 800438c:	e9d7 1244 	ldrd	r1, r2, [r7, #272]	; 0x110
 8004390:	460b      	mov	r3, r1
 8004392:	4313      	orrs	r3, r2
 8004394:	d053      	beq.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x2de>
  {
    switch (PeriphClkInit->Sai4AClockSelection)
 8004396:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800439a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800439e:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043a2:	d035      	beq.n	8004410 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
 80043a4:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80043a8:	d82e      	bhi.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80043aa:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043ae:	d031      	beq.n	8004414 <HAL_RCCEx_PeriphCLKConfig+0x2b4>
 80043b0:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80043b4:	d828      	bhi.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80043b6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043ba:	d01a      	beq.n	80043f2 <HAL_RCCEx_PeriphCLKConfig+0x292>
 80043bc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80043c0:	d822      	bhi.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
 80043c2:	2b00      	cmp	r3, #0
 80043c4:	d003      	beq.n	80043ce <HAL_RCCEx_PeriphCLKConfig+0x26e>
 80043c6:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80043ca:	d007      	beq.n	80043dc <HAL_RCCEx_PeriphCLKConfig+0x27c>
 80043cc:	e01c      	b.n	8004408 <HAL_RCCEx_PeriphCLKConfig+0x2a8>
    {
      case RCC_SAI4ACLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80043ce:	4b32      	ldr	r3, [pc, #200]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043d2:	4a31      	ldr	r2, [pc, #196]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 80043d4:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80043d8:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80043da:	e01c      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80043dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043e0:	3308      	adds	r3, #8
 80043e2:	2100      	movs	r1, #0
 80043e4:	4618      	mov	r0, r3
 80043e6:	f002 fa95 	bl	8006914 <RCCEx_PLL2_Config>
 80043ea:	4603      	mov	r3, r0
 80043ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80043f0:	e011      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>

      case RCC_SAI4ACLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80043f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80043f6:	3328      	adds	r3, #40	; 0x28
 80043f8:	2100      	movs	r1, #0
 80043fa:	4618      	mov	r0, r3
 80043fc:	f002 fb3c 	bl	8006a78 <RCCEx_PLL3_Config>
 8004400:	4603      	mov	r3, r0
 8004402:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 8004406:	e006      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        /* SAI4A clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 8004408:	2301      	movs	r3, #1
 800440a:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800440e:	e002      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004410:	bf00      	nop
 8004412:	e000      	b.n	8004416 <HAL_RCCEx_PeriphCLKConfig+0x2b6>
        break;
 8004414:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004416:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800441a:	2b00      	cmp	r3, #0
 800441c:	d10b      	bne.n	8004436 <HAL_RCCEx_PeriphCLKConfig+0x2d6>
    {
      /* Set the source of SAI4A clock*/
      __HAL_RCC_SAI4A_CONFIG(PeriphClkInit->Sai4AClockSelection);
 800441e:	4b1e      	ldr	r3, [pc, #120]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004420:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004422:	f423 0160 	bic.w	r1, r3, #14680064	; 0xe00000
 8004426:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800442a:	f8d3 30ac 	ldr.w	r3, [r3, #172]	; 0xac
 800442e:	4a1a      	ldr	r2, [pc, #104]	; (8004498 <HAL_RCCEx_PeriphCLKConfig+0x338>)
 8004430:	430b      	orrs	r3, r1
 8004432:	6593      	str	r3, [r2, #88]	; 0x58
 8004434:	e003      	b.n	800443e <HAL_RCCEx_PeriphCLKConfig+0x2de>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004436:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800443a:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  /*---------------------------- SAI4B configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI4B) == RCC_PERIPHCLK_SAI4B)
 800443e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004442:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004446:	f402 6300 	and.w	r3, r2, #2048	; 0x800
 800444a:	f8c7 3108 	str.w	r3, [r7, #264]	; 0x108
 800444e:	2300      	movs	r3, #0
 8004450:	f8c7 310c 	str.w	r3, [r7, #268]	; 0x10c
 8004454:	e9d7 1242 	ldrd	r1, r2, [r7, #264]	; 0x108
 8004458:	460b      	mov	r3, r1
 800445a:	4313      	orrs	r3, r2
 800445c:	d056      	beq.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
  {
    switch (PeriphClkInit->Sai4BClockSelection)
 800445e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004462:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 8004466:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 800446a:	d038      	beq.n	80044de <HAL_RCCEx_PeriphCLKConfig+0x37e>
 800446c:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8004470:	d831      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004472:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8004476:	d034      	beq.n	80044e2 <HAL_RCCEx_PeriphCLKConfig+0x382>
 8004478:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 800447c:	d82b      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800447e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004482:	d01d      	beq.n	80044c0 <HAL_RCCEx_PeriphCLKConfig+0x360>
 8004484:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8004488:	d825      	bhi.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 800448a:	2b00      	cmp	r3, #0
 800448c:	d006      	beq.n	800449c <HAL_RCCEx_PeriphCLKConfig+0x33c>
 800448e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004492:	d00a      	beq.n	80044aa <HAL_RCCEx_PeriphCLKConfig+0x34a>
 8004494:	e01f      	b.n	80044d6 <HAL_RCCEx_PeriphCLKConfig+0x376>
 8004496:	bf00      	nop
 8004498:	58024400 	.word	0x58024400
    {
      case RCC_SAI4BCLKSOURCE_PLL:      /* PLL is used as clock source for SAI2*/
        /* Enable SAI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800449c:	4ba2      	ldr	r3, [pc, #648]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800449e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044a0:	4aa1      	ldr	r2, [pc, #644]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044a2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80044a6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044a8:	e01c      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL2: /* PLL2 is used as clock source for SAI2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80044aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044ae:	3308      	adds	r3, #8
 80044b0:	2100      	movs	r1, #0
 80044b2:	4618      	mov	r0, r3
 80044b4:	f002 fa2e 	bl	8006914 <RCCEx_PLL2_Config>
 80044b8:	4603      	mov	r3, r0
 80044ba:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI2 clock source configuration done later after clock selection check */
        break;
 80044be:	e011      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x384>

      case RCC_SAI4BCLKSOURCE_PLL3:  /* PLL3 is used as clock source for SAI2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 80044c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044c4:	3328      	adds	r3, #40	; 0x28
 80044c6:	2100      	movs	r1, #0
 80044c8:	4618      	mov	r0, r3
 80044ca:	f002 fad5 	bl	8006a78 <RCCEx_PLL3_Config>
 80044ce:	4603      	mov	r3, r0
 80044d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SAI1 clock source configuration done later after clock selection check */
        break;
 80044d4:	e006      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        /* SAI4B clock source configuration done later after clock selection check */
        break;
#endif /* RCC_VER_3_0 */

      default:
        ret = HAL_ERROR;
 80044d6:	2301      	movs	r3, #1
 80044d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80044dc:	e002      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80044de:	bf00      	nop
 80044e0:	e000      	b.n	80044e4 <HAL_RCCEx_PeriphCLKConfig+0x384>
        break;
 80044e2:	bf00      	nop
    }

    if (ret == HAL_OK)
 80044e4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80044e8:	2b00      	cmp	r3, #0
 80044ea:	d10b      	bne.n	8004504 <HAL_RCCEx_PeriphCLKConfig+0x3a4>
    {
      /* Set the source of SAI4B clock*/
      __HAL_RCC_SAI4B_CONFIG(PeriphClkInit->Sai4BClockSelection);
 80044ec:	4b8e      	ldr	r3, [pc, #568]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044ee:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80044f0:	f023 61e0 	bic.w	r1, r3, #117440512	; 0x7000000
 80044f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80044f8:	f8d3 30b0 	ldr.w	r3, [r3, #176]	; 0xb0
 80044fc:	4a8a      	ldr	r2, [pc, #552]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80044fe:	430b      	orrs	r3, r1
 8004500:	6593      	str	r3, [r2, #88]	; 0x58
 8004502:	e003      	b.n	800450c <HAL_RCCEx_PeriphCLKConfig+0x3ac>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004504:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004508:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif  /*SAI4*/

#if defined(QUADSPI)
  /*---------------------------- QSPI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_QSPI) == RCC_PERIPHCLK_QSPI)
 800450c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004510:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004514:	f002 7300 	and.w	r3, r2, #33554432	; 0x2000000
 8004518:	f8c7 3100 	str.w	r3, [r7, #256]	; 0x100
 800451c:	2300      	movs	r3, #0
 800451e:	f8c7 3104 	str.w	r3, [r7, #260]	; 0x104
 8004522:	e9d7 1240 	ldrd	r1, r2, [r7, #256]	; 0x100
 8004526:	460b      	mov	r3, r1
 8004528:	4313      	orrs	r3, r2
 800452a:	d03a      	beq.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
  {
    switch (PeriphClkInit->QspiClockSelection)
 800452c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004530:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004532:	2b30      	cmp	r3, #48	; 0x30
 8004534:	d01f      	beq.n	8004576 <HAL_RCCEx_PeriphCLKConfig+0x416>
 8004536:	2b30      	cmp	r3, #48	; 0x30
 8004538:	d819      	bhi.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 800453a:	2b20      	cmp	r3, #32
 800453c:	d00c      	beq.n	8004558 <HAL_RCCEx_PeriphCLKConfig+0x3f8>
 800453e:	2b20      	cmp	r3, #32
 8004540:	d815      	bhi.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x40e>
 8004542:	2b00      	cmp	r3, #0
 8004544:	d019      	beq.n	800457a <HAL_RCCEx_PeriphCLKConfig+0x41a>
 8004546:	2b10      	cmp	r3, #16
 8004548:	d111      	bne.n	800456e <HAL_RCCEx_PeriphCLKConfig+0x40e>
    {
      case RCC_QSPICLKSOURCE_PLL:      /* PLL is used as clock source for QSPI*/
        /* Enable QSPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800454a:	4b77      	ldr	r3, [pc, #476]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800454c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454e:	4a76      	ldr	r2, [pc, #472]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004550:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004554:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* QSPI clock source configuration done later after clock selection check */
        break;
 8004556:	e011      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x41c>

      case RCC_QSPICLKSOURCE_PLL2: /* PLL2 is used as clock source for QSPI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004558:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800455c:	3308      	adds	r3, #8
 800455e:	2102      	movs	r1, #2
 8004560:	4618      	mov	r0, r3
 8004562:	f002 f9d7 	bl	8006914 <RCCEx_PLL2_Config>
 8004566:	4603      	mov	r3, r0
 8004568:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* QSPI clock source configuration done later after clock selection check */
        break;
 800456c:	e006      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x41c>
      case RCC_QSPICLKSOURCE_D1HCLK:
        /* Domain1 HCLK  clock selected as QSPI kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800456e:	2301      	movs	r3, #1
 8004570:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004574:	e002      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 8004576:	bf00      	nop
 8004578:	e000      	b.n	800457c <HAL_RCCEx_PeriphCLKConfig+0x41c>
        break;
 800457a:	bf00      	nop
    }

    if (ret == HAL_OK)
 800457c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004580:	2b00      	cmp	r3, #0
 8004582:	d10a      	bne.n	800459a <HAL_RCCEx_PeriphCLKConfig+0x43a>
    {
      /* Set the source of QSPI clock*/
      __HAL_RCC_QSPI_CONFIG(PeriphClkInit->QspiClockSelection);
 8004584:	4b68      	ldr	r3, [pc, #416]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004586:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004588:	f023 0130 	bic.w	r1, r3, #48	; 0x30
 800458c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004590:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004592:	4a65      	ldr	r2, [pc, #404]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004594:	430b      	orrs	r3, r1
 8004596:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004598:	e003      	b.n	80045a2 <HAL_RCCEx_PeriphCLKConfig+0x442>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800459a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800459e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif  /*OCTOSPI*/

  /*---------------------------- SPI1/2/3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI123) == RCC_PERIPHCLK_SPI123)
 80045a2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045aa:	f402 5380 	and.w	r3, r2, #4096	; 0x1000
 80045ae:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
 80045b2:	2300      	movs	r3, #0
 80045b4:	f8c7 30fc 	str.w	r3, [r7, #252]	; 0xfc
 80045b8:	e9d7 123e 	ldrd	r1, r2, [r7, #248]	; 0xf8
 80045bc:	460b      	mov	r3, r1
 80045be:	4313      	orrs	r3, r2
 80045c0:	d051      	beq.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x506>
  {
    switch (PeriphClkInit->Spi123ClockSelection)
 80045c2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80045c6:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 80045c8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045cc:	d035      	beq.n	800463a <HAL_RCCEx_PeriphCLKConfig+0x4da>
 80045ce:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80045d2:	d82e      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80045d4:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045d8:	d031      	beq.n	800463e <HAL_RCCEx_PeriphCLKConfig+0x4de>
 80045da:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 80045de:	d828      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80045e0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045e4:	d01a      	beq.n	800461c <HAL_RCCEx_PeriphCLKConfig+0x4bc>
 80045e6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80045ea:	d822      	bhi.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
 80045ec:	2b00      	cmp	r3, #0
 80045ee:	d003      	beq.n	80045f8 <HAL_RCCEx_PeriphCLKConfig+0x498>
 80045f0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80045f4:	d007      	beq.n	8004606 <HAL_RCCEx_PeriphCLKConfig+0x4a6>
 80045f6:	e01c      	b.n	8004632 <HAL_RCCEx_PeriphCLKConfig+0x4d2>
    {
      case RCC_SPI123CLKSOURCE_PLL:      /* PLL is used as clock source for SPI1/2/3 */
        /* Enable SPI Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80045f8:	4b4b      	ldr	r3, [pc, #300]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80045fc:	4a4a      	ldr	r2, [pc, #296]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 80045fe:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004602:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004604:	e01c      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004606:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800460a:	3308      	adds	r3, #8
 800460c:	2100      	movs	r1, #0
 800460e:	4618      	mov	r0, r3
 8004610:	f002 f980 	bl	8006914 <RCCEx_PLL2_Config>
 8004614:	4603      	mov	r3, r0
 8004616:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 800461a:	e011      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>

      case RCC_SPI123CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI1/2/3 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 800461c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004620:	3328      	adds	r3, #40	; 0x28
 8004622:	2100      	movs	r1, #0
 8004624:	4618      	mov	r0, r3
 8004626:	f002 fa27 	bl	8006a78 <RCCEx_PLL3_Config>
 800462a:	4603      	mov	r3, r0
 800462c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;
 8004630:	e006      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        /* HSI, HSE, or CSI oscillator is used as source of SPI1/2/3 clock */
        /* SPI1/2/3 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004632:	2301      	movs	r3, #1
 8004634:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004638:	e002      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800463a:	bf00      	nop
 800463c:	e000      	b.n	8004640 <HAL_RCCEx_PeriphCLKConfig+0x4e0>
        break;
 800463e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004640:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004644:	2b00      	cmp	r3, #0
 8004646:	d10a      	bne.n	800465e <HAL_RCCEx_PeriphCLKConfig+0x4fe>
    {
      /* Set the source of SPI1/2/3 clock*/
      __HAL_RCC_SPI123_CONFIG(PeriphClkInit->Spi123ClockSelection);
 8004648:	4b37      	ldr	r3, [pc, #220]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 800464a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800464c:	f423 41e0 	bic.w	r1, r3, #28672	; 0x7000
 8004650:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004654:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8004656:	4a34      	ldr	r2, [pc, #208]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004658:	430b      	orrs	r3, r1
 800465a:	6513      	str	r3, [r2, #80]	; 0x50
 800465c:	e003      	b.n	8004666 <HAL_RCCEx_PeriphCLKConfig+0x506>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800465e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004662:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI4/5 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI45) == RCC_PERIPHCLK_SPI45)
 8004666:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800466a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800466e:	f402 5300 	and.w	r3, r2, #8192	; 0x2000
 8004672:	f8c7 30f0 	str.w	r3, [r7, #240]	; 0xf0
 8004676:	2300      	movs	r3, #0
 8004678:	f8c7 30f4 	str.w	r3, [r7, #244]	; 0xf4
 800467c:	e9d7 123c 	ldrd	r1, r2, [r7, #240]	; 0xf0
 8004680:	460b      	mov	r3, r1
 8004682:	4313      	orrs	r3, r2
 8004684:	d056      	beq.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
  {
    switch (PeriphClkInit->Spi45ClockSelection)
 8004686:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800468a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800468c:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004690:	d033      	beq.n	80046fa <HAL_RCCEx_PeriphCLKConfig+0x59a>
 8004692:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004696:	d82c      	bhi.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 8004698:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 800469c:	d02f      	beq.n	80046fe <HAL_RCCEx_PeriphCLKConfig+0x59e>
 800469e:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 80046a2:	d826      	bhi.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80046a4:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046a8:	d02b      	beq.n	8004702 <HAL_RCCEx_PeriphCLKConfig+0x5a2>
 80046aa:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 80046ae:	d820      	bhi.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80046b0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046b4:	d012      	beq.n	80046dc <HAL_RCCEx_PeriphCLKConfig+0x57c>
 80046b6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80046ba:	d81a      	bhi.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
 80046bc:	2b00      	cmp	r3, #0
 80046be:	d022      	beq.n	8004706 <HAL_RCCEx_PeriphCLKConfig+0x5a6>
 80046c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80046c4:	d115      	bne.n	80046f2 <HAL_RCCEx_PeriphCLKConfig+0x592>
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI4/5 */

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80046c6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046ca:	3308      	adds	r3, #8
 80046cc:	2101      	movs	r1, #1
 80046ce:	4618      	mov	r0, r3
 80046d0:	f002 f920 	bl	8006914 <RCCEx_PLL2_Config>
 80046d4:	4603      	mov	r3, r0
 80046d6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80046da:	e015      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
      case RCC_SPI45CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80046dc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80046e0:	3328      	adds	r3, #40	; 0x28
 80046e2:	2101      	movs	r1, #1
 80046e4:	4618      	mov	r0, r3
 80046e6:	f002 f9c7 	bl	8006a78 <RCCEx_PLL3_Config>
 80046ea:	4603      	mov	r3, r0
 80046ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;
 80046f0:	e00a      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        /* HSE,  oscillator is used as source of SPI4/5 clock */
        /* SPI4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80046f2:	2301      	movs	r3, #1
 80046f4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80046f8:	e006      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046fa:	bf00      	nop
 80046fc:	e004      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 80046fe:	bf00      	nop
 8004700:	e002      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004702:	bf00      	nop
 8004704:	e000      	b.n	8004708 <HAL_RCCEx_PeriphCLKConfig+0x5a8>
        break;
 8004706:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004708:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800470c:	2b00      	cmp	r3, #0
 800470e:	d10d      	bne.n	800472c <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* Set the source of SPI4/5 clock*/
      __HAL_RCC_SPI45_CONFIG(PeriphClkInit->Spi45ClockSelection);
 8004710:	4b05      	ldr	r3, [pc, #20]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004712:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004714:	f423 21e0 	bic.w	r1, r3, #458752	; 0x70000
 8004718:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800471c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800471e:	4a02      	ldr	r2, [pc, #8]	; (8004728 <HAL_RCCEx_PeriphCLKConfig+0x5c8>)
 8004720:	430b      	orrs	r3, r1
 8004722:	6513      	str	r3, [r2, #80]	; 0x50
 8004724:	e006      	b.n	8004734 <HAL_RCCEx_PeriphCLKConfig+0x5d4>
 8004726:	bf00      	nop
 8004728:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 800472c:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004730:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- SPI6 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPI6) == RCC_PERIPHCLK_SPI6)
 8004734:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004738:	e9d3 2300 	ldrd	r2, r3, [r3]
 800473c:	f402 4380 	and.w	r3, r2, #16384	; 0x4000
 8004740:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8004744:	2300      	movs	r3, #0
 8004746:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
 800474a:	e9d7 123a 	ldrd	r1, r2, [r7, #232]	; 0xe8
 800474e:	460b      	mov	r3, r1
 8004750:	4313      	orrs	r3, r2
 8004752:	d055      	beq.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
  {
    switch (PeriphClkInit->Spi6ClockSelection)
 8004754:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004758:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 800475c:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004760:	d033      	beq.n	80047ca <HAL_RCCEx_PeriphCLKConfig+0x66a>
 8004762:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004766:	d82c      	bhi.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004768:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800476c:	d02f      	beq.n	80047ce <HAL_RCCEx_PeriphCLKConfig+0x66e>
 800476e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004772:	d826      	bhi.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004774:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004778:	d02b      	beq.n	80047d2 <HAL_RCCEx_PeriphCLKConfig+0x672>
 800477a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 800477e:	d820      	bhi.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 8004780:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004784:	d012      	beq.n	80047ac <HAL_RCCEx_PeriphCLKConfig+0x64c>
 8004786:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800478a:	d81a      	bhi.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
 800478c:	2b00      	cmp	r3, #0
 800478e:	d022      	beq.n	80047d6 <HAL_RCCEx_PeriphCLKConfig+0x676>
 8004790:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004794:	d115      	bne.n	80047c2 <HAL_RCCEx_PeriphCLKConfig+0x662>
        /* SPI6 clock source configuration done later after clock selection check */
        break;

      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is used as clock source for SPI6*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004796:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800479a:	3308      	adds	r3, #8
 800479c:	2101      	movs	r1, #1
 800479e:	4618      	mov	r0, r3
 80047a0:	f002 f8b8 	bl	8006914 <RCCEx_PLL2_Config>
 80047a4:	4603      	mov	r3, r0
 80047a6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80047aa:	e015      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
      case RCC_SPI6CLKSOURCE_PLL3:  /* PLL3 is used as clock source for SPI6*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 80047ac:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047b0:	3328      	adds	r3, #40	; 0x28
 80047b2:	2101      	movs	r1, #1
 80047b4:	4618      	mov	r0, r3
 80047b6:	f002 f95f 	bl	8006a78 <RCCEx_PLL3_Config>
 80047ba:	4603      	mov	r3, r0
 80047bc:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* SPI6 clock source configuration done later after clock selection check */
        break;
 80047c0:	e00a      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        /* SPI6 clock source configuration done later after clock selection check */
        break;
#endif

      default:
        ret = HAL_ERROR;
 80047c2:	2301      	movs	r3, #1
 80047c4:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80047c8:	e006      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047ca:	bf00      	nop
 80047cc:	e004      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047ce:	bf00      	nop
 80047d0:	e002      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047d2:	bf00      	nop
 80047d4:	e000      	b.n	80047d8 <HAL_RCCEx_PeriphCLKConfig+0x678>
        break;
 80047d6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80047d8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80047dc:	2b00      	cmp	r3, #0
 80047de:	d10b      	bne.n	80047f8 <HAL_RCCEx_PeriphCLKConfig+0x698>
    {
      /* Set the source of SPI6 clock*/
      __HAL_RCC_SPI6_CONFIG(PeriphClkInit->Spi6ClockSelection);
 80047e0:	4bb6      	ldr	r3, [pc, #728]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047e2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80047e4:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 80047e8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80047ec:	f8d3 30b4 	ldr.w	r3, [r3, #180]	; 0xb4
 80047f0:	4ab2      	ldr	r2, [pc, #712]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80047f2:	430b      	orrs	r3, r1
 80047f4:	6593      	str	r3, [r2, #88]	; 0x58
 80047f6:	e003      	b.n	8004800 <HAL_RCCEx_PeriphCLKConfig+0x6a0>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80047f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80047fc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(DSI)
  /*---------------------------- DSI configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DSI) == RCC_PERIPHCLK_DSI)
 8004800:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004808:	f002 6380 	and.w	r3, r2, #67108864	; 0x4000000
 800480c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8004810:	2300      	movs	r3, #0
 8004812:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8004816:	e9d7 1238 	ldrd	r1, r2, [r7, #224]	; 0xe0
 800481a:	460b      	mov	r3, r1
 800481c:	4313      	orrs	r3, r2
 800481e:	d02a      	beq.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x716>
  {
    switch (PeriphClkInit->DsiClockSelection)
 8004820:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004824:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004826:	2b00      	cmp	r3, #0
 8004828:	d011      	beq.n	800484e <HAL_RCCEx_PeriphCLKConfig+0x6ee>
 800482a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800482e:	d10a      	bne.n	8004846 <HAL_RCCEx_PeriphCLKConfig+0x6e6>
    {

      case RCC_DSICLKSOURCE_PLL2: /* PLL2 is used as clock source for DSI*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004830:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004834:	3308      	adds	r3, #8
 8004836:	2101      	movs	r1, #1
 8004838:	4618      	mov	r0, r3
 800483a:	f002 f86b 	bl	8006914 <RCCEx_PLL2_Config>
 800483e:	4603      	mov	r3, r0
 8004840:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* DSI clock source configuration done later after clock selection check */
        break;
 8004844:	e004      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        /* PHY is used as clock source for DSI*/
        /* DSI clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800484c:	e000      	b.n	8004850 <HAL_RCCEx_PeriphCLKConfig+0x6f0>
        break;
 800484e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004850:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004854:	2b00      	cmp	r3, #0
 8004856:	d10a      	bne.n	800486e <HAL_RCCEx_PeriphCLKConfig+0x70e>
    {
      /* Set the source of DSI clock*/
      __HAL_RCC_DSI_CONFIG(PeriphClkInit->DsiClockSelection);
 8004858:	4b98      	ldr	r3, [pc, #608]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800485a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800485c:	f423 7180 	bic.w	r1, r3, #256	; 0x100
 8004860:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004864:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004866:	4a95      	ldr	r2, [pc, #596]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004868:	430b      	orrs	r3, r1
 800486a:	64d3      	str	r3, [r2, #76]	; 0x4c
 800486c:	e003      	b.n	8004876 <HAL_RCCEx_PeriphCLKConfig+0x716>
    }
    else
    {
      /* set overall return value */
      status = ret;
 800486e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004872:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
  }
#endif /*DSI*/

#if defined(FDCAN1) || defined(FDCAN2)
  /*---------------------------- FDCAN configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FDCAN) == RCC_PERIPHCLK_FDCAN)
 8004876:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800487a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800487e:	f402 4300 	and.w	r3, r2, #32768	; 0x8000
 8004882:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8004886:	2300      	movs	r3, #0
 8004888:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 800488c:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8004890:	460b      	mov	r3, r1
 8004892:	4313      	orrs	r3, r2
 8004894:	d037      	beq.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
  {
    switch (PeriphClkInit->FdcanClockSelection)
 8004896:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800489a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800489c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048a0:	d00e      	beq.n	80048c0 <HAL_RCCEx_PeriphCLKConfig+0x760>
 80048a2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80048a6:	d816      	bhi.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x776>
 80048a8:	2b00      	cmp	r3, #0
 80048aa:	d018      	beq.n	80048de <HAL_RCCEx_PeriphCLKConfig+0x77e>
 80048ac:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80048b0:	d111      	bne.n	80048d6 <HAL_RCCEx_PeriphCLKConfig+0x776>
    {
      case RCC_FDCANCLKSOURCE_PLL:      /* PLL is used as clock source for FDCAN*/
        /* Enable FDCAN Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80048b2:	4b82      	ldr	r3, [pc, #520]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80048b6:	4a81      	ldr	r2, [pc, #516]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048b8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80048bc:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80048be:	e00f      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x780>

      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is used as clock source for FDCAN*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80048c0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048c4:	3308      	adds	r3, #8
 80048c6:	2101      	movs	r1, #1
 80048c8:	4618      	mov	r0, r3
 80048ca:	f002 f823 	bl	8006914 <RCCEx_PLL2_Config>
 80048ce:	4603      	mov	r3, r0
 80048d0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FDCAN clock source configuration done later after clock selection check */
        break;
 80048d4:	e004      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        /* HSE is used as clock source for FDCAN*/
        /* FDCAN clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80048d6:	2301      	movs	r3, #1
 80048d8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80048dc:	e000      	b.n	80048e0 <HAL_RCCEx_PeriphCLKConfig+0x780>
        break;
 80048de:	bf00      	nop
    }

    if (ret == HAL_OK)
 80048e0:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80048e4:	2b00      	cmp	r3, #0
 80048e6:	d10a      	bne.n	80048fe <HAL_RCCEx_PeriphCLKConfig+0x79e>
    {
      /* Set the source of FDCAN clock*/
      __HAL_RCC_FDCAN_CONFIG(PeriphClkInit->FdcanClockSelection);
 80048e8:	4b74      	ldr	r3, [pc, #464]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80048ec:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 80048f0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80048f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80048f6:	4a71      	ldr	r2, [pc, #452]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 80048f8:	430b      	orrs	r3, r1
 80048fa:	6513      	str	r3, [r2, #80]	; 0x50
 80048fc:	e003      	b.n	8004906 <HAL_RCCEx_PeriphCLKConfig+0x7a6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80048fe:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004902:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /*FDCAN1 || FDCAN2*/

  /*---------------------------- FMC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_FMC) == RCC_PERIPHCLK_FMC)
 8004906:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800490a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800490e:	f002 7380 	and.w	r3, r2, #16777216	; 0x1000000
 8004912:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8004916:	2300      	movs	r3, #0
 8004918:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 800491c:	e9d7 1234 	ldrd	r1, r2, [r7, #208]	; 0xd0
 8004920:	460b      	mov	r3, r1
 8004922:	4313      	orrs	r3, r2
 8004924:	d03a      	beq.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x83c>
  {
    switch (PeriphClkInit->FmcClockSelection)
 8004926:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800492a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800492c:	2b03      	cmp	r3, #3
 800492e:	d81d      	bhi.n	800496c <HAL_RCCEx_PeriphCLKConfig+0x80c>
 8004930:	a201      	add	r2, pc, #4	; (adr r2, 8004938 <HAL_RCCEx_PeriphCLKConfig+0x7d8>)
 8004932:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004936:	bf00      	nop
 8004938:	08004975 	.word	0x08004975
 800493c:	08004949 	.word	0x08004949
 8004940:	08004957 	.word	0x08004957
 8004944:	08004975 	.word	0x08004975
    {
      case RCC_FMCCLKSOURCE_PLL:      /* PLL is used as clock source for FMC*/
        /* Enable FMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 8004948:	4b5c      	ldr	r3, [pc, #368]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800494a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800494c:	4a5b      	ldr	r2, [pc, #364]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800494e:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8004952:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* FMC clock source configuration done later after clock selection check */
        break;
 8004954:	e00f      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x816>

      case RCC_FMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for FMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 8004956:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800495a:	3308      	adds	r3, #8
 800495c:	2102      	movs	r1, #2
 800495e:	4618      	mov	r0, r3
 8004960:	f001 ffd8 	bl	8006914 <RCCEx_PLL2_Config>
 8004964:	4603      	mov	r3, r0
 8004966:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* FMC clock source configuration done later after clock selection check */
        break;
 800496a:	e004      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x816>
      case RCC_FMCCLKSOURCE_HCLK:
        /* D1/CD HCLK  clock selected as FMC kernel peripheral clock */
        break;

      default:
        ret = HAL_ERROR;
 800496c:	2301      	movs	r3, #1
 800496e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004972:	e000      	b.n	8004976 <HAL_RCCEx_PeriphCLKConfig+0x816>
        break;
 8004974:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004976:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800497a:	2b00      	cmp	r3, #0
 800497c:	d10a      	bne.n	8004994 <HAL_RCCEx_PeriphCLKConfig+0x834>
    {
      /* Set the source of FMC clock*/
      __HAL_RCC_FMC_CONFIG(PeriphClkInit->FmcClockSelection);
 800497e:	4b4f      	ldr	r3, [pc, #316]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004980:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004982:	f023 0103 	bic.w	r1, r3, #3
 8004986:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800498a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800498c:	4a4b      	ldr	r2, [pc, #300]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 800498e:	430b      	orrs	r3, r1
 8004990:	64d3      	str	r3, [r2, #76]	; 0x4c
 8004992:	e003      	b.n	800499c <HAL_RCCEx_PeriphCLKConfig+0x83c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004994:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004998:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- RTC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 800499c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80049a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80049a4:	f402 0380 	and.w	r3, r2, #4194304	; 0x400000
 80049a8:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80049ac:	2300      	movs	r3, #0
 80049ae:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80049b2:	e9d7 1232 	ldrd	r1, r2, [r7, #200]	; 0xc8
 80049b6:	460b      	mov	r3, r1
 80049b8:	4313      	orrs	r3, r2
 80049ba:	f000 80a0 	beq.w	8004afe <HAL_RCCEx_PeriphCLKConfig+0x99e>
  {
    /* check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable write access to Backup domain */
    SET_BIT(PWR->CR1, PWR_CR1_DBP);
 80049be:	4b40      	ldr	r3, [pc, #256]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	4a3f      	ldr	r2, [pc, #252]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80049c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80049c8:	6013      	str	r3, [r2, #0]

    /* Wait for Backup domain Write protection disable */
    tickstart = HAL_GetTick();
 80049ca:	f7fc fafb 	bl	8000fc4 <HAL_GetTick>
 80049ce:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049d2:	e00b      	b.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x88c>
    {
      if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80049d4:	f7fc faf6 	bl	8000fc4 <HAL_GetTick>
 80049d8:	4602      	mov	r2, r0
 80049da:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 80049de:	1ad3      	subs	r3, r2, r3
 80049e0:	2b64      	cmp	r3, #100	; 0x64
 80049e2:	d903      	bls.n	80049ec <HAL_RCCEx_PeriphCLKConfig+0x88c>
      {
        ret = HAL_TIMEOUT;
 80049e4:	2303      	movs	r3, #3
 80049e6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80049ea:	e005      	b.n	80049f8 <HAL_RCCEx_PeriphCLKConfig+0x898>
    while ((PWR->CR1 & PWR_CR1_DBP) == 0U)
 80049ec:	4b34      	ldr	r3, [pc, #208]	; (8004ac0 <HAL_RCCEx_PeriphCLKConfig+0x960>)
 80049ee:	681b      	ldr	r3, [r3, #0]
 80049f0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d0ed      	beq.n	80049d4 <HAL_RCCEx_PeriphCLKConfig+0x874>
      }
    }

    if (ret == HAL_OK)
 80049f8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d17a      	bne.n	8004af6 <HAL_RCCEx_PeriphCLKConfig+0x996>
    {
      /* Reset the Backup domain only if the RTC Clock source selection is modified */
      if ((RCC->BDCR & RCC_BDCR_RTCSEL) != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL))
 8004a00:	4b2e      	ldr	r3, [pc, #184]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a02:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8004a04:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a08:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a0c:	4053      	eors	r3, r2
 8004a0e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a12:	2b00      	cmp	r3, #0
 8004a14:	d015      	beq.n	8004a42 <HAL_RCCEx_PeriphCLKConfig+0x8e2>
      {
        /* Store the content of BDCR register before the reset of Backup Domain */
        tmpreg = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8004a16:	4b29      	ldr	r3, [pc, #164]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a1a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a1e:	f8c7 3124 	str.w	r3, [r7, #292]	; 0x124
        /* RTC Clock selection can be changed only if the Backup Domain is reset */
        __HAL_RCC_BACKUPRESET_FORCE();
 8004a22:	4b26      	ldr	r3, [pc, #152]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a24:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a26:	4a25      	ldr	r2, [pc, #148]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a28:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a2c:	6713      	str	r3, [r2, #112]	; 0x70
        __HAL_RCC_BACKUPRESET_RELEASE();
 8004a2e:	4b23      	ldr	r3, [pc, #140]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a32:	4a22      	ldr	r2, [pc, #136]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a34:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004a38:	6713      	str	r3, [r2, #112]	; 0x70
        /* Restore the Content of BDCR register */
        RCC->BDCR = tmpreg;
 8004a3a:	4a20      	ldr	r2, [pc, #128]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a3c:	f8d7 3124 	ldr.w	r3, [r7, #292]	; 0x124
 8004a40:	6713      	str	r3, [r2, #112]	; 0x70
      }

      /* If LSE is selected as RTC clock source (and enabled prior to Backup Domain reset), wait for LSE reactivation */
      if (PeriphClkInit->RTCClockSelection == RCC_RTCCLKSOURCE_LSE)
 8004a42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a46:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a4a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8004a4e:	d118      	bne.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x922>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a50:	f7fc fab8 	bl	8000fc4 <HAL_GetTick>
 8004a54:	f8c7 0128 	str.w	r0, [r7, #296]	; 0x128

        /* Wait till LSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a58:	e00d      	b.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x916>
        {
          if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004a5a:	f7fc fab3 	bl	8000fc4 <HAL_GetTick>
 8004a5e:	4602      	mov	r2, r0
 8004a60:	f8d7 3128 	ldr.w	r3, [r7, #296]	; 0x128
 8004a64:	1ad2      	subs	r2, r2, r3
 8004a66:	f241 3388 	movw	r3, #5000	; 0x1388
 8004a6a:	429a      	cmp	r2, r3
 8004a6c:	d903      	bls.n	8004a76 <HAL_RCCEx_PeriphCLKConfig+0x916>
          {
            ret = HAL_TIMEOUT;
 8004a6e:	2303      	movs	r3, #3
 8004a70:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
            break;
 8004a74:	e005      	b.n	8004a82 <HAL_RCCEx_PeriphCLKConfig+0x922>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8004a76:	4b11      	ldr	r3, [pc, #68]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a78:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8004a7a:	f003 0302 	and.w	r3, r3, #2
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d0eb      	beq.n	8004a5a <HAL_RCCEx_PeriphCLKConfig+0x8fa>
          }
        }
      }

      if (ret == HAL_OK)
 8004a82:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d130      	bne.n	8004aec <HAL_RCCEx_PeriphCLKConfig+0x98c>
      {
        __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8004a8a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004a8e:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004a92:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004a96:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 8004a9a:	d115      	bne.n	8004ac8 <HAL_RCCEx_PeriphCLKConfig+0x968>
 8004a9c:	4b07      	ldr	r3, [pc, #28]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004a9e:	691b      	ldr	r3, [r3, #16]
 8004aa0:	f423 517c 	bic.w	r1, r3, #16128	; 0x3f00
 8004aa4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004aa8:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004aac:	091a      	lsrs	r2, r3, #4
 8004aae:	4b05      	ldr	r3, [pc, #20]	; (8004ac4 <HAL_RCCEx_PeriphCLKConfig+0x964>)
 8004ab0:	4013      	ands	r3, r2
 8004ab2:	4a02      	ldr	r2, [pc, #8]	; (8004abc <HAL_RCCEx_PeriphCLKConfig+0x95c>)
 8004ab4:	430b      	orrs	r3, r1
 8004ab6:	6113      	str	r3, [r2, #16]
 8004ab8:	e00c      	b.n	8004ad4 <HAL_RCCEx_PeriphCLKConfig+0x974>
 8004aba:	bf00      	nop
 8004abc:	58024400 	.word	0x58024400
 8004ac0:	58024800 	.word	0x58024800
 8004ac4:	00ffffcf 	.word	0x00ffffcf
 8004ac8:	4bd4      	ldr	r3, [pc, #848]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004aca:	691b      	ldr	r3, [r3, #16]
 8004acc:	4ad3      	ldr	r2, [pc, #844]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004ace:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8004ad2:	6113      	str	r3, [r2, #16]
 8004ad4:	4bd1      	ldr	r3, [pc, #836]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004ad6:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8004ad8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004adc:	f8d3 30b8 	ldr.w	r3, [r3, #184]	; 0xb8
 8004ae0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ae4:	4acd      	ldr	r2, [pc, #820]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004ae6:	430b      	orrs	r3, r1
 8004ae8:	6713      	str	r3, [r2, #112]	; 0x70
 8004aea:	e008      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
      else
      {
        /* set overall return value */
        status = ret;
 8004aec:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004af0:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
 8004af4:	e003      	b.n	8004afe <HAL_RCCEx_PeriphCLKConfig+0x99e>
      }
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004af6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004afa:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }


  /*-------------------------- USART1/6 configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART16) == RCC_PERIPHCLK_USART16)
 8004afe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b02:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004b06:	f002 0301 	and.w	r3, r2, #1
 8004b0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8004b0e:	2300      	movs	r3, #0
 8004b10:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004b14:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8004b18:	460b      	mov	r3, r1
 8004b1a:	4313      	orrs	r3, r2
 8004b1c:	f000 808b 	beq.w	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
  {
    switch (PeriphClkInit->Usart16ClockSelection)
 8004b20:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004b24:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004b28:	2b28      	cmp	r3, #40	; 0x28
 8004b2a:	d86b      	bhi.n	8004c04 <HAL_RCCEx_PeriphCLKConfig+0xaa4>
 8004b2c:	a201      	add	r2, pc, #4	; (adr r2, 8004b34 <HAL_RCCEx_PeriphCLKConfig+0x9d4>)
 8004b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004b32:	bf00      	nop
 8004b34:	08004c0d 	.word	0x08004c0d
 8004b38:	08004c05 	.word	0x08004c05
 8004b3c:	08004c05 	.word	0x08004c05
 8004b40:	08004c05 	.word	0x08004c05
 8004b44:	08004c05 	.word	0x08004c05
 8004b48:	08004c05 	.word	0x08004c05
 8004b4c:	08004c05 	.word	0x08004c05
 8004b50:	08004c05 	.word	0x08004c05
 8004b54:	08004bd9 	.word	0x08004bd9
 8004b58:	08004c05 	.word	0x08004c05
 8004b5c:	08004c05 	.word	0x08004c05
 8004b60:	08004c05 	.word	0x08004c05
 8004b64:	08004c05 	.word	0x08004c05
 8004b68:	08004c05 	.word	0x08004c05
 8004b6c:	08004c05 	.word	0x08004c05
 8004b70:	08004c05 	.word	0x08004c05
 8004b74:	08004bef 	.word	0x08004bef
 8004b78:	08004c05 	.word	0x08004c05
 8004b7c:	08004c05 	.word	0x08004c05
 8004b80:	08004c05 	.word	0x08004c05
 8004b84:	08004c05 	.word	0x08004c05
 8004b88:	08004c05 	.word	0x08004c05
 8004b8c:	08004c05 	.word	0x08004c05
 8004b90:	08004c05 	.word	0x08004c05
 8004b94:	08004c0d 	.word	0x08004c0d
 8004b98:	08004c05 	.word	0x08004c05
 8004b9c:	08004c05 	.word	0x08004c05
 8004ba0:	08004c05 	.word	0x08004c05
 8004ba4:	08004c05 	.word	0x08004c05
 8004ba8:	08004c05 	.word	0x08004c05
 8004bac:	08004c05 	.word	0x08004c05
 8004bb0:	08004c05 	.word	0x08004c05
 8004bb4:	08004c0d 	.word	0x08004c0d
 8004bb8:	08004c05 	.word	0x08004c05
 8004bbc:	08004c05 	.word	0x08004c05
 8004bc0:	08004c05 	.word	0x08004c05
 8004bc4:	08004c05 	.word	0x08004c05
 8004bc8:	08004c05 	.word	0x08004c05
 8004bcc:	08004c05 	.word	0x08004c05
 8004bd0:	08004c05 	.word	0x08004c05
 8004bd4:	08004c0d 	.word	0x08004c0d
      case RCC_USART16CLKSOURCE_PCLK2: /* CD/D2 PCLK2 as clock source for USART1/6 */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      case RCC_USART16CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART1/6 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004bd8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004bdc:	3308      	adds	r3, #8
 8004bde:	2101      	movs	r1, #1
 8004be0:	4618      	mov	r0, r3
 8004be2:	f001 fe97 	bl	8006914 <RCCEx_PLL2_Config>
 8004be6:	4603      	mov	r3, r0
 8004be8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004bec:	e00f      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xaae>

      case RCC_USART16CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART1/6 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004bee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004bf2:	3328      	adds	r3, #40	; 0x28
 8004bf4:	2101      	movs	r1, #1
 8004bf6:	4618      	mov	r0, r3
 8004bf8:	f001 ff3e 	bl	8006a78 <RCCEx_PLL3_Config>
 8004bfc:	4603      	mov	r3, r0
 8004bfe:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART1/6 clock source configuration done later after clock selection check */
        break;
 8004c02:	e004      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        /* LSE,  oscillator is used as source of USART1/6 clock */
        /* USART1/6 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004c04:	2301      	movs	r3, #1
 8004c06:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004c0a:	e000      	b.n	8004c0e <HAL_RCCEx_PeriphCLKConfig+0xaae>
        break;
 8004c0c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004c0e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d10b      	bne.n	8004c2e <HAL_RCCEx_PeriphCLKConfig+0xace>
    {
      /* Set the source of USART1/6 clock */
      __HAL_RCC_USART16_CONFIG(PeriphClkInit->Usart16ClockSelection);
 8004c16:	4b81      	ldr	r3, [pc, #516]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004c18:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004c1a:	f023 0138 	bic.w	r1, r3, #56	; 0x38
 8004c1e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c22:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8004c26:	4a7d      	ldr	r2, [pc, #500]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004c28:	430b      	orrs	r3, r1
 8004c2a:	6553      	str	r3, [r2, #84]	; 0x54
 8004c2c:	e003      	b.n	8004c36 <HAL_RCCEx_PeriphCLKConfig+0xad6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004c2e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004c32:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- USART2/3/4/5/7/8 Configuration --------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART234578) == RCC_PERIPHCLK_USART234578)
 8004c36:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004c3e:	f002 0302 	and.w	r3, r2, #2
 8004c42:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8004c46:	2300      	movs	r3, #0
 8004c48:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004c4c:	e9d7 122e 	ldrd	r1, r2, [r7, #184]	; 0xb8
 8004c50:	460b      	mov	r3, r1
 8004c52:	4313      	orrs	r3, r2
 8004c54:	d042      	beq.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
  {
    switch (PeriphClkInit->Usart234578ClockSelection)
 8004c56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c5a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004c5c:	2b05      	cmp	r3, #5
 8004c5e:	d825      	bhi.n	8004cac <HAL_RCCEx_PeriphCLKConfig+0xb4c>
 8004c60:	a201      	add	r2, pc, #4	; (adr r2, 8004c68 <HAL_RCCEx_PeriphCLKConfig+0xb08>)
 8004c62:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004c66:	bf00      	nop
 8004c68:	08004cb5 	.word	0x08004cb5
 8004c6c:	08004c81 	.word	0x08004c81
 8004c70:	08004c97 	.word	0x08004c97
 8004c74:	08004cb5 	.word	0x08004cb5
 8004c78:	08004cb5 	.word	0x08004cb5
 8004c7c:	08004cb5 	.word	0x08004cb5
      case RCC_USART234578CLKSOURCE_PCLK1: /* CD/D2 PCLK1 as clock source for USART2/3/4/5/7/8 */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      case RCC_USART234578CLKSOURCE_PLL2: /* PLL2 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004c80:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c84:	3308      	adds	r3, #8
 8004c86:	2101      	movs	r1, #1
 8004c88:	4618      	mov	r0, r3
 8004c8a:	f001 fe43 	bl	8006914 <RCCEx_PLL2_Config>
 8004c8e:	4603      	mov	r3, r0
 8004c90:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004c94:	e00f      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xb56>

      case RCC_USART234578CLKSOURCE_PLL3: /* PLL3 is used as clock source for USART2/3/4/5/7/8 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004c96:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004c9a:	3328      	adds	r3, #40	; 0x28
 8004c9c:	2101      	movs	r1, #1
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f001 feea 	bl	8006a78 <RCCEx_PLL3_Config>
 8004ca4:	4603      	mov	r3, r0
 8004ca6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;
 8004caa:	e004      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        /* LSE,  oscillator is used as source of USART2/3/4/5/7/8 clock */
        /* USART2/3/4/5/7/8 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004cac:	2301      	movs	r3, #1
 8004cae:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004cb2:	e000      	b.n	8004cb6 <HAL_RCCEx_PeriphCLKConfig+0xb56>
        break;
 8004cb4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004cb6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004cba:	2b00      	cmp	r3, #0
 8004cbc:	d10a      	bne.n	8004cd4 <HAL_RCCEx_PeriphCLKConfig+0xb74>
    {
      /* Set the source of USART2/3/4/5/7/8 clock */
      __HAL_RCC_USART234578_CONFIG(PeriphClkInit->Usart234578ClockSelection);
 8004cbe:	4b57      	ldr	r3, [pc, #348]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004cc0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004cc2:	f023 0107 	bic.w	r1, r3, #7
 8004cc6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004cca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004ccc:	4a53      	ldr	r2, [pc, #332]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004cce:	430b      	orrs	r3, r1
 8004cd0:	6553      	str	r3, [r2, #84]	; 0x54
 8004cd2:	e003      	b.n	8004cdc <HAL_RCCEx_PeriphCLKConfig+0xb7c>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004cd4:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004cd8:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*-------------------------- LPUART1 Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8004cdc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ce0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ce4:	f002 0304 	and.w	r3, r2, #4
 8004ce8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8004cec:	2300      	movs	r3, #0
 8004cee:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004cf2:	e9d7 122c 	ldrd	r1, r2, [r7, #176]	; 0xb0
 8004cf6:	460b      	mov	r3, r1
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	d044      	beq.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xc26>
  {
    switch (PeriphClkInit->Lpuart1ClockSelection)
 8004cfc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d00:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d04:	2b05      	cmp	r3, #5
 8004d06:	d825      	bhi.n	8004d54 <HAL_RCCEx_PeriphCLKConfig+0xbf4>
 8004d08:	a201      	add	r2, pc, #4	; (adr r2, 8004d10 <HAL_RCCEx_PeriphCLKConfig+0xbb0>)
 8004d0a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d0e:	bf00      	nop
 8004d10:	08004d5d 	.word	0x08004d5d
 8004d14:	08004d29 	.word	0x08004d29
 8004d18:	08004d3f 	.word	0x08004d3f
 8004d1c:	08004d5d 	.word	0x08004d5d
 8004d20:	08004d5d 	.word	0x08004d5d
 8004d24:	08004d5d 	.word	0x08004d5d
      case RCC_LPUART1CLKSOURCE_PCLK4: /* SRD/D3 PCLK1 (PCLK4) as clock source for LPUART1 */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPUART1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPUART1 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 8004d28:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d2c:	3308      	adds	r3, #8
 8004d2e:	2101      	movs	r1, #1
 8004d30:	4618      	mov	r0, r3
 8004d32:	f001 fdef 	bl	8006914 <RCCEx_PLL2_Config>
 8004d36:	4603      	mov	r3, r0
 8004d38:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004d3c:	e00f      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>

      case RCC_LPUART1CLKSOURCE_PLL3: /* PLL3 is used as clock source for LPUART1 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8004d3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d42:	3328      	adds	r3, #40	; 0x28
 8004d44:	2101      	movs	r1, #1
 8004d46:	4618      	mov	r0, r3
 8004d48:	f001 fe96 	bl	8006a78 <RCCEx_PLL3_Config>
 8004d4c:	4603      	mov	r3, r0
 8004d4e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        /* LPUART1 clock source configuration done later after clock selection check */
        break;
 8004d52:	e004      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        /* LSE,  oscillator is used as source of LPUART1 clock */
        /* LPUART1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004d54:	2301      	movs	r3, #1
 8004d56:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004d5a:	e000      	b.n	8004d5e <HAL_RCCEx_PeriphCLKConfig+0xbfe>
        break;
 8004d5c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004d5e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004d62:	2b00      	cmp	r3, #0
 8004d64:	d10b      	bne.n	8004d7e <HAL_RCCEx_PeriphCLKConfig+0xc1e>
    {
      /* Set the source of LPUART1 clock */
      __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8004d66:	4b2d      	ldr	r3, [pc, #180]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004d68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004d6a:	f023 0107 	bic.w	r1, r3, #7
 8004d6e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d72:	f8d3 3098 	ldr.w	r3, [r3, #152]	; 0x98
 8004d76:	4a29      	ldr	r2, [pc, #164]	; (8004e1c <HAL_RCCEx_PeriphCLKConfig+0xcbc>)
 8004d78:	430b      	orrs	r3, r1
 8004d7a:	6593      	str	r3, [r2, #88]	; 0x58
 8004d7c:	e003      	b.n	8004d86 <HAL_RCCEx_PeriphCLKConfig+0xc26>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004d7e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004d82:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM1 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8004d86:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004d8a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004d8e:	f002 0320 	and.w	r3, r2, #32
 8004d92:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8004d96:	2300      	movs	r3, #0
 8004d98:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004d9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8004da0:	460b      	mov	r3, r1
 8004da2:	4313      	orrs	r3, r2
 8004da4:	d057      	beq.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
  {
    switch (PeriphClkInit->Lptim1ClockSelection)
 8004da6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004daa:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004dae:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004db2:	d035      	beq.n	8004e20 <HAL_RCCEx_PeriphCLKConfig+0xcc0>
 8004db4:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8004db8:	d82c      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dbe:	d031      	beq.n	8004e24 <HAL_RCCEx_PeriphCLKConfig+0xcc4>
 8004dc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004dc4:	d826      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004dc6:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dca:	d02d      	beq.n	8004e28 <HAL_RCCEx_PeriphCLKConfig+0xcc8>
 8004dcc:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8004dd0:	d820      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004dd2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004dd6:	d012      	beq.n	8004dfe <HAL_RCCEx_PeriphCLKConfig+0xc9e>
 8004dd8:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8004ddc:	d81a      	bhi.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d024      	beq.n	8004e2c <HAL_RCCEx_PeriphCLKConfig+0xccc>
 8004de2:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8004de6:	d115      	bne.n	8004e14 <HAL_RCCEx_PeriphCLKConfig+0xcb4>
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM1CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM1*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004de8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004dec:	3308      	adds	r3, #8
 8004dee:	2100      	movs	r1, #0
 8004df0:	4618      	mov	r0, r3
 8004df2:	f001 fd8f 	bl	8006914 <RCCEx_PLL2_Config>
 8004df6:	4603      	mov	r3, r0
 8004df8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004dfc:	e017      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xcce>

      case RCC_LPTIM1CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM1*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004dfe:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e02:	3328      	adds	r3, #40	; 0x28
 8004e04:	2102      	movs	r1, #2
 8004e06:	4618      	mov	r0, r3
 8004e08:	f001 fe36 	bl	8006a78 <RCCEx_PLL3_Config>
 8004e0c:	4603      	mov	r3, r0
 8004e0e:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM1 clock source configuration done later after clock selection check */
        break;
 8004e12:	e00c      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM1 clock */
        /* LPTIM1 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004e14:	2301      	movs	r3, #1
 8004e16:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004e1a:	e008      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xcce>
 8004e1c:	58024400 	.word	0x58024400
        break;
 8004e20:	bf00      	nop
 8004e22:	e004      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004e24:	bf00      	nop
 8004e26:	e002      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004e28:	bf00      	nop
 8004e2a:	e000      	b.n	8004e2e <HAL_RCCEx_PeriphCLKConfig+0xcce>
        break;
 8004e2c:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004e2e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004e32:	2b00      	cmp	r3, #0
 8004e34:	d10b      	bne.n	8004e4e <HAL_RCCEx_PeriphCLKConfig+0xcee>
    {
      /* Set the source of LPTIM1 clock*/
      __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8004e36:	4bc2      	ldr	r3, [pc, #776]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e38:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004e3a:	f023 41e0 	bic.w	r1, r3, #1879048192	; 0x70000000
 8004e3e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e42:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 8004e46:	4abe      	ldr	r2, [pc, #760]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004e48:	430b      	orrs	r3, r1
 8004e4a:	6553      	str	r3, [r2, #84]	; 0x54
 8004e4c:	e003      	b.n	8004e56 <HAL_RCCEx_PeriphCLKConfig+0xcf6>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004e4e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004e52:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM2) == RCC_PERIPHCLK_LPTIM2)
 8004e56:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e5e:	f002 0340 	and.w	r3, r2, #64	; 0x40
 8004e62:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8004e66:	2300      	movs	r3, #0
 8004e68:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004e6c:	e9d7 1228 	ldrd	r1, r2, [r7, #160]	; 0xa0
 8004e70:	460b      	mov	r3, r1
 8004e72:	4313      	orrs	r3, r2
 8004e74:	d055      	beq.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
  {
    switch (PeriphClkInit->Lptim2ClockSelection)
 8004e76:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004e7a:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004e7e:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e82:	d033      	beq.n	8004eec <HAL_RCCEx_PeriphCLKConfig+0xd8c>
 8004e84:	f5b3 5fa0 	cmp.w	r3, #5120	; 0x1400
 8004e88:	d82c      	bhi.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004e8a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e8e:	d02f      	beq.n	8004ef0 <HAL_RCCEx_PeriphCLKConfig+0xd90>
 8004e90:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004e94:	d826      	bhi.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004e96:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004e9a:	d02b      	beq.n	8004ef4 <HAL_RCCEx_PeriphCLKConfig+0xd94>
 8004e9c:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 8004ea0:	d820      	bhi.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004ea2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004ea6:	d012      	beq.n	8004ece <HAL_RCCEx_PeriphCLKConfig+0xd6e>
 8004ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eac:	d81a      	bhi.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
 8004eae:	2b00      	cmp	r3, #0
 8004eb0:	d022      	beq.n	8004ef8 <HAL_RCCEx_PeriphCLKConfig+0xd98>
 8004eb2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004eb6:	d115      	bne.n	8004ee4 <HAL_RCCEx_PeriphCLKConfig+0xd84>
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM2CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM2*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004eb8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ebc:	3308      	adds	r3, #8
 8004ebe:	2100      	movs	r1, #0
 8004ec0:	4618      	mov	r0, r3
 8004ec2:	f001 fd27 	bl	8006914 <RCCEx_PLL2_Config>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ecc:	e015      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xd9a>

      case RCC_LPTIM2CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM2*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004ece:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ed2:	3328      	adds	r3, #40	; 0x28
 8004ed4:	2102      	movs	r1, #2
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f001 fdce 	bl	8006a78 <RCCEx_PLL3_Config>
 8004edc:	4603      	mov	r3, r0
 8004ede:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM2 clock source configuration done later after clock selection check */
        break;
 8004ee2:	e00a      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM2 clock */
        /* LPTIM2 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004ee4:	2301      	movs	r3, #1
 8004ee6:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004eea:	e006      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004eec:	bf00      	nop
 8004eee:	e004      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004ef0:	bf00      	nop
 8004ef2:	e002      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004ef4:	bf00      	nop
 8004ef6:	e000      	b.n	8004efa <HAL_RCCEx_PeriphCLKConfig+0xd9a>
        break;
 8004ef8:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004efa:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d10b      	bne.n	8004f1a <HAL_RCCEx_PeriphCLKConfig+0xdba>
    {
      /* Set the source of LPTIM2 clock*/
      __HAL_RCC_LPTIM2_CONFIG(PeriphClkInit->Lptim2ClockSelection);
 8004f02:	4b8f      	ldr	r3, [pc, #572]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f04:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004f06:	f423 51e0 	bic.w	r1, r3, #7168	; 0x1c00
 8004f0a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f0e:	f8d3 30a0 	ldr.w	r3, [r3, #160]	; 0xa0
 8004f12:	4a8b      	ldr	r2, [pc, #556]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004f14:	430b      	orrs	r3, r1
 8004f16:	6593      	str	r3, [r2, #88]	; 0x58
 8004f18:	e003      	b.n	8004f22 <HAL_RCCEx_PeriphCLKConfig+0xdc2>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004f1a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004f1e:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*---------------------------- LPTIM345 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM345) == RCC_PERIPHCLK_LPTIM345)
 8004f22:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004f2a:	f002 0380 	and.w	r3, r2, #128	; 0x80
 8004f2e:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8004f32:	2300      	movs	r3, #0
 8004f34:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f38:	e9d7 1226 	ldrd	r1, r2, [r7, #152]	; 0x98
 8004f3c:	460b      	mov	r3, r1
 8004f3e:	4313      	orrs	r3, r2
 8004f40:	d055      	beq.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xe8e>
  {
    switch (PeriphClkInit->Lptim345ClockSelection)
 8004f42:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f46:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004f4a:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f4e:	d033      	beq.n	8004fb8 <HAL_RCCEx_PeriphCLKConfig+0xe58>
 8004f50:	f5b3 4f20 	cmp.w	r3, #40960	; 0xa000
 8004f54:	d82c      	bhi.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004f56:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f5a:	d02f      	beq.n	8004fbc <HAL_RCCEx_PeriphCLKConfig+0xe5c>
 8004f5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8004f60:	d826      	bhi.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004f62:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f66:	d02b      	beq.n	8004fc0 <HAL_RCCEx_PeriphCLKConfig+0xe60>
 8004f68:	f5b3 4fc0 	cmp.w	r3, #24576	; 0x6000
 8004f6c:	d820      	bhi.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004f6e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f72:	d012      	beq.n	8004f9a <HAL_RCCEx_PeriphCLKConfig+0xe3a>
 8004f74:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004f78:	d81a      	bhi.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	d022      	beq.n	8004fc4 <HAL_RCCEx_PeriphCLKConfig+0xe64>
 8004f7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004f82:	d115      	bne.n	8004fb0 <HAL_RCCEx_PeriphCLKConfig+0xe50>
      case RCC_LPTIM345CLKSOURCE_PCLK4:      /* SRD/D3 PCLK1 (PCLK4) as clock source for LPTIM3/4/5 */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      case RCC_LPTIM345CLKSOURCE_PLL2: /* PLL2 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8004f84:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f88:	3308      	adds	r3, #8
 8004f8a:	2100      	movs	r1, #0
 8004f8c:	4618      	mov	r0, r3
 8004f8e:	f001 fcc1 	bl	8006914 <RCCEx_PLL2_Config>
 8004f92:	4603      	mov	r3, r0
 8004f94:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004f98:	e015      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xe66>

      case RCC_LPTIM345CLKSOURCE_PLL3:  /* PLL3 is used as clock source for LPTIM3/4/5 */
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8004f9a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004f9e:	3328      	adds	r3, #40	; 0x28
 8004fa0:	2102      	movs	r1, #2
 8004fa2:	4618      	mov	r0, r3
 8004fa4:	f001 fd68 	bl	8006a78 <RCCEx_PLL3_Config>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;
 8004fae:	e00a      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        /* HSI, HSE, or CSI oscillator is used as source of LPTIM3/4/5 clock */
        /* LPTIM3/4/5 clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8004fb0:	2301      	movs	r3, #1
 8004fb2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8004fb6:	e006      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004fb8:	bf00      	nop
 8004fba:	e004      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004fbc:	bf00      	nop
 8004fbe:	e002      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004fc0:	bf00      	nop
 8004fc2:	e000      	b.n	8004fc6 <HAL_RCCEx_PeriphCLKConfig+0xe66>
        break;
 8004fc4:	bf00      	nop
    }

    if (ret == HAL_OK)
 8004fc6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004fca:	2b00      	cmp	r3, #0
 8004fcc:	d10b      	bne.n	8004fe6 <HAL_RCCEx_PeriphCLKConfig+0xe86>
    {
      /* Set the source of LPTIM3/4/5 clock */
      __HAL_RCC_LPTIM345_CONFIG(PeriphClkInit->Lptim345ClockSelection);
 8004fce:	4b5c      	ldr	r3, [pc, #368]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fd0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004fd2:	f423 4160 	bic.w	r1, r3, #57344	; 0xe000
 8004fd6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004fda:	f8d3 30a4 	ldr.w	r3, [r3, #164]	; 0xa4
 8004fde:	4a58      	ldr	r2, [pc, #352]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8004fe0:	430b      	orrs	r3, r1
 8004fe2:	6593      	str	r3, [r2, #88]	; 0x58
 8004fe4:	e003      	b.n	8004fee <HAL_RCCEx_PeriphCLKConfig+0xe8e>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8004fe6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8004fea:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e

    __HAL_RCC_I2C1235_CONFIG(PeriphClkInit->I2c1235ClockSelection);

  }
#else
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C123) == RCC_PERIPHCLK_I2C123)
 8004fee:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8004ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ff6:	f002 0308 	and.w	r3, r2, #8
 8004ffa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8004ffe:	2300      	movs	r3, #0
 8005000:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8005004:	e9d7 1224 	ldrd	r1, r2, [r7, #144]	; 0x90
 8005008:	460b      	mov	r3, r1
 800500a:	4313      	orrs	r3, r2
 800500c:	d01e      	beq.n	800504c <HAL_RCCEx_PeriphCLKConfig+0xeec>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C123CLKSOURCE(PeriphClkInit->I2c123ClockSelection));

    if ((PeriphClkInit->I2c123ClockSelection) == RCC_I2C123CLKSOURCE_PLL3)
 800500e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005012:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005016:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800501a:	d10c      	bne.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xed6>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800501c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005020:	3328      	adds	r3, #40	; 0x28
 8005022:	2102      	movs	r1, #2
 8005024:	4618      	mov	r0, r3
 8005026:	f001 fd27 	bl	8006a78 <RCCEx_PLL3_Config>
 800502a:	4603      	mov	r3, r0
 800502c:	2b00      	cmp	r3, #0
 800502e:	d002      	beq.n	8005036 <HAL_RCCEx_PeriphCLKConfig+0xed6>
      {
        status = HAL_ERROR;
 8005030:	2301      	movs	r3, #1
 8005032:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C123_CONFIG(PeriphClkInit->I2c123ClockSelection);
 8005036:	4b42      	ldr	r3, [pc, #264]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005038:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800503a:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800503e:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005042:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005046:	4a3e      	ldr	r2, [pc, #248]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005048:	430b      	orrs	r3, r1
 800504a:	6553      	str	r3, [r2, #84]	; 0x54

  }
#endif /* I2C5 */

  /*------------------------------ I2C4 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 800504c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005050:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005054:	f002 0310 	and.w	r3, r2, #16
 8005058:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800505c:	2300      	movs	r3, #0
 800505e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8005062:	e9d7 1222 	ldrd	r1, r2, [r7, #136]	; 0x88
 8005066:	460b      	mov	r3, r1
 8005068:	4313      	orrs	r3, r2
 800506a:	d01e      	beq.n	80050aa <HAL_RCCEx_PeriphCLKConfig+0xf4a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    if ((PeriphClkInit->I2c4ClockSelection) == RCC_I2C4CLKSOURCE_PLL3)
 800506c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005070:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 8005074:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005078:	d10c      	bne.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xf34>
    {
      if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800507a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800507e:	3328      	adds	r3, #40	; 0x28
 8005080:	2102      	movs	r1, #2
 8005082:	4618      	mov	r0, r3
 8005084:	f001 fcf8 	bl	8006a78 <RCCEx_PLL3_Config>
 8005088:	4603      	mov	r3, r0
 800508a:	2b00      	cmp	r3, #0
 800508c:	d002      	beq.n	8005094 <HAL_RCCEx_PeriphCLKConfig+0xf34>
      {
        status = HAL_ERROR;
 800508e:	2301      	movs	r3, #1
 8005090:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
      }
    }

    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 8005094:	4b2a      	ldr	r3, [pc, #168]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 8005096:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005098:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800509c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050a0:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 80050a4:	4a26      	ldr	r2, [pc, #152]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 80050a6:	430b      	orrs	r3, r1
 80050a8:	6593      	str	r3, [r2, #88]	; 0x58

  }

  /*---------------------------- ADC configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_ADC) == RCC_PERIPHCLK_ADC)
 80050aa:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80050b2:	f402 2300 	and.w	r3, r2, #524288	; 0x80000
 80050b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80050ba:	2300      	movs	r3, #0
 80050bc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80050c0:	e9d7 1220 	ldrd	r1, r2, [r7, #128]	; 0x80
 80050c4:	460b      	mov	r3, r1
 80050c6:	4313      	orrs	r3, r2
 80050c8:	d040      	beq.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xfec>
  {
    switch (PeriphClkInit->AdcClockSelection)
 80050ca:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050ce:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 80050d2:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050d6:	d022      	beq.n	800511e <HAL_RCCEx_PeriphCLKConfig+0xfbe>
 80050d8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80050dc:	d81b      	bhi.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d003      	beq.n	80050ea <HAL_RCCEx_PeriphCLKConfig+0xf8a>
 80050e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050e6:	d00b      	beq.n	8005100 <HAL_RCCEx_PeriphCLKConfig+0xfa0>
 80050e8:	e015      	b.n	8005116 <HAL_RCCEx_PeriphCLKConfig+0xfb6>
    {

      case RCC_ADCCLKSOURCE_PLL2: /* PLL2 is used as clock source for ADC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 80050ea:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80050ee:	3308      	adds	r3, #8
 80050f0:	2100      	movs	r1, #0
 80050f2:	4618      	mov	r0, r3
 80050f4:	f001 fc0e 	bl	8006914 <RCCEx_PLL2_Config>
 80050f8:	4603      	mov	r3, r0
 80050fa:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 80050fe:	e00f      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xfc0>

      case RCC_ADCCLKSOURCE_PLL3:  /* PLL3 is used as clock source for ADC*/
        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 8005100:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005104:	3328      	adds	r3, #40	; 0x28
 8005106:	2102      	movs	r1, #2
 8005108:	4618      	mov	r0, r3
 800510a:	f001 fcb5 	bl	8006a78 <RCCEx_PLL3_Config>
 800510e:	4603      	mov	r3, r0
 8005110:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* ADC clock source configuration done later after clock selection check */
        break;
 8005114:	e004      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        /* HSI, HSE, or CSI oscillator is used as source of ADC clock */
        /* ADC clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 8005116:	2301      	movs	r3, #1
 8005118:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 800511c:	e000      	b.n	8005120 <HAL_RCCEx_PeriphCLKConfig+0xfc0>
        break;
 800511e:	bf00      	nop
    }

    if (ret == HAL_OK)
 8005120:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005124:	2b00      	cmp	r3, #0
 8005126:	d10d      	bne.n	8005144 <HAL_RCCEx_PeriphCLKConfig+0xfe4>
    {
      /* Set the source of ADC clock*/
      __HAL_RCC_ADC_CONFIG(PeriphClkInit->AdcClockSelection);
 8005128:	4b05      	ldr	r3, [pc, #20]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800512a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800512c:	f423 3140 	bic.w	r1, r3, #196608	; 0x30000
 8005130:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005134:	f8d3 30a8 	ldr.w	r3, [r3, #168]	; 0xa8
 8005138:	4a01      	ldr	r2, [pc, #4]	; (8005140 <HAL_RCCEx_PeriphCLKConfig+0xfe0>)
 800513a:	430b      	orrs	r3, r1
 800513c:	6593      	str	r3, [r2, #88]	; 0x58
 800513e:	e005      	b.n	800514c <HAL_RCCEx_PeriphCLKConfig+0xfec>
 8005140:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005144:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005148:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

  /*------------------------------ USB Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == RCC_PERIPHCLK_USB)
 800514c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005150:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005154:	f402 2380 	and.w	r3, r2, #262144	; 0x40000
 8005158:	67bb      	str	r3, [r7, #120]	; 0x78
 800515a:	2300      	movs	r3, #0
 800515c:	67fb      	str	r3, [r7, #124]	; 0x7c
 800515e:	e9d7 121e 	ldrd	r1, r2, [r7, #120]	; 0x78
 8005162:	460b      	mov	r3, r1
 8005164:	4313      	orrs	r3, r2
 8005166:	d03b      	beq.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
  {

    switch (PeriphClkInit->UsbClockSelection)
 8005168:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800516c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8005170:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 8005174:	d01f      	beq.n	80051b6 <HAL_RCCEx_PeriphCLKConfig+0x1056>
 8005176:	f5b3 1f40 	cmp.w	r3, #3145728	; 0x300000
 800517a:	d818      	bhi.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x104e>
 800517c:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005180:	d003      	beq.n	800518a <HAL_RCCEx_PeriphCLKConfig+0x102a>
 8005182:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 8005186:	d007      	beq.n	8005198 <HAL_RCCEx_PeriphCLKConfig+0x1038>
 8005188:	e011      	b.n	80051ae <HAL_RCCEx_PeriphCLKConfig+0x104e>
    {
      case RCC_USBCLKSOURCE_PLL:      /* PLL is used as clock source for USB*/
        /* Enable USB Clock output generated form System USB . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800518a:	4b64      	ldr	r3, [pc, #400]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 800518c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800518e:	4a63      	ldr	r2, [pc, #396]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005190:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005194:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* USB clock source configuration done later after clock selection check */
        break;
 8005196:	e00f      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>

      case RCC_USBCLKSOURCE_PLL3: /* PLL3 is used as clock source for USB*/

        ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005198:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800519c:	3328      	adds	r3, #40	; 0x28
 800519e:	2101      	movs	r1, #1
 80051a0:	4618      	mov	r0, r3
 80051a2:	f001 fc69 	bl	8006a78 <RCCEx_PLL3_Config>
 80051a6:	4603      	mov	r3, r0
 80051a8:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* USB clock source configuration done later after clock selection check */
        break;
 80051ac:	e004      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        /* HSI48 oscillator is used as source of USB clock */
        /* USB clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80051ae:	2301      	movs	r3, #1
 80051b0:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80051b4:	e000      	b.n	80051b8 <HAL_RCCEx_PeriphCLKConfig+0x1058>
        break;
 80051b6:	bf00      	nop
    }

    if (ret == HAL_OK)
 80051b8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d10b      	bne.n	80051d8 <HAL_RCCEx_PeriphCLKConfig+0x1078>
    {
      /* Set the source of USB clock*/
      __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 80051c0:	4b56      	ldr	r3, [pc, #344]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80051c2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80051c4:	f423 1140 	bic.w	r1, r3, #3145728	; 0x300000
 80051c8:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051cc:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80051d0:	4a52      	ldr	r2, [pc, #328]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80051d2:	430b      	orrs	r3, r1
 80051d4:	6553      	str	r3, [r2, #84]	; 0x54
 80051d6:	e003      	b.n	80051e0 <HAL_RCCEx_PeriphCLKConfig+0x1080>
    }
    else
    {
      /* set overall return value */
      status = ret;
 80051d8:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80051dc:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------------- SDMMC Configuration ------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC) == RCC_PERIPHCLK_SDMMC)
 80051e0:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80051e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80051e8:	f402 3380 	and.w	r3, r2, #65536	; 0x10000
 80051ec:	673b      	str	r3, [r7, #112]	; 0x70
 80051ee:	2300      	movs	r3, #0
 80051f0:	677b      	str	r3, [r7, #116]	; 0x74
 80051f2:	e9d7 121c 	ldrd	r1, r2, [r7, #112]	; 0x70
 80051f6:	460b      	mov	r3, r1
 80051f8:	4313      	orrs	r3, r2
 80051fa:	d031      	beq.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1100>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC(PeriphClkInit->SdmmcClockSelection));

    switch (PeriphClkInit->SdmmcClockSelection)
 80051fc:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005202:	2b00      	cmp	r3, #0
 8005204:	d003      	beq.n	800520e <HAL_RCCEx_PeriphCLKConfig+0x10ae>
 8005206:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800520a:	d007      	beq.n	800521c <HAL_RCCEx_PeriphCLKConfig+0x10bc>
 800520c:	e011      	b.n	8005232 <HAL_RCCEx_PeriphCLKConfig+0x10d2>
    {
      case RCC_SDMMCCLKSOURCE_PLL:      /* PLL is used as clock source for SDMMC*/
        /* Enable SDMMC Clock output generated form System PLL . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 800520e:	4b43      	ldr	r3, [pc, #268]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005210:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005212:	4a42      	ldr	r2, [pc, #264]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005214:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8005218:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 800521a:	e00e      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is used as clock source for SDMMC*/

        ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 800521c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005220:	3308      	adds	r3, #8
 8005222:	2102      	movs	r1, #2
 8005224:	4618      	mov	r0, r3
 8005226:	f001 fb75 	bl	8006914 <RCCEx_PLL2_Config>
 800522a:	4603      	mov	r3, r0
 800522c:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f

        /* SDMMC clock source configuration done later after clock selection check */
        break;
 8005230:	e003      	b.n	800523a <HAL_RCCEx_PeriphCLKConfig+0x10da>

      default:
        ret = HAL_ERROR;
 8005232:	2301      	movs	r3, #1
 8005234:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 8005238:	bf00      	nop
    }

    if (ret == HAL_OK)
 800523a:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800523e:	2b00      	cmp	r3, #0
 8005240:	d10a      	bne.n	8005258 <HAL_RCCEx_PeriphCLKConfig+0x10f8>
    {
      /* Set the source of SDMMC clock*/
      __HAL_RCC_SDMMC_CONFIG(PeriphClkInit->SdmmcClockSelection);
 8005242:	4b36      	ldr	r3, [pc, #216]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005244:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005246:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800524a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800524e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005250:	4a32      	ldr	r2, [pc, #200]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005252:	430b      	orrs	r3, r1
 8005254:	64d3      	str	r3, [r2, #76]	; 0x4c
 8005256:	e003      	b.n	8005260 <HAL_RCCEx_PeriphCLKConfig+0x1100>
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005258:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800525c:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }

#if defined(LTDC)
  /*-------------------------------------- LTDC Configuration -----------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8005260:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005264:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005268:	f002 5300 	and.w	r3, r2, #536870912	; 0x20000000
 800526c:	66bb      	str	r3, [r7, #104]	; 0x68
 800526e:	2300      	movs	r3, #0
 8005270:	66fb      	str	r3, [r7, #108]	; 0x6c
 8005272:	e9d7 121a 	ldrd	r1, r2, [r7, #104]	; 0x68
 8005276:	460b      	mov	r3, r1
 8005278:	4313      	orrs	r3, r2
 800527a:	d00c      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x1136>
  {
    if (RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE) != HAL_OK)
 800527c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005280:	3328      	adds	r3, #40	; 0x28
 8005282:	2102      	movs	r1, #2
 8005284:	4618      	mov	r0, r3
 8005286:	f001 fbf7 	bl	8006a78 <RCCEx_PLL3_Config>
 800528a:	4603      	mov	r3, r0
 800528c:	2b00      	cmp	r3, #0
 800528e:	d002      	beq.n	8005296 <HAL_RCCEx_PeriphCLKConfig+0x1136>
    {
      status = HAL_ERROR;
 8005290:	2301      	movs	r3, #1
 8005292:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
#endif /* LTDC */

  /*------------------------------ RNG Configuration -------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RNG) == RCC_PERIPHCLK_RNG)
 8005296:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800529a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800529e:	f402 3300 	and.w	r3, r2, #131072	; 0x20000
 80052a2:	663b      	str	r3, [r7, #96]	; 0x60
 80052a4:	2300      	movs	r3, #0
 80052a6:	667b      	str	r3, [r7, #100]	; 0x64
 80052a8:	e9d7 1218 	ldrd	r1, r2, [r7, #96]	; 0x60
 80052ac:	460b      	mov	r3, r1
 80052ae:	4313      	orrs	r3, r2
 80052b0:	d03a      	beq.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
  {

    switch (PeriphClkInit->RngClockSelection)
 80052b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80052b6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80052ba:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052be:	d018      	beq.n	80052f2 <HAL_RCCEx_PeriphCLKConfig+0x1192>
 80052c0:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80052c4:	d811      	bhi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80052c6:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052ca:	d014      	beq.n	80052f6 <HAL_RCCEx_PeriphCLKConfig+0x1196>
 80052cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80052d0:	d80b      	bhi.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x118a>
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d011      	beq.n	80052fa <HAL_RCCEx_PeriphCLKConfig+0x119a>
 80052d6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80052da:	d106      	bne.n	80052ea <HAL_RCCEx_PeriphCLKConfig+0x118a>
    {
      case RCC_RNGCLKSOURCE_PLL:     /* PLL is used as clock source for RNG*/
        /* Enable RNG Clock output generated form System RNG . */
        __HAL_RCC_PLLCLKOUT_ENABLE(RCC_PLL1_DIVQ);
 80052dc:	4b0f      	ldr	r3, [pc, #60]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80052de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052e0:	4a0e      	ldr	r2, [pc, #56]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 80052e2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80052e6:	62d3      	str	r3, [r2, #44]	; 0x2c

        /* RNG clock source configuration done later after clock selection check */
        break;
 80052e8:	e008      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        /* HSI48 oscillator is used as source of RNG clock */
        /* RNG clock source configuration done later after clock selection check */
        break;

      default:
        ret = HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
        break;
 80052f0:	e004      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80052f2:	bf00      	nop
 80052f4:	e002      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80052f6:	bf00      	nop
 80052f8:	e000      	b.n	80052fc <HAL_RCCEx_PeriphCLKConfig+0x119c>
        break;
 80052fa:	bf00      	nop
    }

    if (ret == HAL_OK)
 80052fc:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005300:	2b00      	cmp	r3, #0
 8005302:	d10d      	bne.n	8005320 <HAL_RCCEx_PeriphCLKConfig+0x11c0>
    {
      /* Set the source of RNG clock*/
      __HAL_RCC_RNG_CONFIG(PeriphClkInit->RngClockSelection);
 8005304:	4b05      	ldr	r3, [pc, #20]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005306:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005308:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800530c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005310:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005314:	4a01      	ldr	r2, [pc, #4]	; (800531c <HAL_RCCEx_PeriphCLKConfig+0x11bc>)
 8005316:	430b      	orrs	r3, r1
 8005318:	6553      	str	r3, [r2, #84]	; 0x54
 800531a:	e005      	b.n	8005328 <HAL_RCCEx_PeriphCLKConfig+0x11c8>
 800531c:	58024400 	.word	0x58024400
    }
    else
    {
      /* set overall return value */
      status = ret;
 8005320:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005324:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }

  }

  /*------------------------------ SWPMI1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SWPMI1) == RCC_PERIPHCLK_SWPMI1)
 8005328:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800532c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005330:	f402 1380 	and.w	r3, r2, #1048576	; 0x100000
 8005334:	65bb      	str	r3, [r7, #88]	; 0x58
 8005336:	2300      	movs	r3, #0
 8005338:	65fb      	str	r3, [r7, #92]	; 0x5c
 800533a:	e9d7 1216 	ldrd	r1, r2, [r7, #88]	; 0x58
 800533e:	460b      	mov	r3, r1
 8005340:	4313      	orrs	r3, r2
 8005342:	d009      	beq.n	8005358 <HAL_RCCEx_PeriphCLKConfig+0x11f8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SWPMI1CLKSOURCE(PeriphClkInit->Swpmi1ClockSelection));

    /* Configure the SWPMI1 interface clock source */
    __HAL_RCC_SWPMI1_CONFIG(PeriphClkInit->Swpmi1ClockSelection);
 8005344:	4baa      	ldr	r3, [pc, #680]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005346:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005348:	f023 4100 	bic.w	r1, r3, #2147483648	; 0x80000000
 800534c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005350:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8005352:	4aa7      	ldr	r2, [pc, #668]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005354:	430b      	orrs	r3, r1
 8005356:	6513      	str	r3, [r2, #80]	; 0x50
  }
#if defined(HRTIM1)
  /*------------------------------ HRTIM1 clock Configuration ----------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_HRTIM1) == RCC_PERIPHCLK_HRTIM1)
 8005358:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800535c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005360:	f002 5380 	and.w	r3, r2, #268435456	; 0x10000000
 8005364:	653b      	str	r3, [r7, #80]	; 0x50
 8005366:	2300      	movs	r3, #0
 8005368:	657b      	str	r3, [r7, #84]	; 0x54
 800536a:	e9d7 1214 	ldrd	r1, r2, [r7, #80]	; 0x50
 800536e:	460b      	mov	r3, r1
 8005370:	4313      	orrs	r3, r2
 8005372:	d00a      	beq.n	800538a <HAL_RCCEx_PeriphCLKConfig+0x122a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HRTIM1CLKSOURCE(PeriphClkInit->Hrtim1ClockSelection));

    /* Configure the HRTIM1 clock source */
    __HAL_RCC_HRTIM1_CONFIG(PeriphClkInit->Hrtim1ClockSelection);
 8005374:	4b9e      	ldr	r3, [pc, #632]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005376:	691b      	ldr	r3, [r3, #16]
 8005378:	f423 4180 	bic.w	r1, r3, #16384	; 0x4000
 800537c:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005380:	f8d3 30bc 	ldr.w	r3, [r3, #188]	; 0xbc
 8005384:	4a9a      	ldr	r2, [pc, #616]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005386:	430b      	orrs	r3, r1
 8005388:	6113      	str	r3, [r2, #16]
  }
#endif  /*HRTIM1*/
  /*------------------------------ DFSDM1 Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_DFSDM1) == RCC_PERIPHCLK_DFSDM1)
 800538a:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800538e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005392:	f402 1300 	and.w	r3, r2, #2097152	; 0x200000
 8005396:	64bb      	str	r3, [r7, #72]	; 0x48
 8005398:	2300      	movs	r3, #0
 800539a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800539c:	e9d7 1212 	ldrd	r1, r2, [r7, #72]	; 0x48
 80053a0:	460b      	mov	r3, r1
 80053a2:	4313      	orrs	r3, r2
 80053a4:	d009      	beq.n	80053ba <HAL_RCCEx_PeriphCLKConfig+0x125a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_DFSDM1CLKSOURCE(PeriphClkInit->Dfsdm1ClockSelection));

    /* Configure the DFSDM1 interface clock source */
    __HAL_RCC_DFSDM1_CONFIG(PeriphClkInit->Dfsdm1ClockSelection);
 80053a6:	4b92      	ldr	r3, [pc, #584]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80053a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80053aa:	f023 7180 	bic.w	r1, r3, #16777216	; 0x1000000
 80053ae:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053b4:	4a8e      	ldr	r2, [pc, #568]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80053b6:	430b      	orrs	r3, r1
 80053b8:	6513      	str	r3, [r2, #80]	; 0x50
    __HAL_RCC_DFSDM2_CONFIG(PeriphClkInit->Dfsdm2ClockSelection);
  }
#endif  /* DFSDM2 */

  /*------------------------------------ TIM configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == RCC_PERIPHCLK_TIM)
 80053ba:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053c2:	f002 4380 	and.w	r3, r2, #1073741824	; 0x40000000
 80053c6:	643b      	str	r3, [r7, #64]	; 0x40
 80053c8:	2300      	movs	r3, #0
 80053ca:	647b      	str	r3, [r7, #68]	; 0x44
 80053cc:	e9d7 1210 	ldrd	r1, r2, [r7, #64]	; 0x40
 80053d0:	460b      	mov	r3, r1
 80053d2:	4313      	orrs	r3, r2
 80053d4:	d00e      	beq.n	80053f4 <HAL_RCCEx_PeriphCLKConfig+0x1294>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 80053d6:	4b86      	ldr	r3, [pc, #536]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80053d8:	691b      	ldr	r3, [r3, #16]
 80053da:	4a85      	ldr	r2, [pc, #532]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80053dc:	f423 4300 	bic.w	r3, r3, #32768	; 0x8000
 80053e0:	6113      	str	r3, [r2, #16]
 80053e2:	4b83      	ldr	r3, [pc, #524]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80053e4:	6919      	ldr	r1, [r3, #16]
 80053e6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053ea:	f8d3 30c0 	ldr.w	r3, [r3, #192]	; 0xc0
 80053ee:	4a80      	ldr	r2, [pc, #512]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 80053f0:	430b      	orrs	r3, r1
 80053f2:	6113      	str	r3, [r2, #16]
  }

  /*------------------------------------ CKPER configuration --------------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CKPER) == RCC_PERIPHCLK_CKPER)
 80053f4:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80053f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053fc:	f002 4300 	and.w	r3, r2, #2147483648	; 0x80000000
 8005400:	63bb      	str	r3, [r7, #56]	; 0x38
 8005402:	2300      	movs	r3, #0
 8005404:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005406:	e9d7 120e 	ldrd	r1, r2, [r7, #56]	; 0x38
 800540a:	460b      	mov	r3, r1
 800540c:	4313      	orrs	r3, r2
 800540e:	d009      	beq.n	8005424 <HAL_RCCEx_PeriphCLKConfig+0x12c4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLKPSOURCE(PeriphClkInit->CkperClockSelection));

    /* Configure the CKPER clock source */
    __HAL_RCC_CLKP_CONFIG(PeriphClkInit->CkperClockSelection);
 8005410:	4b77      	ldr	r3, [pc, #476]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005412:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005414:	f023 5140 	bic.w	r1, r3, #805306368	; 0x30000000
 8005418:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800541c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800541e:	4a74      	ldr	r2, [pc, #464]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005420:	430b      	orrs	r3, r1
 8005422:	64d3      	str	r3, [r2, #76]	; 0x4c
  }

  /*------------------------------ CEC Configuration ------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8005424:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800542c:	f402 0300 	and.w	r3, r2, #8388608	; 0x800000
 8005430:	633b      	str	r3, [r7, #48]	; 0x30
 8005432:	2300      	movs	r3, #0
 8005434:	637b      	str	r3, [r7, #52]	; 0x34
 8005436:	e9d7 120c 	ldrd	r1, r2, [r7, #48]	; 0x30
 800543a:	460b      	mov	r3, r1
 800543c:	4313      	orrs	r3, r2
 800543e:	d00a      	beq.n	8005456 <HAL_RCCEx_PeriphCLKConfig+0x12f6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC interface clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8005440:	4b6b      	ldr	r3, [pc, #428]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005442:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8005444:	f423 0140 	bic.w	r1, r3, #12582912	; 0xc00000
 8005448:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800544c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8005450:	4a67      	ldr	r2, [pc, #412]	; (80055f0 <HAL_RCCEx_PeriphCLKConfig+0x1490>)
 8005452:	430b      	orrs	r3, r1
 8005454:	6553      	str	r3, [r2, #84]	; 0x54
  }

  /*---------------------------- PLL2 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVP) == RCC_PERIPHCLK_PLL2_DIVP)
 8005456:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800545a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800545e:	2100      	movs	r1, #0
 8005460:	62b9      	str	r1, [r7, #40]	; 0x28
 8005462:	f003 0301 	and.w	r3, r3, #1
 8005466:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005468:	e9d7 120a 	ldrd	r1, r2, [r7, #40]	; 0x28
 800546c:	460b      	mov	r3, r1
 800546e:	4313      	orrs	r3, r2
 8005470:	d011      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x1336>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_P_UPDATE);
 8005472:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005476:	3308      	adds	r3, #8
 8005478:	2100      	movs	r1, #0
 800547a:	4618      	mov	r0, r3
 800547c:	f001 fa4a 	bl	8006914 <RCCEx_PLL2_Config>
 8005480:	4603      	mov	r3, r0
 8005482:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8005486:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800548a:	2b00      	cmp	r3, #0
 800548c:	d003      	beq.n	8005496 <HAL_RCCEx_PeriphCLKConfig+0x1336>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800548e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005492:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVQ) == RCC_PERIPHCLK_PLL2_DIVQ)
 8005496:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800549a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800549e:	2100      	movs	r1, #0
 80054a0:	6239      	str	r1, [r7, #32]
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	627b      	str	r3, [r7, #36]	; 0x24
 80054a8:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80054ac:	460b      	mov	r3, r1
 80054ae:	4313      	orrs	r3, r2
 80054b0:	d011      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_Q_UPDATE);
 80054b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054b6:	3308      	adds	r3, #8
 80054b8:	2101      	movs	r1, #1
 80054ba:	4618      	mov	r0, r3
 80054bc:	f001 fa2a 	bl	8006914 <RCCEx_PLL2_Config>
 80054c0:	4603      	mov	r3, r0
 80054c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80054c6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80054ca:	2b00      	cmp	r3, #0
 80054cc:	d003      	beq.n	80054d6 <HAL_RCCEx_PeriphCLKConfig+0x1376>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80054ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80054d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL2_DIVR) == RCC_PERIPHCLK_PLL2_DIVR)
 80054d6:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054de:	2100      	movs	r1, #0
 80054e0:	61b9      	str	r1, [r7, #24]
 80054e2:	f003 0304 	and.w	r3, r3, #4
 80054e6:	61fb      	str	r3, [r7, #28]
 80054e8:	e9d7 1206 	ldrd	r1, r2, [r7, #24]
 80054ec:	460b      	mov	r3, r1
 80054ee:	4313      	orrs	r3, r2
 80054f0:	d011      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
  {
    ret = RCCEx_PLL2_Config(&(PeriphClkInit->PLL2), DIVIDER_R_UPDATE);
 80054f2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80054f6:	3308      	adds	r3, #8
 80054f8:	2102      	movs	r1, #2
 80054fa:	4618      	mov	r0, r3
 80054fc:	f001 fa0a 	bl	8006914 <RCCEx_PLL2_Config>
 8005500:	4603      	mov	r3, r0
 8005502:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8005506:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800550a:	2b00      	cmp	r3, #0
 800550c:	d003      	beq.n	8005516 <HAL_RCCEx_PeriphCLKConfig+0x13b6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800550e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005512:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  

  /*---------------------------- PLL3 configuration -------------------------------*/
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVP) == RCC_PERIPHCLK_PLL3_DIVP)
 8005516:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800551a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800551e:	2100      	movs	r1, #0
 8005520:	6139      	str	r1, [r7, #16]
 8005522:	f003 0308 	and.w	r3, r3, #8
 8005526:	617b      	str	r3, [r7, #20]
 8005528:	e9d7 1204 	ldrd	r1, r2, [r7, #16]
 800552c:	460b      	mov	r3, r1
 800552e:	4313      	orrs	r3, r2
 8005530:	d011      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_P_UPDATE);
 8005532:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005536:	3328      	adds	r3, #40	; 0x28
 8005538:	2100      	movs	r1, #0
 800553a:	4618      	mov	r0, r3
 800553c:	f001 fa9c 	bl	8006a78 <RCCEx_PLL3_Config>
 8005540:	4603      	mov	r3, r0
 8005542:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
  
    if (ret == HAL_OK)
 8005546:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800554a:	2b00      	cmp	r3, #0
 800554c:	d003      	beq.n	8005556 <HAL_RCCEx_PeriphCLKConfig+0x13f6>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800554e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005552:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVQ) == RCC_PERIPHCLK_PLL3_DIVQ)
 8005556:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800555a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800555e:	2100      	movs	r1, #0
 8005560:	60b9      	str	r1, [r7, #8]
 8005562:	f003 0310 	and.w	r3, r3, #16
 8005566:	60fb      	str	r3, [r7, #12]
 8005568:	e9d7 1202 	ldrd	r1, r2, [r7, #8]
 800556c:	460b      	mov	r3, r1
 800556e:	4313      	orrs	r3, r2
 8005570:	d011      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x1436>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_Q_UPDATE);
 8005572:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 8005576:	3328      	adds	r3, #40	; 0x28
 8005578:	2101      	movs	r1, #1
 800557a:	4618      	mov	r0, r3
 800557c:	f001 fa7c 	bl	8006a78 <RCCEx_PLL3_Config>
 8005580:	4603      	mov	r3, r0
 8005582:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 8005586:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 800558a:	2b00      	cmp	r3, #0
 800558c:	d003      	beq.n	8005596 <HAL_RCCEx_PeriphCLKConfig+0x1436>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 800558e:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 8005592:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    }
  }
  
  
  if (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_PLL3_DIVR) == RCC_PERIPHCLK_PLL3_DIVR)
 8005596:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 800559a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559e:	2100      	movs	r1, #0
 80055a0:	6039      	str	r1, [r7, #0]
 80055a2:	f003 0320 	and.w	r3, r3, #32
 80055a6:	607b      	str	r3, [r7, #4]
 80055a8:	e9d7 1200 	ldrd	r1, r2, [r7]
 80055ac:	460b      	mov	r3, r1
 80055ae:	4313      	orrs	r3, r2
 80055b0:	d011      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
  {
    ret = RCCEx_PLL3_Config(&(PeriphClkInit->PLL3), DIVIDER_R_UPDATE);
 80055b2:	f8d7 311c 	ldr.w	r3, [r7, #284]	; 0x11c
 80055b6:	3328      	adds	r3, #40	; 0x28
 80055b8:	2102      	movs	r1, #2
 80055ba:	4618      	mov	r0, r3
 80055bc:	f001 fa5c 	bl	8006a78 <RCCEx_PLL3_Config>
 80055c0:	4603      	mov	r3, r0
 80055c2:	f887 312f 	strb.w	r3, [r7, #303]	; 0x12f
    
    if (ret == HAL_OK)
 80055c6:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d003      	beq.n	80055d6 <HAL_RCCEx_PeriphCLKConfig+0x1476>
      /*Nothing to do*/
    }
    else
    {
      /* set overall return value */
      status = ret;
 80055ce:	f897 312f 	ldrb.w	r3, [r7, #303]	; 0x12f
 80055d2:	f887 312e 	strb.w	r3, [r7, #302]	; 0x12e
    } 
  }

  if (status == HAL_OK)
 80055d6:	f897 312e 	ldrb.w	r3, [r7, #302]	; 0x12e
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d101      	bne.n	80055e2 <HAL_RCCEx_PeriphCLKConfig+0x1482>
  {
    return HAL_OK;
 80055de:	2300      	movs	r3, #0
 80055e0:	e000      	b.n	80055e4 <HAL_RCCEx_PeriphCLKConfig+0x1484>
  }
  return HAL_ERROR;
 80055e2:	2301      	movs	r3, #1
}
 80055e4:	4618      	mov	r0, r3
 80055e6:	f507 7798 	add.w	r7, r7, #304	; 0x130
 80055ea:	46bd      	mov	sp, r7
 80055ec:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80055f0:	58024400 	.word	0x58024400

080055f4 <HAL_RCCEx_GetPeriphCLKFreq>:
  * @retval Frequency in KHz
  *
  *  (*) : Available on some STM32H7 lines only.
  */
uint32_t HAL_RCCEx_GetPeriphCLKFreq(uint64_t PeriphClk)
{
 80055f4:	b580      	push	{r7, lr}
 80055f6:	b090      	sub	sp, #64	; 0x40
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	e9c7 0100 	strd	r0, r1, [r7]
  /* This variable is used to store the SAI and CKP clock source */
  uint32_t saiclocksource;
  uint32_t ckpclocksource;
  uint32_t srcclk;

  if (PeriphClk == RCC_PERIPHCLK_SAI1)
 80055fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005602:	f5a2 7180 	sub.w	r1, r2, #256	; 0x100
 8005606:	430b      	orrs	r3, r1
 8005608:	f040 8094 	bne.w	8005734 <HAL_RCCEx_GetPeriphCLKFreq+0x140>
  {

    saiclocksource = __HAL_RCC_GET_SAI1_SOURCE();
 800560c:	4b9e      	ldr	r3, [pc, #632]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800560e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005610:	f003 0307 	and.w	r3, r3, #7
 8005614:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 8005616:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005618:	2b04      	cmp	r3, #4
 800561a:	f200 8087 	bhi.w	800572c <HAL_RCCEx_GetPeriphCLKFreq+0x138>
 800561e:	a201      	add	r2, pc, #4	; (adr r2, 8005624 <HAL_RCCEx_GetPeriphCLKFreq+0x30>)
 8005620:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005624:	08005639 	.word	0x08005639
 8005628:	08005661 	.word	0x08005661
 800562c:	08005689 	.word	0x08005689
 8005630:	08005725 	.word	0x08005725
 8005634:	080056b1 	.word	0x080056b1
    {
      case RCC_SAI1CLKSOURCE_PLL: /* PLL1 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005638:	4b93      	ldr	r3, [pc, #588]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005640:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005644:	d108      	bne.n	8005658 <HAL_RCCEx_GetPeriphCLKFreq+0x64>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005646:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800564a:	4618      	mov	r0, r3
 800564c:	f001 f810 	bl	8006670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005650:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005652:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005654:	f000 bd45 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005658:	2300      	movs	r3, #0
 800565a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800565c:	f000 bd41 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI1CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005660:	4b89      	ldr	r3, [pc, #548]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005668:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800566c:	d108      	bne.n	8005680 <HAL_RCCEx_GetPeriphCLKFreq+0x8c>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800566e:	f107 0318 	add.w	r3, r7, #24
 8005672:	4618      	mov	r0, r3
 8005674:	f000 fd54 	bl	8006120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005678:	69bb      	ldr	r3, [r7, #24]
 800567a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800567c:	f000 bd31 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005680:	2300      	movs	r3, #0
 8005682:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005684:	f000 bd2d 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI1 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005688:	4b7f      	ldr	r3, [pc, #508]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005690:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005694:	d108      	bne.n	80056a8 <HAL_RCCEx_GetPeriphCLKFreq+0xb4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005696:	f107 030c 	add.w	r3, r7, #12
 800569a:	4618      	mov	r0, r3
 800569c:	f000 fe94 	bl	80063c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80056a0:	68fb      	ldr	r3, [r7, #12]
 80056a2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80056a4:	f000 bd1d 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80056a8:	2300      	movs	r3, #0
 80056aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80056ac:	f000 bd19 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI1CLKSOURCE_CLKP: /* CKPER is the clock source for SAI1*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 80056b0:	4b75      	ldr	r3, [pc, #468]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056b2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80056b4:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80056b8:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 80056ba:	4b73      	ldr	r3, [pc, #460]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056bc:	681b      	ldr	r3, [r3, #0]
 80056be:	f003 0304 	and.w	r3, r3, #4
 80056c2:	2b04      	cmp	r3, #4
 80056c4:	d10c      	bne.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
 80056c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056c8:	2b00      	cmp	r3, #0
 80056ca:	d109      	bne.n	80056e0 <HAL_RCCEx_GetPeriphCLKFreq+0xec>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80056cc:	4b6e      	ldr	r3, [pc, #440]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	08db      	lsrs	r3, r3, #3
 80056d2:	f003 0303 	and.w	r3, r3, #3
 80056d6:	4a6d      	ldr	r2, [pc, #436]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 80056d8:	fa22 f303 	lsr.w	r3, r2, r3
 80056dc:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056de:	e01f      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 80056e0:	4b69      	ldr	r3, [pc, #420]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056e2:	681b      	ldr	r3, [r3, #0]
 80056e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80056e8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80056ec:	d106      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
 80056ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80056f0:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80056f4:	d102      	bne.n	80056fc <HAL_RCCEx_GetPeriphCLKFreq+0x108>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80056f6:	4b66      	ldr	r3, [pc, #408]	; (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 80056f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80056fa:	e011      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80056fc:	4b62      	ldr	r3, [pc, #392]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005704:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005708:	d106      	bne.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
 800570a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800570c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005710:	d102      	bne.n	8005718 <HAL_RCCEx_GetPeriphCLKFreq+0x124>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005712:	4b60      	ldr	r3, [pc, #384]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005714:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005716:	e003      	b.n	8005720 <HAL_RCCEx_GetPeriphCLKFreq+0x12c>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005718:	2300      	movs	r3, #0
 800571a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800571c:	f000 bce1 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005720:	f000 bcdf 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI1CLKSOURCE_PIN): /* External clock is the clock source for SAI1 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005724:	4b5c      	ldr	r3, [pc, #368]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005726:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005728:	f000 bcdb 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800572c:	2300      	movs	r3, #0
 800572e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005730:	f000 bcd7 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

#if defined(SAI3)
  else if (PeriphClk == RCC_PERIPHCLK_SAI23)
 8005734:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005738:	f5a2 7100 	sub.w	r1, r2, #512	; 0x200
 800573c:	430b      	orrs	r3, r1
 800573e:	f040 80ad 	bne.w	800589c <HAL_RCCEx_GetPeriphCLKFreq+0x2a8>
  {

    saiclocksource = __HAL_RCC_GET_SAI23_SOURCE();
 8005742:	4b51      	ldr	r3, [pc, #324]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005744:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005746:	f403 73e0 	and.w	r3, r3, #448	; 0x1c0
 800574a:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 800574c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800574e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005752:	d056      	beq.n	8005802 <HAL_RCCEx_GetPeriphCLKFreq+0x20e>
 8005754:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005756:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800575a:	f200 8090 	bhi.w	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800575e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005760:	2bc0      	cmp	r3, #192	; 0xc0
 8005762:	f000 8088 	beq.w	8005876 <HAL_RCCEx_GetPeriphCLKFreq+0x282>
 8005766:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005768:	2bc0      	cmp	r3, #192	; 0xc0
 800576a:	f200 8088 	bhi.w	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800576e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005770:	2b80      	cmp	r3, #128	; 0x80
 8005772:	d032      	beq.n	80057da <HAL_RCCEx_GetPeriphCLKFreq+0x1e6>
 8005774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005776:	2b80      	cmp	r3, #128	; 0x80
 8005778:	f200 8081 	bhi.w	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
 800577c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800577e:	2b00      	cmp	r3, #0
 8005780:	d003      	beq.n	800578a <HAL_RCCEx_GetPeriphCLKFreq+0x196>
 8005782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005784:	2b40      	cmp	r3, #64	; 0x40
 8005786:	d014      	beq.n	80057b2 <HAL_RCCEx_GetPeriphCLKFreq+0x1be>
 8005788:	e079      	b.n	800587e <HAL_RCCEx_GetPeriphCLKFreq+0x28a>
    {
      case RCC_SAI23CLKSOURCE_PLL: /* PLL1 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 800578a:	4b3f      	ldr	r3, [pc, #252]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005792:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005796:	d108      	bne.n	80057aa <HAL_RCCEx_GetPeriphCLKFreq+0x1b6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005798:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800579c:	4618      	mov	r0, r3
 800579e:	f000 ff67 	bl	8006670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80057a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80057a4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057a6:	f000 bc9c 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057aa:	2300      	movs	r3, #0
 80057ac:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057ae:	f000 bc98 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI23CLKSOURCE_PLL2: /* PLL2 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80057b2:	4b35      	ldr	r3, [pc, #212]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80057ba:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80057be:	d108      	bne.n	80057d2 <HAL_RCCEx_GetPeriphCLKFreq+0x1de>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80057c0:	f107 0318 	add.w	r3, r7, #24
 80057c4:	4618      	mov	r0, r3
 80057c6:	f000 fcab 	bl	8006120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057ce:	f000 bc88 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057d2:	2300      	movs	r3, #0
 80057d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057d6:	f000 bc84 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_PLL3: /* PLL3 is the clock source for SAI2/3 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 80057da:	4b2b      	ldr	r3, [pc, #172]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80057e2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80057e6:	d108      	bne.n	80057fa <HAL_RCCEx_GetPeriphCLKFreq+0x206>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80057e8:	f107 030c 	add.w	r3, r7, #12
 80057ec:	4618      	mov	r0, r3
 80057ee:	f000 fdeb 	bl	80063c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 80057f2:	68fb      	ldr	r3, [r7, #12]
 80057f4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80057f6:	f000 bc74 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80057fa:	2300      	movs	r3, #0
 80057fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80057fe:	f000 bc70 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI23CLKSOURCE_CLKP: /* CKPER is the clock source for SAI2/3 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005802:	4b21      	ldr	r3, [pc, #132]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005804:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005806:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800580a:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 800580c:	4b1e      	ldr	r3, [pc, #120]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 800580e:	681b      	ldr	r3, [r3, #0]
 8005810:	f003 0304 	and.w	r3, r3, #4
 8005814:	2b04      	cmp	r3, #4
 8005816:	d10c      	bne.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
 8005818:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800581a:	2b00      	cmp	r3, #0
 800581c:	d109      	bne.n	8005832 <HAL_RCCEx_GetPeriphCLKFreq+0x23e>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 800581e:	4b1a      	ldr	r3, [pc, #104]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	08db      	lsrs	r3, r3, #3
 8005824:	f003 0303 	and.w	r3, r3, #3
 8005828:	4a18      	ldr	r2, [pc, #96]	; (800588c <HAL_RCCEx_GetPeriphCLKFreq+0x298>)
 800582a:	fa22 f303 	lsr.w	r3, r2, r3
 800582e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005830:	e01f      	b.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005832:	4b15      	ldr	r3, [pc, #84]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800583a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800583e:	d106      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
 8005840:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005842:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005846:	d102      	bne.n	800584e <HAL_RCCEx_GetPeriphCLKFreq+0x25a>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005848:	4b11      	ldr	r3, [pc, #68]	; (8005890 <HAL_RCCEx_GetPeriphCLKFreq+0x29c>)
 800584a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800584c:	e011      	b.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 800584e:	4b0e      	ldr	r3, [pc, #56]	; (8005888 <HAL_RCCEx_GetPeriphCLKFreq+0x294>)
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005856:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800585a:	d106      	bne.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
 800585c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800585e:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005862:	d102      	bne.n	800586a <HAL_RCCEx_GetPeriphCLKFreq+0x276>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005864:	4b0b      	ldr	r3, [pc, #44]	; (8005894 <HAL_RCCEx_GetPeriphCLKFreq+0x2a0>)
 8005866:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005868:	e003      	b.n	8005872 <HAL_RCCEx_GetPeriphCLKFreq+0x27e>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 800586a:	2300      	movs	r3, #0
 800586c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 800586e:	f000 bc38 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005872:	f000 bc36 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SAI23CLKSOURCE_PIN): /* External clock is the clock source for SAI2/3 */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005876:	4b08      	ldr	r3, [pc, #32]	; (8005898 <HAL_RCCEx_GetPeriphCLKFreq+0x2a4>)
 8005878:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800587a:	f000 bc32 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 800587e:	2300      	movs	r3, #0
 8005880:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005882:	f000 bc2e 	b.w	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005886:	bf00      	nop
 8005888:	58024400 	.word	0x58024400
 800588c:	03d09000 	.word	0x03d09000
 8005890:	003d0900 	.word	0x003d0900
 8005894:	017d7840 	.word	0x017d7840
 8005898:	00bb8000 	.word	0x00bb8000
    }
  }
#endif

#if defined(SAI4)
  else if (PeriphClk == RCC_PERIPHCLK_SAI4A)
 800589c:	e9d7 2300 	ldrd	r2, r3, [r7]
 80058a0:	f5a2 6180 	sub.w	r1, r2, #1024	; 0x400
 80058a4:	430b      	orrs	r3, r1
 80058a6:	f040 809c 	bne.w	80059e2 <HAL_RCCEx_GetPeriphCLKFreq+0x3ee>
  {

    saiclocksource = __HAL_RCC_GET_SAI4A_SOURCE();
 80058aa:	4b9e      	ldr	r3, [pc, #632]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80058ae:	f403 0360 	and.w	r3, r3, #14680064	; 0xe00000
 80058b2:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80058b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058b6:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058ba:	d054      	beq.n	8005966 <HAL_RCCEx_GetPeriphCLKFreq+0x372>
 80058bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058be:	f5b3 0f00 	cmp.w	r3, #8388608	; 0x800000
 80058c2:	f200 808b 	bhi.w	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80058c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058c8:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80058cc:	f000 8083 	beq.w	80059d6 <HAL_RCCEx_GetPeriphCLKFreq+0x3e2>
 80058d0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058d2:	f5b3 0fc0 	cmp.w	r3, #6291456	; 0x600000
 80058d6:	f200 8081 	bhi.w	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80058da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058dc:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058e0:	d02f      	beq.n	8005942 <HAL_RCCEx_GetPeriphCLKFreq+0x34e>
 80058e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80058e8:	d878      	bhi.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
 80058ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d004      	beq.n	80058fa <HAL_RCCEx_GetPeriphCLKFreq+0x306>
 80058f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058f2:	f5b3 1f00 	cmp.w	r3, #2097152	; 0x200000
 80058f6:	d012      	beq.n	800591e <HAL_RCCEx_GetPeriphCLKFreq+0x32a>
 80058f8:	e070      	b.n	80059dc <HAL_RCCEx_GetPeriphCLKFreq+0x3e8>
    {
      case RCC_SAI4ACLKSOURCE_PLL: /* PLL1 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 80058fa:	4b8a      	ldr	r3, [pc, #552]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80058fc:	681b      	ldr	r3, [r3, #0]
 80058fe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005902:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005906:	d107      	bne.n	8005918 <HAL_RCCEx_GetPeriphCLKFreq+0x324>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005908:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800590c:	4618      	mov	r0, r3
 800590e:	f000 feaf 	bl	8006670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005914:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005916:	e3e4      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005918:	2300      	movs	r3, #0
 800591a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800591c:	e3e1      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4ACLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 800591e:	4b81      	ldr	r3, [pc, #516]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005926:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 800592a:	d107      	bne.n	800593c <HAL_RCCEx_GetPeriphCLKFreq+0x348>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 800592c:	f107 0318 	add.w	r3, r7, #24
 8005930:	4618      	mov	r0, r3
 8005932:	f000 fbf5 	bl	8006120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005936:	69bb      	ldr	r3, [r7, #24]
 8005938:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800593a:	e3d2      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800593c:	2300      	movs	r3, #0
 800593e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005940:	e3cf      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4A */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005942:	4b78      	ldr	r3, [pc, #480]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005944:	681b      	ldr	r3, [r3, #0]
 8005946:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800594a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800594e:	d107      	bne.n	8005960 <HAL_RCCEx_GetPeriphCLKFreq+0x36c>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005950:	f107 030c 	add.w	r3, r7, #12
 8005954:	4618      	mov	r0, r3
 8005956:	f000 fd37 	bl	80063c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 800595a:	68fb      	ldr	r3, [r7, #12]
 800595c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 800595e:	e3c0      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005960:	2300      	movs	r3, #0
 8005962:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005964:	e3bd      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_CLKP: /* CKPER is the clock source for SAI4A*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005966:	4b6f      	ldr	r3, [pc, #444]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005968:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800596a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800596e:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005970:	4b6c      	ldr	r3, [pc, #432]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005972:	681b      	ldr	r3, [r3, #0]
 8005974:	f003 0304 	and.w	r3, r3, #4
 8005978:	2b04      	cmp	r3, #4
 800597a:	d10c      	bne.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
 800597c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800597e:	2b00      	cmp	r3, #0
 8005980:	d109      	bne.n	8005996 <HAL_RCCEx_GetPeriphCLKFreq+0x3a2>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005982:	4b68      	ldr	r3, [pc, #416]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005984:	681b      	ldr	r3, [r3, #0]
 8005986:	08db      	lsrs	r3, r3, #3
 8005988:	f003 0303 	and.w	r3, r3, #3
 800598c:	4a66      	ldr	r2, [pc, #408]	; (8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 800598e:	fa22 f303 	lsr.w	r3, r2, r3
 8005992:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005994:	e01e      	b.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005996:	4b63      	ldr	r3, [pc, #396]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005998:	681b      	ldr	r3, [r3, #0]
 800599a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800599e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80059a2:	d106      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
 80059a4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059a6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 80059aa:	d102      	bne.n	80059b2 <HAL_RCCEx_GetPeriphCLKFreq+0x3be>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 80059ac:	4b5f      	ldr	r3, [pc, #380]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 80059ae:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059b0:	e010      	b.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 80059b2:	4b5c      	ldr	r3, [pc, #368]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80059ba:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80059be:	d106      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
 80059c0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059c2:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80059c6:	d102      	bne.n	80059ce <HAL_RCCEx_GetPeriphCLKFreq+0x3da>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 80059c8:	4b59      	ldr	r3, [pc, #356]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 80059ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80059cc:	e002      	b.n	80059d4 <HAL_RCCEx_GetPeriphCLKFreq+0x3e0>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 80059ce:	2300      	movs	r3, #0
 80059d0:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 80059d2:	e386      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 80059d4:	e385      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4ACLKSOURCE_PIN: /* External clock is the clock source for SAI4A */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 80059d6:	4b57      	ldr	r3, [pc, #348]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 80059d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059da:	e382      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 80059dc:	2300      	movs	r3, #0
 80059de:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80059e0:	e37f      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }

  else if (PeriphClk == RCC_PERIPHCLK_SAI4B)
 80059e2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80059e6:	f5a2 6100 	sub.w	r1, r2, #2048	; 0x800
 80059ea:	430b      	orrs	r3, r1
 80059ec:	f040 80a7 	bne.w	8005b3e <HAL_RCCEx_GetPeriphCLKFreq+0x54a>
  {

    saiclocksource = __HAL_RCC_GET_SAI4B_SOURCE();
 80059f0:	4b4c      	ldr	r3, [pc, #304]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 80059f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80059f4:	f003 63e0 	and.w	r3, r3, #117440512	; 0x7000000
 80059f8:	633b      	str	r3, [r7, #48]	; 0x30

    switch (saiclocksource)
 80059fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059fc:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a00:	d055      	beq.n	8005aae <HAL_RCCEx_GetPeriphCLKFreq+0x4ba>
 8005a02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a04:	f1b3 6f80 	cmp.w	r3, #67108864	; 0x4000000
 8005a08:	f200 8096 	bhi.w	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005a0c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a0e:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a12:	f000 8084 	beq.w	8005b1e <HAL_RCCEx_GetPeriphCLKFreq+0x52a>
 8005a16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a18:	f1b3 7f40 	cmp.w	r3, #50331648	; 0x3000000
 8005a1c:	f200 808c 	bhi.w	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005a20:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a22:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a26:	d030      	beq.n	8005a8a <HAL_RCCEx_GetPeriphCLKFreq+0x496>
 8005a28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a2a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a2e:	f200 8083 	bhi.w	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
 8005a32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d004      	beq.n	8005a42 <HAL_RCCEx_GetPeriphCLKFreq+0x44e>
 8005a38:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a3a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8005a3e:	d012      	beq.n	8005a66 <HAL_RCCEx_GetPeriphCLKFreq+0x472>
 8005a40:	e07a      	b.n	8005b38 <HAL_RCCEx_GetPeriphCLKFreq+0x544>
    {
      case RCC_SAI4BCLKSOURCE_PLL: /* PLL1 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005a42:	4b38      	ldr	r3, [pc, #224]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a44:	681b      	ldr	r3, [r3, #0]
 8005a46:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005a4a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005a4e:	d107      	bne.n	8005a60 <HAL_RCCEx_GetPeriphCLKFreq+0x46c>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005a50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005a54:	4618      	mov	r0, r3
 8005a56:	f000 fe0b 	bl	8006670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005a5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005a5c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a5e:	e340      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a60:	2300      	movs	r3, #0
 8005a62:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a64:	e33d      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SAI4BCLKSOURCE_PLL2: /* PLLI2 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005a66:	4b2f      	ldr	r3, [pc, #188]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a68:	681b      	ldr	r3, [r3, #0]
 8005a6a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005a6e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005a72:	d107      	bne.n	8005a84 <HAL_RCCEx_GetPeriphCLKFreq+0x490>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005a74:	f107 0318 	add.w	r3, r7, #24
 8005a78:	4618      	mov	r0, r3
 8005a7a:	f000 fb51 	bl	8006120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005a7e:	69bb      	ldr	r3, [r7, #24]
 8005a80:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005a82:	e32e      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005a84:	2300      	movs	r3, #0
 8005a86:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005a88:	e32b      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PLL3: /* PLLI3 is the clock source for SAI4B */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005a8a:	4b26      	ldr	r3, [pc, #152]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005a92:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005a96:	d107      	bne.n	8005aa8 <HAL_RCCEx_GetPeriphCLKFreq+0x4b4>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005a98:	f107 030c 	add.w	r3, r7, #12
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f000 fc93 	bl	80063c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005aa2:	68fb      	ldr	r3, [r7, #12]
 8005aa4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005aa6:	e31c      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005aa8:	2300      	movs	r3, #0
 8005aaa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005aac:	e319      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_CLKP: /* CKPER is the clock source for SAI4B*/
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005aae:	4b1d      	ldr	r3, [pc, #116]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ab0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005ab2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005ab6:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005ab8:	4b1a      	ldr	r3, [pc, #104]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0304 	and.w	r3, r3, #4
 8005ac0:	2b04      	cmp	r3, #4
 8005ac2:	d10c      	bne.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
 8005ac4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005ac6:	2b00      	cmp	r3, #0
 8005ac8:	d109      	bne.n	8005ade <HAL_RCCEx_GetPeriphCLKFreq+0x4ea>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005aca:	4b16      	ldr	r3, [pc, #88]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	08db      	lsrs	r3, r3, #3
 8005ad0:	f003 0303 	and.w	r3, r3, #3
 8005ad4:	4a14      	ldr	r2, [pc, #80]	; (8005b28 <HAL_RCCEx_GetPeriphCLKFreq+0x534>)
 8005ad6:	fa22 f303 	lsr.w	r3, r2, r3
 8005ada:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005adc:	e01e      	b.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005ade:	4b11      	ldr	r3, [pc, #68]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ae6:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005aea:	d106      	bne.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
 8005aec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005aee:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005af2:	d102      	bne.n	8005afa <HAL_RCCEx_GetPeriphCLKFreq+0x506>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005af4:	4b0d      	ldr	r3, [pc, #52]	; (8005b2c <HAL_RCCEx_GetPeriphCLKFreq+0x538>)
 8005af6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005af8:	e010      	b.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005afa:	4b0a      	ldr	r3, [pc, #40]	; (8005b24 <HAL_RCCEx_GetPeriphCLKFreq+0x530>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005b02:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005b06:	d106      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
 8005b08:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b0a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005b0e:	d102      	bne.n	8005b16 <HAL_RCCEx_GetPeriphCLKFreq+0x522>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005b10:	4b07      	ldr	r3, [pc, #28]	; (8005b30 <HAL_RCCEx_GetPeriphCLKFreq+0x53c>)
 8005b12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005b14:	e002      	b.n	8005b1c <HAL_RCCEx_GetPeriphCLKFreq+0x528>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005b16:	2300      	movs	r3, #0
 8005b18:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005b1a:	e2e2      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b1c:	e2e1      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SAI4BCLKSOURCE_PIN: /* External clock is the clock source for SAI4B */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005b1e:	4b05      	ldr	r3, [pc, #20]	; (8005b34 <HAL_RCCEx_GetPeriphCLKFreq+0x540>)
 8005b20:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b22:	e2de      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005b24:	58024400 	.word	0x58024400
 8005b28:	03d09000 	.word	0x03d09000
 8005b2c:	003d0900 	.word	0x003d0900
 8005b30:	017d7840 	.word	0x017d7840
 8005b34:	00bb8000 	.word	0x00bb8000
      }

      default :
      {
        frequency = 0;
 8005b38:	2300      	movs	r3, #0
 8005b3a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005b3c:	e2d1      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
#endif /*SAI4*/
  else if (PeriphClk == RCC_PERIPHCLK_SPI123)
 8005b3e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005b42:	f5a2 5180 	sub.w	r1, r2, #4096	; 0x1000
 8005b46:	430b      	orrs	r3, r1
 8005b48:	f040 809c 	bne.w	8005c84 <HAL_RCCEx_GetPeriphCLKFreq+0x690>
  {
    /* Get SPI1/2/3 clock source */
    srcclk = __HAL_RCC_GET_SPI123_SOURCE();
 8005b4c:	4b93      	ldr	r3, [pc, #588]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b50:	f403 43e0 	and.w	r3, r3, #28672	; 0x7000
 8005b54:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005b56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b58:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b5c:	d054      	beq.n	8005c08 <HAL_RCCEx_GetPeriphCLKFreq+0x614>
 8005b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b60:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005b64:	f200 808b 	bhi.w	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005b68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6a:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b6e:	f000 8083 	beq.w	8005c78 <HAL_RCCEx_GetPeriphCLKFreq+0x684>
 8005b72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b74:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 8005b78:	f200 8081 	bhi.w	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005b7c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b7e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b82:	d02f      	beq.n	8005be4 <HAL_RCCEx_GetPeriphCLKFreq+0x5f0>
 8005b84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005b8a:	d878      	bhi.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
 8005b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b8e:	2b00      	cmp	r3, #0
 8005b90:	d004      	beq.n	8005b9c <HAL_RCCEx_GetPeriphCLKFreq+0x5a8>
 8005b92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005b98:	d012      	beq.n	8005bc0 <HAL_RCCEx_GetPeriphCLKFreq+0x5cc>
 8005b9a:	e070      	b.n	8005c7e <HAL_RCCEx_GetPeriphCLKFreq+0x68a>
    {
      case RCC_SPI123CLKSOURCE_PLL: /* PLL1 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005b9c:	4b7f      	ldr	r3, [pc, #508]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005b9e:	681b      	ldr	r3, [r3, #0]
 8005ba0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ba4:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ba8:	d107      	bne.n	8005bba <HAL_RCCEx_GetPeriphCLKFreq+0x5c6>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005baa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005bae:	4618      	mov	r0, r3
 8005bb0:	f000 fd5e 	bl	8006670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005bb6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bb8:	e293      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005bbe:	e290      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI123CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005bc0:	4b76      	ldr	r3, [pc, #472]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005bc2:	681b      	ldr	r3, [r3, #0]
 8005bc4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005bc8:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005bcc:	d107      	bne.n	8005bde <HAL_RCCEx_GetPeriphCLKFreq+0x5ea>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005bce:	f107 0318 	add.w	r3, r7, #24
 8005bd2:	4618      	mov	r0, r3
 8005bd4:	f000 faa4 	bl	8006120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005bd8:	69bb      	ldr	r3, [r7, #24]
 8005bda:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005bdc:	e281      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005bde:	2300      	movs	r3, #0
 8005be0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005be2:	e27e      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI123 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005be4:	4b6d      	ldr	r3, [pc, #436]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005be6:	681b      	ldr	r3, [r3, #0]
 8005be8:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005bec:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005bf0:	d107      	bne.n	8005c02 <HAL_RCCEx_GetPeriphCLKFreq+0x60e>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005bf2:	f107 030c 	add.w	r3, r7, #12
 8005bf6:	4618      	mov	r0, r3
 8005bf8:	f000 fbe6 	bl	80063c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_P_Frequency;
 8005bfc:	68fb      	ldr	r3, [r7, #12]
 8005bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005c00:	e26f      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005c02:	2300      	movs	r3, #0
 8005c04:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c06:	e26c      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_SPI123CLKSOURCE_CLKP: /* CKPER is the clock source for SPI123 */
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005c08:	4b64      	ldr	r3, [pc, #400]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005c0c:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005c10:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005c12:	4b62      	ldr	r3, [pc, #392]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c14:	681b      	ldr	r3, [r3, #0]
 8005c16:	f003 0304 	and.w	r3, r3, #4
 8005c1a:	2b04      	cmp	r3, #4
 8005c1c:	d10c      	bne.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
 8005c1e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d109      	bne.n	8005c38 <HAL_RCCEx_GetPeriphCLKFreq+0x644>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005c24:	4b5d      	ldr	r3, [pc, #372]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c26:	681b      	ldr	r3, [r3, #0]
 8005c28:	08db      	lsrs	r3, r3, #3
 8005c2a:	f003 0303 	and.w	r3, r3, #3
 8005c2e:	4a5c      	ldr	r2, [pc, #368]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005c30:	fa22 f303 	lsr.w	r3, r2, r3
 8005c34:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c36:	e01e      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005c38:	4b58      	ldr	r3, [pc, #352]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c40:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005c44:	d106      	bne.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
 8005c46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c48:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005c4c:	d102      	bne.n	8005c54 <HAL_RCCEx_GetPeriphCLKFreq+0x660>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005c4e:	4b55      	ldr	r3, [pc, #340]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005c50:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c52:	e010      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005c54:	4b51      	ldr	r3, [pc, #324]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005c5c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005c60:	d106      	bne.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
 8005c62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c64:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005c68:	d102      	bne.n	8005c70 <HAL_RCCEx_GetPeriphCLKFreq+0x67c>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005c6a:	4b4f      	ldr	r3, [pc, #316]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005c6c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005c6e:	e002      	b.n	8005c76 <HAL_RCCEx_GetPeriphCLKFreq+0x682>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005c70:	2300      	movs	r3, #0
 8005c72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005c74:	e235      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005c76:	e234      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case (RCC_SPI123CLKSOURCE_PIN): /* External clock is the clock source for I2S */
      {
        frequency = EXTERNAL_CLOCK_VALUE;
 8005c78:	4b4c      	ldr	r3, [pc, #304]	; (8005dac <HAL_RCCEx_GetPeriphCLKFreq+0x7b8>)
 8005c7a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c7c:	e231      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005c7e:	2300      	movs	r3, #0
 8005c80:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005c82:	e22e      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI45)
 8005c84:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005c88:	f5a2 5100 	sub.w	r1, r2, #8192	; 0x2000
 8005c8c:	430b      	orrs	r3, r1
 8005c8e:	f040 808f 	bne.w	8005db0 <HAL_RCCEx_GetPeriphCLKFreq+0x7bc>
  {
    /* Get SPI45 clock source */
    srcclk = __HAL_RCC_GET_SPI45_SOURCE();
 8005c92:	4b42      	ldr	r3, [pc, #264]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c96:	f403 23e0 	and.w	r3, r3, #458752	; 0x70000
 8005c9a:	63bb      	str	r3, [r7, #56]	; 0x38
    switch (srcclk)
 8005c9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c9e:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005ca2:	d06b      	beq.n	8005d7c <HAL_RCCEx_GetPeriphCLKFreq+0x788>
 8005ca4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ca6:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005caa:	d874      	bhi.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005cac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cae:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cb2:	d056      	beq.n	8005d62 <HAL_RCCEx_GetPeriphCLKFreq+0x76e>
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb6:	f5b3 2f80 	cmp.w	r3, #262144	; 0x40000
 8005cba:	d86c      	bhi.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cc2:	d03b      	beq.n	8005d3c <HAL_RCCEx_GetPeriphCLKFreq+0x748>
 8005cc4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc6:	f5b3 3f40 	cmp.w	r3, #196608	; 0x30000
 8005cca:	d864      	bhi.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005ccc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cce:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cd2:	d021      	beq.n	8005d18 <HAL_RCCEx_GetPeriphCLKFreq+0x724>
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005cda:	d85c      	bhi.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
 8005cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cde:	2b00      	cmp	r3, #0
 8005ce0:	d004      	beq.n	8005cec <HAL_RCCEx_GetPeriphCLKFreq+0x6f8>
 8005ce2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ce8:	d004      	beq.n	8005cf4 <HAL_RCCEx_GetPeriphCLKFreq+0x700>
 8005cea:	e054      	b.n	8005d96 <HAL_RCCEx_GetPeriphCLKFreq+0x7a2>
    {
      case RCC_SPI45CLKSOURCE_PCLK2: /* CD/D2 PCLK2 is the clock source for SPI4/5 */
      {
        frequency = HAL_RCC_GetPCLK1Freq();
 8005cec:	f7fe fa0c 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 8005cf0:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005cf2:	e1f6      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005cf4:	4b29      	ldr	r3, [pc, #164]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005cfc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005d00:	d107      	bne.n	8005d12 <HAL_RCCEx_GetPeriphCLKFreq+0x71e>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005d02:	f107 0318 	add.w	r3, r7, #24
 8005d06:	4618      	mov	r0, r3
 8005d08:	f000 fa0a 	bl	8006120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005d0c:	69fb      	ldr	r3, [r7, #28]
 8005d0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d10:	e1e7      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d12:	2300      	movs	r3, #0
 8005d14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d16:	e1e4      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005d18:	4b20      	ldr	r3, [pc, #128]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005d20:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005d24:	d107      	bne.n	8005d36 <HAL_RCCEx_GetPeriphCLKFreq+0x742>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005d26:	f107 030c 	add.w	r3, r7, #12
 8005d2a:	4618      	mov	r0, r3
 8005d2c:	f000 fb4c 	bl	80063c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005d30:	693b      	ldr	r3, [r7, #16]
 8005d32:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d34:	e1d5      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d36:	2300      	movs	r3, #0
 8005d38:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d3a:	e1d2      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSI: /* HSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005d3c:	4b17      	ldr	r3, [pc, #92]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f003 0304 	and.w	r3, r3, #4
 8005d44:	2b04      	cmp	r3, #4
 8005d46:	d109      	bne.n	8005d5c <HAL_RCCEx_GetPeriphCLKFreq+0x768>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005d48:	4b14      	ldr	r3, [pc, #80]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	08db      	lsrs	r3, r3, #3
 8005d4e:	f003 0303 	and.w	r3, r3, #3
 8005d52:	4a13      	ldr	r2, [pc, #76]	; (8005da0 <HAL_RCCEx_GetPeriphCLKFreq+0x7ac>)
 8005d54:	fa22 f303 	lsr.w	r3, r2, r3
 8005d58:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d5a:	e1c2      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d60:	e1bf      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_CSI: /* CSI is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005d62:	4b0e      	ldr	r3, [pc, #56]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d64:	681b      	ldr	r3, [r3, #0]
 8005d66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d6a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005d6e:	d102      	bne.n	8005d76 <HAL_RCCEx_GetPeriphCLKFreq+0x782>
        {
          frequency = CSI_VALUE;
 8005d70:	4b0c      	ldr	r3, [pc, #48]	; (8005da4 <HAL_RCCEx_GetPeriphCLKFreq+0x7b0>)
 8005d72:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d74:	e1b5      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d76:	2300      	movs	r3, #0
 8005d78:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d7a:	e1b2      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI45CLKSOURCE_HSE: /* HSE is the clock source for SPI45 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8005d7c:	4b07      	ldr	r3, [pc, #28]	; (8005d9c <HAL_RCCEx_GetPeriphCLKFreq+0x7a8>)
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d84:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005d88:	d102      	bne.n	8005d90 <HAL_RCCEx_GetPeriphCLKFreq+0x79c>
        {
          frequency = HSE_VALUE;
 8005d8a:	4b07      	ldr	r3, [pc, #28]	; (8005da8 <HAL_RCCEx_GetPeriphCLKFreq+0x7b4>)
 8005d8c:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005d8e:	e1a8      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005d90:	2300      	movs	r3, #0
 8005d92:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d94:	e1a5      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 8005d96:	2300      	movs	r3, #0
 8005d98:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005d9a:	e1a2      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005d9c:	58024400 	.word	0x58024400
 8005da0:	03d09000 	.word	0x03d09000
 8005da4:	003d0900 	.word	0x003d0900
 8005da8:	017d7840 	.word	0x017d7840
 8005dac:	00bb8000 	.word	0x00bb8000
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_ADC)
 8005db0:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005db4:	f5a2 2100 	sub.w	r1, r2, #524288	; 0x80000
 8005db8:	430b      	orrs	r3, r1
 8005dba:	d173      	bne.n	8005ea4 <HAL_RCCEx_GetPeriphCLKFreq+0x8b0>
  {
    /* Get ADC clock source */
    srcclk = __HAL_RCC_GET_ADC_SOURCE();
 8005dbc:	4b9c      	ldr	r3, [pc, #624]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005dbe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005dc0:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8005dc4:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005dc6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dc8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dcc:	d02f      	beq.n	8005e2e <HAL_RCCEx_GetPeriphCLKFreq+0x83a>
 8005dce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd0:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005dd4:	d863      	bhi.n	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
 8005dd6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dd8:	2b00      	cmp	r3, #0
 8005dda:	d004      	beq.n	8005de6 <HAL_RCCEx_GetPeriphCLKFreq+0x7f2>
 8005ddc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dde:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005de2:	d012      	beq.n	8005e0a <HAL_RCCEx_GetPeriphCLKFreq+0x816>
 8005de4:	e05b      	b.n	8005e9e <HAL_RCCEx_GetPeriphCLKFreq+0x8aa>
    {
      case RCC_ADCCLKSOURCE_PLL2:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005de6:	4b92      	ldr	r3, [pc, #584]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005dee:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005df2:	d107      	bne.n	8005e04 <HAL_RCCEx_GetPeriphCLKFreq+0x810>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005df4:	f107 0318 	add.w	r3, r7, #24
 8005df8:	4618      	mov	r0, r3
 8005dfa:	f000 f991 	bl	8006120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_P_Frequency;
 8005dfe:	69bb      	ldr	r3, [r7, #24]
 8005e00:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e02:	e16e      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e04:	2300      	movs	r3, #0
 8005e06:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e08:	e16b      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_ADCCLKSOURCE_PLL3:
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005e0a:	4b89      	ldr	r3, [pc, #548]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e0c:	681b      	ldr	r3, [r3, #0]
 8005e0e:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005e12:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e16:	d107      	bne.n	8005e28 <HAL_RCCEx_GetPeriphCLKFreq+0x834>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005e18:	f107 030c 	add.w	r3, r7, #12
 8005e1c:	4618      	mov	r0, r3
 8005e1e:	f000 fad3 	bl	80063c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_R_Frequency;
 8005e22:	697b      	ldr	r3, [r7, #20]
 8005e24:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005e26:	e15c      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005e28:	2300      	movs	r3, #0
 8005e2a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005e2c:	e159      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      case RCC_ADCCLKSOURCE_CLKP:
      {

        ckpclocksource = __HAL_RCC_GET_CLKP_SOURCE();
 8005e2e:	4b80      	ldr	r3, [pc, #512]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e30:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005e32:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8005e36:	637b      	str	r3, [r7, #52]	; 0x34

        if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSI))
 8005e38:	4b7d      	ldr	r3, [pc, #500]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f003 0304 	and.w	r3, r3, #4
 8005e40:	2b04      	cmp	r3, #4
 8005e42:	d10c      	bne.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
 8005e44:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e46:	2b00      	cmp	r3, #0
 8005e48:	d109      	bne.n	8005e5e <HAL_RCCEx_GetPeriphCLKFreq+0x86a>
        {
          /* In Case the CKPER Source is HSI */
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005e4a:	4b79      	ldr	r3, [pc, #484]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	08db      	lsrs	r3, r3, #3
 8005e50:	f003 0303 	and.w	r3, r3, #3
 8005e54:	4a77      	ldr	r2, [pc, #476]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005e56:	fa22 f303 	lsr.w	r3, r2, r3
 8005e5a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e5c:	e01e      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY)) && (ckpclocksource == RCC_CLKPSOURCE_CSI))
 8005e5e:	4b74      	ldr	r3, [pc, #464]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e66:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8005e6a:	d106      	bne.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
 8005e6c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e6e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005e72:	d102      	bne.n	8005e7a <HAL_RCCEx_GetPeriphCLKFreq+0x886>
        {
          /* In Case the CKPER Source is CSI */
          frequency = CSI_VALUE;
 8005e74:	4b70      	ldr	r3, [pc, #448]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8005e76:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e78:	e010      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else if ((HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY)) && (ckpclocksource == RCC_CLKPSOURCE_HSE))
 8005e7a:	4b6d      	ldr	r3, [pc, #436]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005e7c:	681b      	ldr	r3, [r3, #0]
 8005e7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005e82:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8005e86:	d106      	bne.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
 8005e88:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005e8a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005e8e:	d102      	bne.n	8005e96 <HAL_RCCEx_GetPeriphCLKFreq+0x8a2>
        {
          /* In Case the CKPER Source is HSE */
          frequency = HSE_VALUE;
 8005e90:	4b6a      	ldr	r3, [pc, #424]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8005e92:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005e94:	e002      	b.n	8005e9c <HAL_RCCEx_GetPeriphCLKFreq+0x8a8>
        }

        else
        {
          /* In Case the CKPER is disabled*/
          frequency = 0;
 8005e96:	2300      	movs	r3, #0
 8005e98:	63fb      	str	r3, [r7, #60]	; 0x3c
        }

        break;
 8005e9a:	e122      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8005e9c:	e121      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005e9e:	2300      	movs	r3, #0
 8005ea0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ea2:	e11e      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SDMMC)
 8005ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005ea8:	f5a2 3180 	sub.w	r1, r2, #65536	; 0x10000
 8005eac:	430b      	orrs	r3, r1
 8005eae:	d133      	bne.n	8005f18 <HAL_RCCEx_GetPeriphCLKFreq+0x924>
  {
    /* Get SDMMC clock source */
    srcclk = __HAL_RCC_GET_SDMMC_SOURCE();
 8005eb0:	4b5f      	ldr	r3, [pc, #380]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005eb2:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005eb8:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005eba:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ebc:	2b00      	cmp	r3, #0
 8005ebe:	d004      	beq.n	8005eca <HAL_RCCEx_GetPeriphCLKFreq+0x8d6>
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005ec6:	d012      	beq.n	8005eee <HAL_RCCEx_GetPeriphCLKFreq+0x8fa>
 8005ec8:	e023      	b.n	8005f12 <HAL_RCCEx_GetPeriphCLKFreq+0x91e>
    {
      case RCC_SDMMCCLKSOURCE_PLL: /* PLL1 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8005eca:	4b59      	ldr	r3, [pc, #356]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ecc:	681b      	ldr	r3, [r3, #0]
 8005ece:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005ed2:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8005ed6:	d107      	bne.n	8005ee8 <HAL_RCCEx_GetPeriphCLKFreq+0x8f4>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 8005ed8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005edc:	4618      	mov	r0, r3
 8005ede:	f000 fbc7 	bl	8006670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 8005ee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005ee4:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005ee6:	e0fc      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ee8:	2300      	movs	r3, #0
 8005eea:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005eec:	e0f9      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SDMMCCLKSOURCE_PLL2: /* PLL2 is the clock source for SDMMC */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005eee:	4b50      	ldr	r3, [pc, #320]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005ef6:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005efa:	d107      	bne.n	8005f0c <HAL_RCCEx_GetPeriphCLKFreq+0x918>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005efc:	f107 0318 	add.w	r3, r7, #24
 8005f00:	4618      	mov	r0, r3
 8005f02:	f000 f90d 	bl	8006120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_R_Frequency;
 8005f06:	6a3b      	ldr	r3, [r7, #32]
 8005f08:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005f0a:	e0ea      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005f0c:	2300      	movs	r3, #0
 8005f0e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f10:	e0e7      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }

      default :
      {
        frequency = 0;
 8005f12:	2300      	movs	r3, #0
 8005f14:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005f16:	e0e4      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_SPI6)
 8005f18:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005f1c:	f5a2 4180 	sub.w	r1, r2, #16384	; 0x4000
 8005f20:	430b      	orrs	r3, r1
 8005f22:	f040 808d 	bne.w	8006040 <HAL_RCCEx_GetPeriphCLKFreq+0xa4c>
  {
    /* Get SPI6 clock source */
    srcclk = __HAL_RCC_GET_SPI6_SOURCE();
 8005f26:	4b42      	ldr	r3, [pc, #264]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8005f2a:	f003 43e0 	and.w	r3, r3, #1879048192	; 0x70000000
 8005f2e:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8005f30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f32:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f36:	d06b      	beq.n	8006010 <HAL_RCCEx_GetPeriphCLKFreq+0xa1c>
 8005f38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f3a:	f1b3 4fa0 	cmp.w	r3, #1342177280	; 0x50000000
 8005f3e:	d874      	bhi.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005f40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f42:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f46:	d056      	beq.n	8005ff6 <HAL_RCCEx_GetPeriphCLKFreq+0xa02>
 8005f48:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f4a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f4e:	d86c      	bhi.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005f50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f52:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f56:	d03b      	beq.n	8005fd0 <HAL_RCCEx_GetPeriphCLKFreq+0x9dc>
 8005f58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f5a:	f1b3 5f40 	cmp.w	r3, #805306368	; 0x30000000
 8005f5e:	d864      	bhi.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005f60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f62:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f66:	d021      	beq.n	8005fac <HAL_RCCEx_GetPeriphCLKFreq+0x9b8>
 8005f68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f6a:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005f6e:	d85c      	bhi.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
 8005f70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f72:	2b00      	cmp	r3, #0
 8005f74:	d004      	beq.n	8005f80 <HAL_RCCEx_GetPeriphCLKFreq+0x98c>
 8005f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f78:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8005f7c:	d004      	beq.n	8005f88 <HAL_RCCEx_GetPeriphCLKFreq+0x994>
 8005f7e:	e054      	b.n	800602a <HAL_RCCEx_GetPeriphCLKFreq+0xa36>
    {
      case RCC_SPI6CLKSOURCE_D3PCLK1: /* D3PCLK1 (PCLK4) is the clock source for SPI6 */
      {
        frequency = HAL_RCCEx_GetD3PCLK1Freq();
 8005f80:	f000 f8b8 	bl	80060f4 <HAL_RCCEx_GetD3PCLK1Freq>
 8005f84:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8005f86:	e0ac      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL2: /* PLL2 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 8005f88:	4b29      	ldr	r3, [pc, #164]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005f8a:	681b      	ldr	r3, [r3, #0]
 8005f8c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005f90:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8005f94:	d107      	bne.n	8005fa6 <HAL_RCCEx_GetPeriphCLKFreq+0x9b2>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8005f96:	f107 0318 	add.w	r3, r7, #24
 8005f9a:	4618      	mov	r0, r3
 8005f9c:	f000 f8c0 	bl	8006120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 8005fa0:	69fb      	ldr	r3, [r7, #28]
 8005fa2:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fa4:	e09d      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fa6:	2300      	movs	r3, #0
 8005fa8:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005faa:	e09a      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_PLL3: /* PLL3 is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL3RDY))
 8005fac:	4b20      	ldr	r3, [pc, #128]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fae:	681b      	ldr	r3, [r3, #0]
 8005fb0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8005fb4:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8005fb8:	d107      	bne.n	8005fca <HAL_RCCEx_GetPeriphCLKFreq+0x9d6>
        {
          HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8005fba:	f107 030c 	add.w	r3, r7, #12
 8005fbe:	4618      	mov	r0, r3
 8005fc0:	f000 fa02 	bl	80063c8 <HAL_RCCEx_GetPLL3ClockFreq>
          frequency = pll3_clocks.PLL3_Q_Frequency;
 8005fc4:	693b      	ldr	r3, [r7, #16]
 8005fc6:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fc8:	e08b      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005fca:	2300      	movs	r3, #0
 8005fcc:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005fce:	e088      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSI: /* HSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSIRDY))
 8005fd0:	4b17      	ldr	r3, [pc, #92]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	f003 0304 	and.w	r3, r3, #4
 8005fd8:	2b04      	cmp	r3, #4
 8005fda:	d109      	bne.n	8005ff0 <HAL_RCCEx_GetPeriphCLKFreq+0x9fc>
        {
          frequency = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8005fdc:	4b14      	ldr	r3, [pc, #80]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	08db      	lsrs	r3, r3, #3
 8005fe2:	f003 0303 	and.w	r3, r3, #3
 8005fe6:	4a13      	ldr	r2, [pc, #76]	; (8006034 <HAL_RCCEx_GetPeriphCLKFreq+0xa40>)
 8005fe8:	fa22 f303 	lsr.w	r3, r2, r3
 8005fec:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8005fee:	e078      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8005ff0:	2300      	movs	r3, #0
 8005ff2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8005ff4:	e075      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_CSI: /* CSI is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_CSIRDY))
 8005ff6:	4b0e      	ldr	r3, [pc, #56]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8005ff8:	681b      	ldr	r3, [r3, #0]
 8005ffa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005ffe:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006002:	d102      	bne.n	800600a <HAL_RCCEx_GetPeriphCLKFreq+0xa16>
        {
          frequency = CSI_VALUE;
 8006004:	4b0c      	ldr	r3, [pc, #48]	; (8006038 <HAL_RCCEx_GetPeriphCLKFreq+0xa44>)
 8006006:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006008:	e06b      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800600a:	2300      	movs	r3, #0
 800600c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800600e:	e068      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_SPI6CLKSOURCE_HSE: /* HSE is the clock source for SPI6 */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006010:	4b07      	ldr	r3, [pc, #28]	; (8006030 <HAL_RCCEx_GetPeriphCLKFreq+0xa3c>)
 8006012:	681b      	ldr	r3, [r3, #0]
 8006014:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006018:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 800601c:	d102      	bne.n	8006024 <HAL_RCCEx_GetPeriphCLKFreq+0xa30>
        {
          frequency = HSE_VALUE;
 800601e:	4b07      	ldr	r3, [pc, #28]	; (800603c <HAL_RCCEx_GetPeriphCLKFreq+0xa48>)
 8006020:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006022:	e05e      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 8006024:	2300      	movs	r3, #0
 8006026:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8006028:	e05b      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
        break;
      }
#endif /* RCC_SPI6CLKSOURCE_PIN */
      default :
      {
        frequency = 0;
 800602a:	2300      	movs	r3, #0
 800602c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800602e:	e058      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
 8006030:	58024400 	.word	0x58024400
 8006034:	03d09000 	.word	0x03d09000
 8006038:	003d0900 	.word	0x003d0900
 800603c:	017d7840 	.word	0x017d7840
      }
    }
  }
  else if (PeriphClk == RCC_PERIPHCLK_FDCAN)
 8006040:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006044:	f5a2 4100 	sub.w	r1, r2, #32768	; 0x8000
 8006048:	430b      	orrs	r3, r1
 800604a:	d148      	bne.n	80060de <HAL_RCCEx_GetPeriphCLKFreq+0xaea>
  {
    /* Get FDCAN clock source */
    srcclk = __HAL_RCC_GET_FDCAN_SOURCE();
 800604c:	4b27      	ldr	r3, [pc, #156]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 800604e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006050:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8006054:	63bb      	str	r3, [r7, #56]	; 0x38

    switch (srcclk)
 8006056:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006058:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 800605c:	d02a      	beq.n	80060b4 <HAL_RCCEx_GetPeriphCLKFreq+0xac0>
 800605e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006060:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8006064:	d838      	bhi.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
 8006066:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006068:	2b00      	cmp	r3, #0
 800606a:	d004      	beq.n	8006076 <HAL_RCCEx_GetPeriphCLKFreq+0xa82>
 800606c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800606e:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 8006072:	d00d      	beq.n	8006090 <HAL_RCCEx_GetPeriphCLKFreq+0xa9c>
 8006074:	e030      	b.n	80060d8 <HAL_RCCEx_GetPeriphCLKFreq+0xae4>
    {
      case RCC_FDCANCLKSOURCE_HSE: /* HSE is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 8006076:	4b1d      	ldr	r3, [pc, #116]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800607e:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006082:	d102      	bne.n	800608a <HAL_RCCEx_GetPeriphCLKFreq+0xa96>
        {
          frequency = HSE_VALUE;
 8006084:	4b1a      	ldr	r3, [pc, #104]	; (80060f0 <HAL_RCCEx_GetPeriphCLKFreq+0xafc>)
 8006086:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 8006088:	e02b      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 800608a:	2300      	movs	r3, #0
 800608c:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800608e:	e028      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL: /* PLL is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL1RDY))
 8006090:	4b16      	ldr	r3, [pc, #88]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006098:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800609c:	d107      	bne.n	80060ae <HAL_RCCEx_GetPeriphCLKFreq+0xaba>
        {
          HAL_RCCEx_GetPLL1ClockFreq(&pll1_clocks);
 800609e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80060a2:	4618      	mov	r0, r3
 80060a4:	f000 fae4 	bl	8006670 <HAL_RCCEx_GetPLL1ClockFreq>
          frequency = pll1_clocks.PLL1_Q_Frequency;
 80060a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80060aa:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060ac:	e019      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060ae:	2300      	movs	r3, #0
 80060b0:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060b2:	e016      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      case RCC_FDCANCLKSOURCE_PLL2: /* PLL2 is the clock source for FDCAN */
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_PLL2RDY))
 80060b4:	4b0d      	ldr	r3, [pc, #52]	; (80060ec <HAL_RCCEx_GetPeriphCLKFreq+0xaf8>)
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80060bc:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 80060c0:	d107      	bne.n	80060d2 <HAL_RCCEx_GetPeriphCLKFreq+0xade>
        {
          HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80060c2:	f107 0318 	add.w	r3, r7, #24
 80060c6:	4618      	mov	r0, r3
 80060c8:	f000 f82a 	bl	8006120 <HAL_RCCEx_GetPLL2ClockFreq>
          frequency = pll2_clocks.PLL2_Q_Frequency;
 80060cc:	69fb      	ldr	r3, [r7, #28]
 80060ce:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          frequency = 0;
        }
        break;
 80060d0:	e007      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
          frequency = 0;
 80060d2:	2300      	movs	r3, #0
 80060d4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060d6:	e004      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
      default :
      {
        frequency = 0;
 80060d8:	2300      	movs	r3, #0
 80060da:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80060dc:	e001      	b.n	80060e2 <HAL_RCCEx_GetPeriphCLKFreq+0xaee>
      }
    }
  }
  else
  {
    frequency = 0;
 80060de:	2300      	movs	r3, #0
 80060e0:	63fb      	str	r3, [r7, #60]	; 0x3c
  }

  return frequency;
 80060e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 80060e4:	4618      	mov	r0, r3
 80060e6:	3740      	adds	r7, #64	; 0x40
 80060e8:	46bd      	mov	sp, r7
 80060ea:	bd80      	pop	{r7, pc}
 80060ec:	58024400 	.word	0x58024400
 80060f0:	017d7840 	.word	0x017d7840

080060f4 <HAL_RCCEx_GetD3PCLK1Freq>:
  * @note   Each time D3PCLK1 changes, this function must be called to update the
  *         right D3PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval D3PCLK1 frequency
  */
uint32_t HAL_RCCEx_GetD3PCLK1Freq(void)
{
 80060f4:	b580      	push	{r7, lr}
 80060f6:	af00      	add	r7, sp, #0
#if defined(RCC_D3CFGR_D3PPRE)
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->D3CFGR & RCC_D3CFGR_D3PPRE) >> RCC_D3CFGR_D3PPRE_Pos] & 0x1FU));
 80060f8:	f7fd ffd6 	bl	80040a8 <HAL_RCC_GetHCLKFreq>
 80060fc:	4602      	mov	r2, r0
 80060fe:	4b06      	ldr	r3, [pc, #24]	; (8006118 <HAL_RCCEx_GetD3PCLK1Freq+0x24>)
 8006100:	6a1b      	ldr	r3, [r3, #32]
 8006102:	091b      	lsrs	r3, r3, #4
 8006104:	f003 0307 	and.w	r3, r3, #7
 8006108:	4904      	ldr	r1, [pc, #16]	; (800611c <HAL_RCCEx_GetD3PCLK1Freq+0x28>)
 800610a:	5ccb      	ldrb	r3, [r1, r3]
 800610c:	f003 031f 	and.w	r3, r3, #31
 8006110:	fa22 f303 	lsr.w	r3, r2, r3
#else
  /* Get HCLK source and Compute D3PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> (D1CorePrescTable[(RCC->SRDCFGR & RCC_SRDCFGR_SRDPPRE) >> RCC_SRDCFGR_SRDPPRE_Pos] & 0x1FU));
#endif
}
 8006114:	4618      	mov	r0, r3
 8006116:	bd80      	pop	{r7, pc}
 8006118:	58024400 	.word	0x58024400
 800611c:	08008810 	.word	0x08008810

08006120 <HAL_RCCEx_GetPLL2ClockFreq>:
  *         right PLL2CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL2_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL2ClockFreq(PLL2_ClocksTypeDef *PLL2_Clocks)
{
 8006120:	b480      	push	{r7}
 8006122:	b089      	sub	sp, #36	; 0x24
 8006124:	af00      	add	r7, sp, #0
 8006126:	6078      	str	r0, [r7, #4]
  float_t fracn2, pll2vco;

  /* PLL_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL2M) * PLL2N
     PLL2xCLK = PLL2_VCO / PLL2x
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006128:	4ba1      	ldr	r3, [pc, #644]	; (80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800612a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800612c:	f003 0303 	and.w	r3, r3, #3
 8006130:	61bb      	str	r3, [r7, #24]
  pll2m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM2) >> 12);
 8006132:	4b9f      	ldr	r3, [pc, #636]	; (80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006134:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006136:	0b1b      	lsrs	r3, r3, #12
 8006138:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800613c:	617b      	str	r3, [r7, #20]
  pll2fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL2FRACEN) >> RCC_PLLCFGR_PLL2FRACEN_Pos;
 800613e:	4b9c      	ldr	r3, [pc, #624]	; (80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006140:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006142:	091b      	lsrs	r3, r3, #4
 8006144:	f003 0301 	and.w	r3, r3, #1
 8006148:	613b      	str	r3, [r7, #16]
  fracn2 = (float_t)(uint32_t)(pll2fracen * ((RCC->PLL2FRACR & RCC_PLL2FRACR_FRACN2) >> 3));
 800614a:	4b99      	ldr	r3, [pc, #612]	; (80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800614c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800614e:	08db      	lsrs	r3, r3, #3
 8006150:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8006154:	693a      	ldr	r2, [r7, #16]
 8006156:	fb02 f303 	mul.w	r3, r2, r3
 800615a:	ee07 3a90 	vmov	s15, r3
 800615e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006162:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll2m != 0U)
 8006166:	697b      	ldr	r3, [r7, #20]
 8006168:	2b00      	cmp	r3, #0
 800616a:	f000 8111 	beq.w	8006390 <HAL_RCCEx_GetPLL2ClockFreq+0x270>
  {
    switch (pllsource)
 800616e:	69bb      	ldr	r3, [r7, #24]
 8006170:	2b02      	cmp	r3, #2
 8006172:	f000 8083 	beq.w	800627c <HAL_RCCEx_GetPLL2ClockFreq+0x15c>
 8006176:	69bb      	ldr	r3, [r7, #24]
 8006178:	2b02      	cmp	r3, #2
 800617a:	f200 80a1 	bhi.w	80062c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
 800617e:	69bb      	ldr	r3, [r7, #24]
 8006180:	2b00      	cmp	r3, #0
 8006182:	d003      	beq.n	800618c <HAL_RCCEx_GetPLL2ClockFreq+0x6c>
 8006184:	69bb      	ldr	r3, [r7, #24]
 8006186:	2b01      	cmp	r3, #1
 8006188:	d056      	beq.n	8006238 <HAL_RCCEx_GetPLL2ClockFreq+0x118>
 800618a:	e099      	b.n	80062c0 <HAL_RCCEx_GetPLL2ClockFreq+0x1a0>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800618c:	4b88      	ldr	r3, [pc, #544]	; (80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	f003 0320 	and.w	r3, r3, #32
 8006194:	2b00      	cmp	r3, #0
 8006196:	d02d      	beq.n	80061f4 <HAL_RCCEx_GetPLL2ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006198:	4b85      	ldr	r3, [pc, #532]	; (80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	08db      	lsrs	r3, r3, #3
 800619e:	f003 0303 	and.w	r3, r3, #3
 80061a2:	4a84      	ldr	r2, [pc, #528]	; (80063b4 <HAL_RCCEx_GetPLL2ClockFreq+0x294>)
 80061a4:	fa22 f303 	lsr.w	r3, r2, r3
 80061a8:	60bb      	str	r3, [r7, #8]
          pll2vco = ((float_t)hsivalue / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061aa:	68bb      	ldr	r3, [r7, #8]
 80061ac:	ee07 3a90 	vmov	s15, r3
 80061b0:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061b4:	697b      	ldr	r3, [r7, #20]
 80061b6:	ee07 3a90 	vmov	s15, r3
 80061ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061be:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80061c2:	4b7b      	ldr	r3, [pc, #492]	; (80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80061c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061c6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80061ca:	ee07 3a90 	vmov	s15, r3
 80061ce:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80061d2:	ed97 6a03 	vldr	s12, [r7, #12]
 80061d6:	eddf 5a78 	vldr	s11, [pc, #480]	; 80063b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80061da:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80061de:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80061e2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80061e6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80061ea:	ee67 7a27 	vmul.f32	s15, s14, s15
 80061ee:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
        }
        break;
 80061f2:	e087      	b.n	8006304 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>
          pll2vco = ((float_t)HSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80061f4:	697b      	ldr	r3, [r7, #20]
 80061f6:	ee07 3a90 	vmov	s15, r3
 80061fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80061fe:	eddf 6a6f 	vldr	s13, [pc, #444]	; 80063bc <HAL_RCCEx_GetPLL2ClockFreq+0x29c>
 8006202:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006206:	4b6a      	ldr	r3, [pc, #424]	; (80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006208:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800620a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800620e:	ee07 3a90 	vmov	s15, r3
 8006212:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006216:	ed97 6a03 	vldr	s12, [r7, #12]
 800621a:	eddf 5a67 	vldr	s11, [pc, #412]	; 80063b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 800621e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006222:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006226:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800622a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800622e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006232:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006236:	e065      	b.n	8006304 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 8006238:	697b      	ldr	r3, [r7, #20]
 800623a:	ee07 3a90 	vmov	s15, r3
 800623e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006242:	eddf 6a5f 	vldr	s13, [pc, #380]	; 80063c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 8006246:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800624a:	4b59      	ldr	r3, [pc, #356]	; (80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 800624c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800624e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006252:	ee07 3a90 	vmov	s15, r3
 8006256:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800625a:	ed97 6a03 	vldr	s12, [r7, #12]
 800625e:	eddf 5a56 	vldr	s11, [pc, #344]	; 80063b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 8006262:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006266:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800626a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800626e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006272:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006276:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800627a:	e043      	b.n	8006304 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll2vco = ((float_t)HSE_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 800627c:	697b      	ldr	r3, [r7, #20]
 800627e:	ee07 3a90 	vmov	s15, r3
 8006282:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006286:	eddf 6a4f 	vldr	s13, [pc, #316]	; 80063c4 <HAL_RCCEx_GetPLL2ClockFreq+0x2a4>
 800628a:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800628e:	4b48      	ldr	r3, [pc, #288]	; (80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006292:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006296:	ee07 3a90 	vmov	s15, r3
 800629a:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800629e:	ed97 6a03 	vldr	s12, [r7, #12]
 80062a2:	eddf 5a45 	vldr	s11, [pc, #276]	; 80063b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062a6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062aa:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062ae:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062b2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062b6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062ba:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80062be:	e021      	b.n	8006304 <HAL_RCCEx_GetPLL2ClockFreq+0x1e4>

      default:
        pll2vco = ((float_t)CSI_VALUE / (float_t)pll2m) * ((float_t)(uint32_t)(RCC->PLL2DIVR & RCC_PLL2DIVR_N2) + (fracn2 / (float_t)0x2000) + (float_t)1);
 80062c0:	697b      	ldr	r3, [r7, #20]
 80062c2:	ee07 3a90 	vmov	s15, r3
 80062c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80062ca:	eddf 6a3d 	vldr	s13, [pc, #244]	; 80063c0 <HAL_RCCEx_GetPLL2ClockFreq+0x2a0>
 80062ce:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80062d2:	4b37      	ldr	r3, [pc, #220]	; (80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 80062d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80062d6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80062da:	ee07 3a90 	vmov	s15, r3
 80062de:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80062e2:	ed97 6a03 	vldr	s12, [r7, #12]
 80062e6:	eddf 5a34 	vldr	s11, [pc, #208]	; 80063b8 <HAL_RCCEx_GetPLL2ClockFreq+0x298>
 80062ea:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80062ee:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80062f2:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80062f6:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80062fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062fe:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006302:	bf00      	nop
    }
    PLL2_Clocks->PLL2_P_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_P2) >> 9)  + (float_t)1)) ;
 8006304:	4b2a      	ldr	r3, [pc, #168]	; (80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006308:	0a5b      	lsrs	r3, r3, #9
 800630a:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800630e:	ee07 3a90 	vmov	s15, r3
 8006312:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006316:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800631a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800631e:	edd7 6a07 	vldr	s13, [r7, #28]
 8006322:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006326:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800632a:	ee17 2a90 	vmov	r2, s15
 800632e:	687b      	ldr	r3, [r7, #4]
 8006330:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_Q2) >> 16) + (float_t)1)) ;
 8006332:	4b1f      	ldr	r3, [pc, #124]	; (80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006334:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006336:	0c1b      	lsrs	r3, r3, #16
 8006338:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800633c:	ee07 3a90 	vmov	s15, r3
 8006340:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006344:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006348:	ee37 7a87 	vadd.f32	s14, s15, s14
 800634c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006350:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006354:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006358:	ee17 2a90 	vmov	r2, s15
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = (uint32_t)(float_t)(pll2vco / ((float_t)(uint32_t)((RCC->PLL2DIVR & RCC_PLL2DIVR_R2) >> 24) + (float_t)1)) ;
 8006360:	4b13      	ldr	r3, [pc, #76]	; (80063b0 <HAL_RCCEx_GetPLL2ClockFreq+0x290>)
 8006362:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006364:	0e1b      	lsrs	r3, r3, #24
 8006366:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800636a:	ee07 3a90 	vmov	s15, r3
 800636e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006372:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006376:	ee37 7a87 	vadd.f32	s14, s15, s14
 800637a:	edd7 6a07 	vldr	s13, [r7, #28]
 800637e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006382:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006386:	ee17 2a90 	vmov	r2, s15
 800638a:	687b      	ldr	r3, [r7, #4]
 800638c:	609a      	str	r2, [r3, #8]
  {
    PLL2_Clocks->PLL2_P_Frequency = 0U;
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
    PLL2_Clocks->PLL2_R_Frequency = 0U;
  }
}
 800638e:	e008      	b.n	80063a2 <HAL_RCCEx_GetPLL2ClockFreq+0x282>
    PLL2_Clocks->PLL2_P_Frequency = 0U;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	2200      	movs	r2, #0
 8006394:	601a      	str	r2, [r3, #0]
    PLL2_Clocks->PLL2_Q_Frequency = 0U;
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	2200      	movs	r2, #0
 800639a:	605a      	str	r2, [r3, #4]
    PLL2_Clocks->PLL2_R_Frequency = 0U;
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	2200      	movs	r2, #0
 80063a0:	609a      	str	r2, [r3, #8]
}
 80063a2:	bf00      	nop
 80063a4:	3724      	adds	r7, #36	; 0x24
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	58024400 	.word	0x58024400
 80063b4:	03d09000 	.word	0x03d09000
 80063b8:	46000000 	.word	0x46000000
 80063bc:	4c742400 	.word	0x4c742400
 80063c0:	4a742400 	.word	0x4a742400
 80063c4:	4bbebc20 	.word	0x4bbebc20

080063c8 <HAL_RCCEx_GetPLL3ClockFreq>:
  *         right PLL3CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL3_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL3ClockFreq(PLL3_ClocksTypeDef *PLL3_Clocks)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b089      	sub	sp, #36	; 0x24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]
  float_t fracn3, pll3vco;

  /* PLL3_VCO = (HSE_VALUE or HSI_VALUE or CSI_VALUE/ PLL3M) * PLL3N
     PLL3xCLK = PLL3_VCO / PLLxR
  */
  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 80063d0:	4ba1      	ldr	r3, [pc, #644]	; (8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063d2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063d4:	f003 0303 	and.w	r3, r3, #3
 80063d8:	61bb      	str	r3, [r7, #24]
  pll3m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM3) >> 20)  ;
 80063da:	4b9f      	ldr	r3, [pc, #636]	; (8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063dc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80063de:	0d1b      	lsrs	r3, r3, #20
 80063e0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063e4:	617b      	str	r3, [r7, #20]
  pll3fracen = (RCC->PLLCFGR & RCC_PLLCFGR_PLL3FRACEN) >> RCC_PLLCFGR_PLL3FRACEN_Pos;
 80063e6:	4b9c      	ldr	r3, [pc, #624]	; (8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063ea:	0a1b      	lsrs	r3, r3, #8
 80063ec:	f003 0301 	and.w	r3, r3, #1
 80063f0:	613b      	str	r3, [r7, #16]
  fracn3 = (float_t)(uint32_t)(pll3fracen * ((RCC->PLL3FRACR & RCC_PLL3FRACR_FRACN3) >> 3));
 80063f2:	4b99      	ldr	r3, [pc, #612]	; (8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80063f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063f6:	08db      	lsrs	r3, r3, #3
 80063f8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80063fc:	693a      	ldr	r2, [r7, #16]
 80063fe:	fb02 f303 	mul.w	r3, r2, r3
 8006402:	ee07 3a90 	vmov	s15, r3
 8006406:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800640a:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll3m != 0U)
 800640e:	697b      	ldr	r3, [r7, #20]
 8006410:	2b00      	cmp	r3, #0
 8006412:	f000 8111 	beq.w	8006638 <HAL_RCCEx_GetPLL3ClockFreq+0x270>
  {
    switch (pllsource)
 8006416:	69bb      	ldr	r3, [r7, #24]
 8006418:	2b02      	cmp	r3, #2
 800641a:	f000 8083 	beq.w	8006524 <HAL_RCCEx_GetPLL3ClockFreq+0x15c>
 800641e:	69bb      	ldr	r3, [r7, #24]
 8006420:	2b02      	cmp	r3, #2
 8006422:	f200 80a1 	bhi.w	8006568 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
 8006426:	69bb      	ldr	r3, [r7, #24]
 8006428:	2b00      	cmp	r3, #0
 800642a:	d003      	beq.n	8006434 <HAL_RCCEx_GetPLL3ClockFreq+0x6c>
 800642c:	69bb      	ldr	r3, [r7, #24]
 800642e:	2b01      	cmp	r3, #1
 8006430:	d056      	beq.n	80064e0 <HAL_RCCEx_GetPLL3ClockFreq+0x118>
 8006432:	e099      	b.n	8006568 <HAL_RCCEx_GetPLL3ClockFreq+0x1a0>
    {
      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8006434:	4b88      	ldr	r3, [pc, #544]	; (8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f003 0320 	and.w	r3, r3, #32
 800643c:	2b00      	cmp	r3, #0
 800643e:	d02d      	beq.n	800649c <HAL_RCCEx_GetPLL3ClockFreq+0xd4>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 8006440:	4b85      	ldr	r3, [pc, #532]	; (8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006442:	681b      	ldr	r3, [r3, #0]
 8006444:	08db      	lsrs	r3, r3, #3
 8006446:	f003 0303 	and.w	r3, r3, #3
 800644a:	4a84      	ldr	r2, [pc, #528]	; (800665c <HAL_RCCEx_GetPLL3ClockFreq+0x294>)
 800644c:	fa22 f303 	lsr.w	r3, r2, r3
 8006450:	60bb      	str	r3, [r7, #8]
          pll3vco = ((float_t)hsivalue / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006452:	68bb      	ldr	r3, [r7, #8]
 8006454:	ee07 3a90 	vmov	s15, r3
 8006458:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800645c:	697b      	ldr	r3, [r7, #20]
 800645e:	ee07 3a90 	vmov	s15, r3
 8006462:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006466:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800646a:	4b7b      	ldr	r3, [pc, #492]	; (8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800646c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800646e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006472:	ee07 3a90 	vmov	s15, r3
 8006476:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800647a:	ed97 6a03 	vldr	s12, [r7, #12]
 800647e:	eddf 5a78 	vldr	s11, [pc, #480]	; 8006660 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006482:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006486:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800648a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800648e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006492:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006496:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
        }
        break;
 800649a:	e087      	b.n	80065ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
          pll3vco = ((float_t)HSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 800649c:	697b      	ldr	r3, [r7, #20]
 800649e:	ee07 3a90 	vmov	s15, r3
 80064a2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064a6:	eddf 6a6f 	vldr	s13, [pc, #444]	; 8006664 <HAL_RCCEx_GetPLL3ClockFreq+0x29c>
 80064aa:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064ae:	4b6a      	ldr	r3, [pc, #424]	; (8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064b2:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064b6:	ee07 3a90 	vmov	s15, r3
 80064ba:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80064be:	ed97 6a03 	vldr	s12, [r7, #12]
 80064c2:	eddf 5a67 	vldr	s11, [pc, #412]	; 8006660 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 80064c6:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80064ca:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80064ce:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80064d2:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80064d6:	ee67 7a27 	vmul.f32	s15, s14, s15
 80064da:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80064de:	e065      	b.n	80065ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 80064e0:	697b      	ldr	r3, [r7, #20]
 80064e2:	ee07 3a90 	vmov	s15, r3
 80064e6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80064ea:	eddf 6a5f 	vldr	s13, [pc, #380]	; 8006668 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 80064ee:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80064f2:	4b59      	ldr	r3, [pc, #356]	; (8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80064f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064f6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80064fa:	ee07 3a90 	vmov	s15, r3
 80064fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006502:	ed97 6a03 	vldr	s12, [r7, #12]
 8006506:	eddf 5a56 	vldr	s11, [pc, #344]	; 8006660 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800650a:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800650e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006512:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006516:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800651a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800651e:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006522:	e043      	b.n	80065ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll3vco = ((float_t)HSE_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006524:	697b      	ldr	r3, [r7, #20]
 8006526:	ee07 3a90 	vmov	s15, r3
 800652a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800652e:	eddf 6a4f 	vldr	s13, [pc, #316]	; 800666c <HAL_RCCEx_GetPLL3ClockFreq+0x2a4>
 8006532:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006536:	4b48      	ldr	r3, [pc, #288]	; (8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 8006538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800653a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800653e:	ee07 3a90 	vmov	s15, r3
 8006542:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006546:	ed97 6a03 	vldr	s12, [r7, #12]
 800654a:	eddf 5a45 	vldr	s11, [pc, #276]	; 8006660 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 800654e:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006552:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006556:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800655a:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800655e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006562:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006566:	e021      	b.n	80065ac <HAL_RCCEx_GetPLL3ClockFreq+0x1e4>

      default:
        pll3vco = ((float_t)CSI_VALUE / (float_t)pll3m) * ((float_t)(uint32_t)(RCC->PLL3DIVR & RCC_PLL3DIVR_N3) + (fracn3 / (float_t)0x2000) + (float_t)1);
 8006568:	697b      	ldr	r3, [r7, #20]
 800656a:	ee07 3a90 	vmov	s15, r3
 800656e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006572:	eddf 6a3d 	vldr	s13, [pc, #244]	; 8006668 <HAL_RCCEx_GetPLL3ClockFreq+0x2a0>
 8006576:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 800657a:	4b37      	ldr	r3, [pc, #220]	; (8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800657c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800657e:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006582:	ee07 3a90 	vmov	s15, r3
 8006586:	eef8 6a67 	vcvt.f32.u32	s13, s15
 800658a:	ed97 6a03 	vldr	s12, [r7, #12]
 800658e:	eddf 5a34 	vldr	s11, [pc, #208]	; 8006660 <HAL_RCCEx_GetPLL3ClockFreq+0x298>
 8006592:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006596:	ee76 7aa7 	vadd.f32	s15, s13, s15
 800659a:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 800659e:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80065a2:	ee67 7a27 	vmul.f32	s15, s14, s15
 80065a6:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80065aa:	bf00      	nop
    }
    PLL3_Clocks->PLL3_P_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_P3) >> 9)  + (float_t)1)) ;
 80065ac:	4b2a      	ldr	r3, [pc, #168]	; (8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065b0:	0a5b      	lsrs	r3, r3, #9
 80065b2:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065b6:	ee07 3a90 	vmov	s15, r3
 80065ba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065be:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065c2:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065c6:	edd7 6a07 	vldr	s13, [r7, #28]
 80065ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80065d2:	ee17 2a90 	vmov	r2, s15
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_Q3) >> 16) + (float_t)1)) ;
 80065da:	4b1f      	ldr	r3, [pc, #124]	; (8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	0c1b      	lsrs	r3, r3, #16
 80065e0:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80065e4:	ee07 3a90 	vmov	s15, r3
 80065e8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80065ec:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80065f0:	ee37 7a87 	vadd.f32	s14, s15, s14
 80065f4:	edd7 6a07 	vldr	s13, [r7, #28]
 80065f8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80065fc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006600:	ee17 2a90 	vmov	r2, s15
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = (uint32_t)(float_t)(pll3vco / ((float_t)(uint32_t)((RCC->PLL3DIVR & RCC_PLL3DIVR_R3) >> 24) + (float_t)1)) ;
 8006608:	4b13      	ldr	r3, [pc, #76]	; (8006658 <HAL_RCCEx_GetPLL3ClockFreq+0x290>)
 800660a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800660c:	0e1b      	lsrs	r3, r3, #24
 800660e:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8006612:	ee07 3a90 	vmov	s15, r3
 8006616:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800661a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800661e:	ee37 7a87 	vadd.f32	s14, s15, s14
 8006622:	edd7 6a07 	vldr	s13, [r7, #28]
 8006626:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800662a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800662e:	ee17 2a90 	vmov	r2, s15
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	609a      	str	r2, [r3, #8]
    PLL3_Clocks->PLL3_P_Frequency = 0U;
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
    PLL3_Clocks->PLL3_R_Frequency = 0U;
  }

}
 8006636:	e008      	b.n	800664a <HAL_RCCEx_GetPLL3ClockFreq+0x282>
    PLL3_Clocks->PLL3_P_Frequency = 0U;
 8006638:	687b      	ldr	r3, [r7, #4]
 800663a:	2200      	movs	r2, #0
 800663c:	601a      	str	r2, [r3, #0]
    PLL3_Clocks->PLL3_Q_Frequency = 0U;
 800663e:	687b      	ldr	r3, [r7, #4]
 8006640:	2200      	movs	r2, #0
 8006642:	605a      	str	r2, [r3, #4]
    PLL3_Clocks->PLL3_R_Frequency = 0U;
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	2200      	movs	r2, #0
 8006648:	609a      	str	r2, [r3, #8]
}
 800664a:	bf00      	nop
 800664c:	3724      	adds	r7, #36	; 0x24
 800664e:	46bd      	mov	sp, r7
 8006650:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006654:	4770      	bx	lr
 8006656:	bf00      	nop
 8006658:	58024400 	.word	0x58024400
 800665c:	03d09000 	.word	0x03d09000
 8006660:	46000000 	.word	0x46000000
 8006664:	4c742400 	.word	0x4c742400
 8006668:	4a742400 	.word	0x4a742400
 800666c:	4bbebc20 	.word	0x4bbebc20

08006670 <HAL_RCCEx_GetPLL1ClockFreq>:
  *         right PLL1CLK value. Otherwise, any configuration based on this function will be incorrect.
  * @param  PLL1_Clocks structure.
  * @retval None
  */
void HAL_RCCEx_GetPLL1ClockFreq(PLL1_ClocksTypeDef *PLL1_Clocks)
{
 8006670:	b480      	push	{r7}
 8006672:	b089      	sub	sp, #36	; 0x24
 8006674:	af00      	add	r7, sp, #0
 8006676:	6078      	str	r0, [r7, #4]
  uint32_t pllsource, pll1m, pll1fracen, hsivalue;
  float_t fracn1, pll1vco;

  pllsource = (RCC->PLLCKSELR & RCC_PLLCKSELR_PLLSRC);
 8006678:	4ba0      	ldr	r3, [pc, #640]	; (80068fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800667a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800667c:	f003 0303 	and.w	r3, r3, #3
 8006680:	61bb      	str	r3, [r7, #24]
  pll1m = ((RCC->PLLCKSELR & RCC_PLLCKSELR_DIVM1) >> 4);
 8006682:	4b9e      	ldr	r3, [pc, #632]	; (80068fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006684:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006686:	091b      	lsrs	r3, r3, #4
 8006688:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800668c:	617b      	str	r3, [r7, #20]
  pll1fracen = RCC->PLLCFGR & RCC_PLLCFGR_PLL1FRACEN;
 800668e:	4b9b      	ldr	r3, [pc, #620]	; (80068fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006692:	f003 0301 	and.w	r3, r3, #1
 8006696:	613b      	str	r3, [r7, #16]
  fracn1 = (float_t)(uint32_t)(pll1fracen * ((RCC->PLL1FRACR & RCC_PLL1FRACR_FRACN1) >> 3));
 8006698:	4b98      	ldr	r3, [pc, #608]	; (80068fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800669a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800669c:	08db      	lsrs	r3, r3, #3
 800669e:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80066a2:	693a      	ldr	r2, [r7, #16]
 80066a4:	fb02 f303 	mul.w	r3, r2, r3
 80066a8:	ee07 3a90 	vmov	s15, r3
 80066ac:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80066b0:	edc7 7a03 	vstr	s15, [r7, #12]

  if (pll1m != 0U)
 80066b4:	697b      	ldr	r3, [r7, #20]
 80066b6:	2b00      	cmp	r3, #0
 80066b8:	f000 8111 	beq.w	80068de <HAL_RCCEx_GetPLL1ClockFreq+0x26e>
  {
    switch (pllsource)
 80066bc:	69bb      	ldr	r3, [r7, #24]
 80066be:	2b02      	cmp	r3, #2
 80066c0:	f000 8083 	beq.w	80067ca <HAL_RCCEx_GetPLL1ClockFreq+0x15a>
 80066c4:	69bb      	ldr	r3, [r7, #24]
 80066c6:	2b02      	cmp	r3, #2
 80066c8:	f200 80a1 	bhi.w	800680e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
 80066cc:	69bb      	ldr	r3, [r7, #24]
 80066ce:	2b00      	cmp	r3, #0
 80066d0:	d003      	beq.n	80066da <HAL_RCCEx_GetPLL1ClockFreq+0x6a>
 80066d2:	69bb      	ldr	r3, [r7, #24]
 80066d4:	2b01      	cmp	r3, #1
 80066d6:	d056      	beq.n	8006786 <HAL_RCCEx_GetPLL1ClockFreq+0x116>
 80066d8:	e099      	b.n	800680e <HAL_RCCEx_GetPLL1ClockFreq+0x19e>
    {

      case RCC_PLLSOURCE_HSI:  /* HSI used as PLL clock source */

        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80066da:	4b88      	ldr	r3, [pc, #544]	; (80068fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f003 0320 	and.w	r3, r3, #32
 80066e2:	2b00      	cmp	r3, #0
 80066e4:	d02d      	beq.n	8006742 <HAL_RCCEx_GetPLL1ClockFreq+0xd2>
        {
          hsivalue = (HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3));
 80066e6:	4b85      	ldr	r3, [pc, #532]	; (80068fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80066e8:	681b      	ldr	r3, [r3, #0]
 80066ea:	08db      	lsrs	r3, r3, #3
 80066ec:	f003 0303 	and.w	r3, r3, #3
 80066f0:	4a83      	ldr	r2, [pc, #524]	; (8006900 <HAL_RCCEx_GetPLL1ClockFreq+0x290>)
 80066f2:	fa22 f303 	lsr.w	r3, r2, r3
 80066f6:	60bb      	str	r3, [r7, #8]
          pll1vco = ((float_t)hsivalue / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80066f8:	68bb      	ldr	r3, [r7, #8]
 80066fa:	ee07 3a90 	vmov	s15, r3
 80066fe:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006702:	697b      	ldr	r3, [r7, #20]
 8006704:	ee07 3a90 	vmov	s15, r3
 8006708:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800670c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006710:	4b7a      	ldr	r3, [pc, #488]	; (80068fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006712:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006714:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006718:	ee07 3a90 	vmov	s15, r3
 800671c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006720:	ed97 6a03 	vldr	s12, [r7, #12]
 8006724:	eddf 5a77 	vldr	s11, [pc, #476]	; 8006904 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006728:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800672c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006730:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006734:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800673c:	edc7 7a07 	vstr	s15, [r7, #28]
        }
        else
        {
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
        }
        break;
 8006740:	e087      	b.n	8006852 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
          pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	ee07 3a90 	vmov	s15, r3
 8006748:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800674c:	eddf 6a6e 	vldr	s13, [pc, #440]	; 8006908 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 8006750:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006754:	4b69      	ldr	r3, [pc, #420]	; (80068fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006756:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006758:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800675c:	ee07 3a90 	vmov	s15, r3
 8006760:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006764:	ed97 6a03 	vldr	s12, [r7, #12]
 8006768:	eddf 5a66 	vldr	s11, [pc, #408]	; 8006904 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 800676c:	eec6 7a25 	vdiv.f32	s15, s12, s11
 8006770:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006774:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006778:	ee77 7aa6 	vadd.f32	s15, s15, s13
 800677c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006780:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006784:	e065      	b.n	8006852 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>
      case RCC_PLLSOURCE_CSI:  /* CSI used as PLL clock source */
        pll1vco = ((float_t)CSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 8006786:	697b      	ldr	r3, [r7, #20]
 8006788:	ee07 3a90 	vmov	s15, r3
 800678c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006790:	eddf 6a5e 	vldr	s13, [pc, #376]	; 800690c <HAL_RCCEx_GetPLL1ClockFreq+0x29c>
 8006794:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006798:	4b58      	ldr	r3, [pc, #352]	; (80068fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 800679a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800679c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067a0:	ee07 3a90 	vmov	s15, r3
 80067a4:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067a8:	ed97 6a03 	vldr	s12, [r7, #12]
 80067ac:	eddf 5a55 	vldr	s11, [pc, #340]	; 8006904 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067b0:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067b4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067b8:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 80067bc:	ee77 7aa6 	vadd.f32	s15, s15, s13
 80067c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80067c4:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 80067c8:	e043      	b.n	8006852 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      case RCC_PLLSOURCE_HSE:  /* HSE used as PLL clock source */
        pll1vco = ((float_t)HSE_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 80067ca:	697b      	ldr	r3, [r7, #20]
 80067cc:	ee07 3a90 	vmov	s15, r3
 80067d0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80067d4:	eddf 6a4e 	vldr	s13, [pc, #312]	; 8006910 <HAL_RCCEx_GetPLL1ClockFreq+0x2a0>
 80067d8:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 80067dc:	4b47      	ldr	r3, [pc, #284]	; (80068fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80067de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80067e0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80067e4:	ee07 3a90 	vmov	s15, r3
 80067e8:	eef8 6a67 	vcvt.f32.u32	s13, s15
 80067ec:	ed97 6a03 	vldr	s12, [r7, #12]
 80067f0:	eddf 5a44 	vldr	s11, [pc, #272]	; 8006904 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 80067f4:	eec6 7a25 	vdiv.f32	s15, s12, s11
 80067f8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80067fc:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006800:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006804:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006808:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 800680c:	e021      	b.n	8006852 <HAL_RCCEx_GetPLL1ClockFreq+0x1e2>

      default:
        pll1vco = ((float_t)HSI_VALUE / (float_t)pll1m) * ((float_t)(uint32_t)(RCC->PLL1DIVR & RCC_PLL1DIVR_N1) + (fracn1 / (float_t)0x2000) + (float_t)1);
 800680e:	697b      	ldr	r3, [r7, #20]
 8006810:	ee07 3a90 	vmov	s15, r3
 8006814:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006818:	eddf 6a3b 	vldr	s13, [pc, #236]	; 8006908 <HAL_RCCEx_GetPLL1ClockFreq+0x298>
 800681c:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006820:	4b36      	ldr	r3, [pc, #216]	; (80068fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006824:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006828:	ee07 3a90 	vmov	s15, r3
 800682c:	eef8 6a67 	vcvt.f32.u32	s13, s15
 8006830:	ed97 6a03 	vldr	s12, [r7, #12]
 8006834:	eddf 5a33 	vldr	s11, [pc, #204]	; 8006904 <HAL_RCCEx_GetPLL1ClockFreq+0x294>
 8006838:	eec6 7a25 	vdiv.f32	s15, s12, s11
 800683c:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8006840:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006844:	ee77 7aa6 	vadd.f32	s15, s15, s13
 8006848:	ee67 7a27 	vmul.f32	s15, s14, s15
 800684c:	edc7 7a07 	vstr	s15, [r7, #28]
        break;
 8006850:	bf00      	nop
    }

    PLL1_Clocks->PLL1_P_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_P1) >> 9)  + (float_t)1)) ;
 8006852:	4b2a      	ldr	r3, [pc, #168]	; (80068fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006856:	0a5b      	lsrs	r3, r3, #9
 8006858:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800685c:	ee07 3a90 	vmov	s15, r3
 8006860:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006864:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006868:	ee37 7a87 	vadd.f32	s14, s15, s14
 800686c:	edd7 6a07 	vldr	s13, [r7, #28]
 8006870:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006874:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006878:	ee17 2a90 	vmov	r2, s15
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_Q1) >> 16) + (float_t)1)) ;
 8006880:	4b1e      	ldr	r3, [pc, #120]	; (80068fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 8006882:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006884:	0c1b      	lsrs	r3, r3, #16
 8006886:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800688a:	ee07 3a90 	vmov	s15, r3
 800688e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006892:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8006896:	ee37 7a87 	vadd.f32	s14, s15, s14
 800689a:	edd7 6a07 	vldr	s13, [r7, #28]
 800689e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068a6:	ee17 2a90 	vmov	r2, s15
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = (uint32_t)(float_t)(pll1vco / ((float_t)(uint32_t)((RCC->PLL1DIVR & RCC_PLL1DIVR_R1) >> 24) + (float_t)1)) ;
 80068ae:	4b13      	ldr	r3, [pc, #76]	; (80068fc <HAL_RCCEx_GetPLL1ClockFreq+0x28c>)
 80068b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80068b2:	0e1b      	lsrs	r3, r3, #24
 80068b4:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80068b8:	ee07 3a90 	vmov	s15, r3
 80068bc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80068c0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80068c4:	ee37 7a87 	vadd.f32	s14, s15, s14
 80068c8:	edd7 6a07 	vldr	s13, [r7, #28]
 80068cc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80068d0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80068d4:	ee17 2a90 	vmov	r2, s15
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	609a      	str	r2, [r3, #8]
    PLL1_Clocks->PLL1_P_Frequency = 0U;
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
    PLL1_Clocks->PLL1_R_Frequency = 0U;
  }

}
 80068dc:	e008      	b.n	80068f0 <HAL_RCCEx_GetPLL1ClockFreq+0x280>
    PLL1_Clocks->PLL1_P_Frequency = 0U;
 80068de:	687b      	ldr	r3, [r7, #4]
 80068e0:	2200      	movs	r2, #0
 80068e2:	601a      	str	r2, [r3, #0]
    PLL1_Clocks->PLL1_Q_Frequency = 0U;
 80068e4:	687b      	ldr	r3, [r7, #4]
 80068e6:	2200      	movs	r2, #0
 80068e8:	605a      	str	r2, [r3, #4]
    PLL1_Clocks->PLL1_R_Frequency = 0U;
 80068ea:	687b      	ldr	r3, [r7, #4]
 80068ec:	2200      	movs	r2, #0
 80068ee:	609a      	str	r2, [r3, #8]
}
 80068f0:	bf00      	nop
 80068f2:	3724      	adds	r7, #36	; 0x24
 80068f4:	46bd      	mov	sp, r7
 80068f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068fa:	4770      	bx	lr
 80068fc:	58024400 	.word	0x58024400
 8006900:	03d09000 	.word	0x03d09000
 8006904:	46000000 	.word	0x46000000
 8006908:	4c742400 	.word	0x4c742400
 800690c:	4a742400 	.word	0x4a742400
 8006910:	4bbebc20 	.word	0x4bbebc20

08006914 <RCCEx_PLL2_Config>:
  * @note   PLL2 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL2_Config(RCC_PLL2InitTypeDef *pll2, uint32_t Divider)
{
 8006914:	b580      	push	{r7, lr}
 8006916:	b084      	sub	sp, #16
 8006918:	af00      	add	r7, sp, #0
 800691a:	6078      	str	r0, [r7, #4]
 800691c:	6039      	str	r1, [r7, #0]

  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 800691e:	2300      	movs	r3, #0
 8006920:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL2RGE_VALUE(pll2->PLL2RGE));
  assert_param(IS_RCC_PLL2VCO_VALUE(pll2->PLL2VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll2->PLL2FRACN));

  /* Check that PLL2 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006922:	4b53      	ldr	r3, [pc, #332]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 8006924:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006926:	f003 0303 	and.w	r3, r3, #3
 800692a:	2b03      	cmp	r3, #3
 800692c:	d101      	bne.n	8006932 <RCCEx_PLL2_Config+0x1e>
  {
    return HAL_ERROR;
 800692e:	2301      	movs	r3, #1
 8006930:	e099      	b.n	8006a66 <RCCEx_PLL2_Config+0x152>


  else
  {
    /* Disable  PLL2. */
    __HAL_RCC_PLL2_DISABLE();
 8006932:	4b4f      	ldr	r3, [pc, #316]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 8006934:	681b      	ldr	r3, [r3, #0]
 8006936:	4a4e      	ldr	r2, [pc, #312]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 8006938:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800693c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800693e:	f7fa fb41 	bl	8000fc4 <HAL_GetTick>
 8006942:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL is disabled */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006944:	e008      	b.n	8006958 <RCCEx_PLL2_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006946:	f7fa fb3d 	bl	8000fc4 <HAL_GetTick>
 800694a:	4602      	mov	r2, r0
 800694c:	68bb      	ldr	r3, [r7, #8]
 800694e:	1ad3      	subs	r3, r2, r3
 8006950:	2b02      	cmp	r3, #2
 8006952:	d901      	bls.n	8006958 <RCCEx_PLL2_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006954:	2303      	movs	r3, #3
 8006956:	e086      	b.n	8006a66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) != 0U)
 8006958:	4b45      	ldr	r3, [pc, #276]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006960:	2b00      	cmp	r3, #0
 8006962:	d1f0      	bne.n	8006946 <RCCEx_PLL2_Config+0x32>
      }
    }

    /* Configure PLL2 multiplication and division factors. */
    __HAL_RCC_PLL2_CONFIG(pll2->PLL2M,
 8006964:	4b42      	ldr	r3, [pc, #264]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 8006966:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006968:	f423 327c 	bic.w	r2, r3, #258048	; 0x3f000
 800696c:	687b      	ldr	r3, [r7, #4]
 800696e:	681b      	ldr	r3, [r3, #0]
 8006970:	031b      	lsls	r3, r3, #12
 8006972:	493f      	ldr	r1, [pc, #252]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 8006974:	4313      	orrs	r3, r2
 8006976:	628b      	str	r3, [r1, #40]	; 0x28
 8006978:	687b      	ldr	r3, [r7, #4]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	3b01      	subs	r3, #1
 800697e:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	689b      	ldr	r3, [r3, #8]
 8006986:	3b01      	subs	r3, #1
 8006988:	025b      	lsls	r3, r3, #9
 800698a:	b29b      	uxth	r3, r3
 800698c:	431a      	orrs	r2, r3
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	68db      	ldr	r3, [r3, #12]
 8006992:	3b01      	subs	r3, #1
 8006994:	041b      	lsls	r3, r3, #16
 8006996:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 800699a:	431a      	orrs	r2, r3
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	691b      	ldr	r3, [r3, #16]
 80069a0:	3b01      	subs	r3, #1
 80069a2:	061b      	lsls	r3, r3, #24
 80069a4:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 80069a8:	4931      	ldr	r1, [pc, #196]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 80069aa:	4313      	orrs	r3, r2
 80069ac:	638b      	str	r3, [r1, #56]	; 0x38
                          pll2->PLL2P,
                          pll2->PLL2Q,
                          pll2->PLL2R);

    /* Select PLL2 input reference frequency range: VCI */
    __HAL_RCC_PLL2_VCIRANGE(pll2->PLL2RGE) ;
 80069ae:	4b30      	ldr	r3, [pc, #192]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 80069b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069b2:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 80069b6:	687b      	ldr	r3, [r7, #4]
 80069b8:	695b      	ldr	r3, [r3, #20]
 80069ba:	492d      	ldr	r1, [pc, #180]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 80069bc:	4313      	orrs	r3, r2
 80069be:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL2 output frequency range : VCO */
    __HAL_RCC_PLL2_VCORANGE(pll2->PLL2VCOSEL) ;
 80069c0:	4b2b      	ldr	r3, [pc, #172]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 80069c2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069c4:	f023 0220 	bic.w	r2, r3, #32
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	699b      	ldr	r3, [r3, #24]
 80069cc:	4928      	ldr	r1, [pc, #160]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 80069ce:	4313      	orrs	r3, r2
 80069d0:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_DISABLE();
 80069d2:	4b27      	ldr	r3, [pc, #156]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 80069d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069d6:	4a26      	ldr	r2, [pc, #152]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 80069d8:	f023 0310 	bic.w	r3, r3, #16
 80069dc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL2 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL2FRACN_CONFIG(pll2->PLL2FRACN);
 80069de:	4b24      	ldr	r3, [pc, #144]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 80069e0:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80069e2:	4b24      	ldr	r3, [pc, #144]	; (8006a74 <RCCEx_PLL2_Config+0x160>)
 80069e4:	4013      	ands	r3, r2
 80069e6:	687a      	ldr	r2, [r7, #4]
 80069e8:	69d2      	ldr	r2, [r2, #28]
 80069ea:	00d2      	lsls	r2, r2, #3
 80069ec:	4920      	ldr	r1, [pc, #128]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 80069ee:	4313      	orrs	r3, r2
 80069f0:	63cb      	str	r3, [r1, #60]	; 0x3c

    /* Enable PLL2FRACN . */
    __HAL_RCC_PLL2FRACN_ENABLE();
 80069f2:	4b1f      	ldr	r3, [pc, #124]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 80069f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80069f6:	4a1e      	ldr	r2, [pc, #120]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 80069f8:	f043 0310 	orr.w	r3, r3, #16
 80069fc:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL2 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 80069fe:	683b      	ldr	r3, [r7, #0]
 8006a00:	2b00      	cmp	r3, #0
 8006a02:	d106      	bne.n	8006a12 <RCCEx_PLL2_Config+0xfe>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVP);
 8006a04:	4b1a      	ldr	r3, [pc, #104]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 8006a06:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a08:	4a19      	ldr	r2, [pc, #100]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 8006a0a:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8006a0e:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a10:	e00f      	b.n	8006a32 <RCCEx_PLL2_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006a12:	683b      	ldr	r3, [r7, #0]
 8006a14:	2b01      	cmp	r3, #1
 8006a16:	d106      	bne.n	8006a26 <RCCEx_PLL2_Config+0x112>
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVQ);
 8006a18:	4b15      	ldr	r3, [pc, #84]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 8006a1a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a1c:	4a14      	ldr	r2, [pc, #80]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 8006a1e:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006a22:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006a24:	e005      	b.n	8006a32 <RCCEx_PLL2_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL2CLKOUT_ENABLE(RCC_PLL2_DIVR);
 8006a26:	4b12      	ldr	r3, [pc, #72]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 8006a28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006a2a:	4a11      	ldr	r2, [pc, #68]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 8006a2c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8006a30:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL2. */
    __HAL_RCC_PLL2_ENABLE();
 8006a32:	4b0f      	ldr	r3, [pc, #60]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 8006a34:	681b      	ldr	r3, [r3, #0]
 8006a36:	4a0e      	ldr	r2, [pc, #56]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 8006a38:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8006a3c:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006a3e:	f7fa fac1 	bl	8000fc4 <HAL_GetTick>
 8006a42:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL2 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a44:	e008      	b.n	8006a58 <RCCEx_PLL2_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL2_TIMEOUT_VALUE)
 8006a46:	f7fa fabd 	bl	8000fc4 <HAL_GetTick>
 8006a4a:	4602      	mov	r2, r0
 8006a4c:	68bb      	ldr	r3, [r7, #8]
 8006a4e:	1ad3      	subs	r3, r2, r3
 8006a50:	2b02      	cmp	r3, #2
 8006a52:	d901      	bls.n	8006a58 <RCCEx_PLL2_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006a54:	2303      	movs	r3, #3
 8006a56:	e006      	b.n	8006a66 <RCCEx_PLL2_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL2RDY) == 0U)
 8006a58:	4b05      	ldr	r3, [pc, #20]	; (8006a70 <RCCEx_PLL2_Config+0x15c>)
 8006a5a:	681b      	ldr	r3, [r3, #0]
 8006a5c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8006a60:	2b00      	cmp	r3, #0
 8006a62:	d0f0      	beq.n	8006a46 <RCCEx_PLL2_Config+0x132>
    }

  }


  return status;
 8006a64:	7bfb      	ldrb	r3, [r7, #15]
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
 8006a6e:	bf00      	nop
 8006a70:	58024400 	.word	0x58024400
 8006a74:	ffff0007 	.word	0xffff0007

08006a78 <RCCEx_PLL3_Config>:
  * @note   PLL3 is temporary disabled to apply new parameters
  *
  * @retval HAL status
  */
static HAL_StatusTypeDef RCCEx_PLL3_Config(RCC_PLL3InitTypeDef *pll3, uint32_t Divider)
{
 8006a78:	b580      	push	{r7, lr}
 8006a7a:	b084      	sub	sp, #16
 8006a7c:	af00      	add	r7, sp, #0
 8006a7e:	6078      	str	r0, [r7, #4]
 8006a80:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status = HAL_OK;
 8006a82:	2300      	movs	r3, #0
 8006a84:	73fb      	strb	r3, [r7, #15]
  assert_param(IS_RCC_PLL3RGE_VALUE(pll3->PLL3RGE));
  assert_param(IS_RCC_PLL3VCO_VALUE(pll3->PLL3VCOSEL));
  assert_param(IS_RCC_PLLFRACN_VALUE(pll3->PLL3FRACN));

  /* Check that PLL3 OSC clock source is already set */
  if (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_NONE)
 8006a86:	4b53      	ldr	r3, [pc, #332]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006a88:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006a8a:	f003 0303 	and.w	r3, r3, #3
 8006a8e:	2b03      	cmp	r3, #3
 8006a90:	d101      	bne.n	8006a96 <RCCEx_PLL3_Config+0x1e>
  {
    return HAL_ERROR;
 8006a92:	2301      	movs	r3, #1
 8006a94:	e099      	b.n	8006bca <RCCEx_PLL3_Config+0x152>


  else
  {
    /* Disable  PLL3. */
    __HAL_RCC_PLL3_DISABLE();
 8006a96:	4b4f      	ldr	r3, [pc, #316]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006a98:	681b      	ldr	r3, [r3, #0]
 8006a9a:	4a4e      	ldr	r2, [pc, #312]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006a9c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006aa0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006aa2:	f7fa fa8f 	bl	8000fc4 <HAL_GetTick>
 8006aa6:	60b8      	str	r0, [r7, #8]
    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006aa8:	e008      	b.n	8006abc <RCCEx_PLL3_Config+0x44>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006aaa:	f7fa fa8b 	bl	8000fc4 <HAL_GetTick>
 8006aae:	4602      	mov	r2, r0
 8006ab0:	68bb      	ldr	r3, [r7, #8]
 8006ab2:	1ad3      	subs	r3, r2, r3
 8006ab4:	2b02      	cmp	r3, #2
 8006ab6:	d901      	bls.n	8006abc <RCCEx_PLL3_Config+0x44>
      {
        return HAL_TIMEOUT;
 8006ab8:	2303      	movs	r3, #3
 8006aba:	e086      	b.n	8006bca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) != 0U)
 8006abc:	4b45      	ldr	r3, [pc, #276]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006abe:	681b      	ldr	r3, [r3, #0]
 8006ac0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006ac4:	2b00      	cmp	r3, #0
 8006ac6:	d1f0      	bne.n	8006aaa <RCCEx_PLL3_Config+0x32>
      }
    }

    /* Configure the PLL3  multiplication and division factors. */
    __HAL_RCC_PLL3_CONFIG(pll3->PLL3M,
 8006ac8:	4b42      	ldr	r3, [pc, #264]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006acc:	f023 727c 	bic.w	r2, r3, #66060288	; 0x3f00000
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	681b      	ldr	r3, [r3, #0]
 8006ad4:	051b      	lsls	r3, r3, #20
 8006ad6:	493f      	ldr	r1, [pc, #252]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006ad8:	4313      	orrs	r3, r2
 8006ada:	628b      	str	r3, [r1, #40]	; 0x28
 8006adc:	687b      	ldr	r3, [r7, #4]
 8006ade:	685b      	ldr	r3, [r3, #4]
 8006ae0:	3b01      	subs	r3, #1
 8006ae2:	f3c3 0208 	ubfx	r2, r3, #0, #9
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	689b      	ldr	r3, [r3, #8]
 8006aea:	3b01      	subs	r3, #1
 8006aec:	025b      	lsls	r3, r3, #9
 8006aee:	b29b      	uxth	r3, r3
 8006af0:	431a      	orrs	r2, r3
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	68db      	ldr	r3, [r3, #12]
 8006af6:	3b01      	subs	r3, #1
 8006af8:	041b      	lsls	r3, r3, #16
 8006afa:	f403 03fe 	and.w	r3, r3, #8323072	; 0x7f0000
 8006afe:	431a      	orrs	r2, r3
 8006b00:	687b      	ldr	r3, [r7, #4]
 8006b02:	691b      	ldr	r3, [r3, #16]
 8006b04:	3b01      	subs	r3, #1
 8006b06:	061b      	lsls	r3, r3, #24
 8006b08:	f003 43fe 	and.w	r3, r3, #2130706432	; 0x7f000000
 8006b0c:	4931      	ldr	r1, [pc, #196]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	640b      	str	r3, [r1, #64]	; 0x40
                          pll3->PLL3P,
                          pll3->PLL3Q,
                          pll3->PLL3R);

    /* Select PLL3 input reference frequency range: VCI */
    __HAL_RCC_PLL3_VCIRANGE(pll3->PLL3RGE) ;
 8006b12:	4b30      	ldr	r3, [pc, #192]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b16:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	695b      	ldr	r3, [r3, #20]
 8006b1e:	492d      	ldr	r1, [pc, #180]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b20:	4313      	orrs	r3, r2
 8006b22:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Select PLL3 output frequency range : VCO */
    __HAL_RCC_PLL3_VCORANGE(pll3->PLL3VCOSEL) ;
 8006b24:	4b2b      	ldr	r3, [pc, #172]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b28:	f423 7200 	bic.w	r2, r3, #512	; 0x200
 8006b2c:	687b      	ldr	r3, [r7, #4]
 8006b2e:	699b      	ldr	r3, [r3, #24]
 8006b30:	4928      	ldr	r1, [pc, #160]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b32:	4313      	orrs	r3, r2
 8006b34:	62cb      	str	r3, [r1, #44]	; 0x2c

    /* Disable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_DISABLE();
 8006b36:	4b27      	ldr	r3, [pc, #156]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b3a:	4a26      	ldr	r2, [pc, #152]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006b40:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Configures PLL3 clock Fractional Part Of The Multiplication Factor */
    __HAL_RCC_PLL3FRACN_CONFIG(pll3->PLL3FRACN);
 8006b42:	4b24      	ldr	r3, [pc, #144]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8006b46:	4b24      	ldr	r3, [pc, #144]	; (8006bd8 <RCCEx_PLL3_Config+0x160>)
 8006b48:	4013      	ands	r3, r2
 8006b4a:	687a      	ldr	r2, [r7, #4]
 8006b4c:	69d2      	ldr	r2, [r2, #28]
 8006b4e:	00d2      	lsls	r2, r2, #3
 8006b50:	4920      	ldr	r1, [pc, #128]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b52:	4313      	orrs	r3, r2
 8006b54:	644b      	str	r3, [r1, #68]	; 0x44

    /* Enable PLL3FRACN . */
    __HAL_RCC_PLL3FRACN_ENABLE();
 8006b56:	4b1f      	ldr	r3, [pc, #124]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b5a:	4a1e      	ldr	r2, [pc, #120]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b60:	62d3      	str	r3, [r2, #44]	; 0x2c

    /* Enable the PLL3 clock output */
    if (Divider == DIVIDER_P_UPDATE)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b00      	cmp	r3, #0
 8006b66:	d106      	bne.n	8006b76 <RCCEx_PLL3_Config+0xfe>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVP);
 8006b68:	4b1a      	ldr	r3, [pc, #104]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b6c:	4a19      	ldr	r2, [pc, #100]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b6e:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8006b72:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b74:	e00f      	b.n	8006b96 <RCCEx_PLL3_Config+0x11e>
    }
    else if (Divider == DIVIDER_Q_UPDATE)
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2b01      	cmp	r3, #1
 8006b7a:	d106      	bne.n	8006b8a <RCCEx_PLL3_Config+0x112>
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVQ);
 8006b7c:	4b15      	ldr	r3, [pc, #84]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b80:	4a14      	ldr	r2, [pc, #80]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b82:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8006b86:	62d3      	str	r3, [r2, #44]	; 0x2c
 8006b88:	e005      	b.n	8006b96 <RCCEx_PLL3_Config+0x11e>
    }
    else
    {
      __HAL_RCC_PLL3CLKOUT_ENABLE(RCC_PLL3_DIVR);
 8006b8a:	4b12      	ldr	r3, [pc, #72]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b8c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8e:	4a11      	ldr	r2, [pc, #68]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b90:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006b94:	62d3      	str	r3, [r2, #44]	; 0x2c
    }

    /* Enable  PLL3. */
    __HAL_RCC_PLL3_ENABLE();
 8006b96:	4b0f      	ldr	r3, [pc, #60]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b98:	681b      	ldr	r3, [r3, #0]
 8006b9a:	4a0e      	ldr	r2, [pc, #56]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006b9c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006ba0:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8006ba2:	f7fa fa0f 	bl	8000fc4 <HAL_GetTick>
 8006ba6:	60b8      	str	r0, [r7, #8]

    /* Wait till PLL3 is ready */
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006ba8:	e008      	b.n	8006bbc <RCCEx_PLL3_Config+0x144>
    {
      if ((HAL_GetTick() - tickstart) > PLL3_TIMEOUT_VALUE)
 8006baa:	f7fa fa0b 	bl	8000fc4 <HAL_GetTick>
 8006bae:	4602      	mov	r2, r0
 8006bb0:	68bb      	ldr	r3, [r7, #8]
 8006bb2:	1ad3      	subs	r3, r2, r3
 8006bb4:	2b02      	cmp	r3, #2
 8006bb6:	d901      	bls.n	8006bbc <RCCEx_PLL3_Config+0x144>
      {
        return HAL_TIMEOUT;
 8006bb8:	2303      	movs	r3, #3
 8006bba:	e006      	b.n	8006bca <RCCEx_PLL3_Config+0x152>
    while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLL3RDY) == 0U)
 8006bbc:	4b05      	ldr	r3, [pc, #20]	; (8006bd4 <RCCEx_PLL3_Config+0x15c>)
 8006bbe:	681b      	ldr	r3, [r3, #0]
 8006bc0:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d0f0      	beq.n	8006baa <RCCEx_PLL3_Config+0x132>
    }

  }


  return status;
 8006bc8:	7bfb      	ldrb	r3, [r7, #15]
}
 8006bca:	4618      	mov	r0, r3
 8006bcc:	3710      	adds	r7, #16
 8006bce:	46bd      	mov	sp, r7
 8006bd0:	bd80      	pop	{r7, pc}
 8006bd2:	bf00      	nop
 8006bd4:	58024400 	.word	0x58024400
 8006bd8:	ffff0007 	.word	0xffff0007

08006bdc <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bdc:	b580      	push	{r7, lr}
 8006bde:	b082      	sub	sp, #8
 8006be0:	af00      	add	r7, sp, #0
 8006be2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d101      	bne.n	8006bee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bea:	2301      	movs	r3, #1
 8006bec:	e042      	b.n	8006c74 <HAL_UART_Init+0x98>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bee:	687b      	ldr	r3, [r7, #4]
 8006bf0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006bf4:	2b00      	cmp	r3, #0
 8006bf6:	d106      	bne.n	8006c06 <HAL_UART_Init+0x2a>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2200      	movs	r2, #0
 8006bfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006c00:	6878      	ldr	r0, [r7, #4]
 8006c02:	f7fa f85d 	bl	8000cc0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	2224      	movs	r2, #36	; 0x24
 8006c0a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  __HAL_UART_DISABLE(huart);
 8006c0e:	687b      	ldr	r3, [r7, #4]
 8006c10:	681b      	ldr	r3, [r3, #0]
 8006c12:	681a      	ldr	r2, [r3, #0]
 8006c14:	687b      	ldr	r3, [r7, #4]
 8006c16:	681b      	ldr	r3, [r3, #0]
 8006c18:	f022 0201 	bic.w	r2, r2, #1
 8006c1c:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 8006c1e:	6878      	ldr	r0, [r7, #4]
 8006c20:	f000 f8ba 	bl	8006d98 <UART_SetConfig>
 8006c24:	4603      	mov	r3, r0
 8006c26:	2b01      	cmp	r3, #1
 8006c28:	d101      	bne.n	8006c2e <HAL_UART_Init+0x52>
  {
    return HAL_ERROR;
 8006c2a:	2301      	movs	r3, #1
 8006c2c:	e022      	b.n	8006c74 <HAL_UART_Init+0x98>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8006c2e:	687b      	ldr	r3, [r7, #4]
 8006c30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c32:	2b00      	cmp	r3, #0
 8006c34:	d002      	beq.n	8006c3c <HAL_UART_Init+0x60>
  {
    UART_AdvFeatureConfig(huart);
 8006c36:	6878      	ldr	r0, [r7, #4]
 8006c38:	f000 fe16 	bl	8007868 <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	685a      	ldr	r2, [r3, #4]
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c4a:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	681b      	ldr	r3, [r3, #0]
 8006c50:	689a      	ldr	r2, [r3, #8]
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	681b      	ldr	r3, [r3, #0]
 8006c56:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c5a:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	681a      	ldr	r2, [r3, #0]
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	681b      	ldr	r3, [r3, #0]
 8006c66:	f042 0201 	orr.w	r2, r2, #1
 8006c6a:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8006c6c:	6878      	ldr	r0, [r7, #4]
 8006c6e:	f000 fe9d 	bl	80079ac <UART_CheckIdleState>
 8006c72:	4603      	mov	r3, r0
}
 8006c74:	4618      	mov	r0, r3
 8006c76:	3708      	adds	r7, #8
 8006c78:	46bd      	mov	sp, r7
 8006c7a:	bd80      	pop	{r7, pc}

08006c7c <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b08a      	sub	sp, #40	; 0x28
 8006c80:	af02      	add	r7, sp, #8
 8006c82:	60f8      	str	r0, [r7, #12]
 8006c84:	60b9      	str	r1, [r7, #8]
 8006c86:	603b      	str	r3, [r7, #0]
 8006c88:	4613      	mov	r3, r2
 8006c8a:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8006c8c:	68fb      	ldr	r3, [r7, #12]
 8006c8e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006c92:	2b20      	cmp	r3, #32
 8006c94:	d17b      	bne.n	8006d8e <HAL_UART_Transmit+0x112>
  {
    if ((pData == NULL) || (Size == 0U))
 8006c96:	68bb      	ldr	r3, [r7, #8]
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	d002      	beq.n	8006ca2 <HAL_UART_Transmit+0x26>
 8006c9c:	88fb      	ldrh	r3, [r7, #6]
 8006c9e:	2b00      	cmp	r3, #0
 8006ca0:	d101      	bne.n	8006ca6 <HAL_UART_Transmit+0x2a>
    {
      return  HAL_ERROR;
 8006ca2:	2301      	movs	r3, #1
 8006ca4:	e074      	b.n	8006d90 <HAL_UART_Transmit+0x114>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006ca6:	68fb      	ldr	r3, [r7, #12]
 8006ca8:	2200      	movs	r2, #0
 8006caa:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006cae:	68fb      	ldr	r3, [r7, #12]
 8006cb0:	2221      	movs	r2, #33	; 0x21
 8006cb2:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8006cb6:	f7fa f985 	bl	8000fc4 <HAL_GetTick>
 8006cba:	6178      	str	r0, [r7, #20]

    huart->TxXferSize  = Size;
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	88fa      	ldrh	r2, [r7, #6]
 8006cc0:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
    huart->TxXferCount = Size;
 8006cc4:	68fb      	ldr	r3, [r7, #12]
 8006cc6:	88fa      	ldrh	r2, [r7, #6]
 8006cc8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ccc:	68fb      	ldr	r3, [r7, #12]
 8006cce:	689b      	ldr	r3, [r3, #8]
 8006cd0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006cd4:	d108      	bne.n	8006ce8 <HAL_UART_Transmit+0x6c>
 8006cd6:	68fb      	ldr	r3, [r7, #12]
 8006cd8:	691b      	ldr	r3, [r3, #16]
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d104      	bne.n	8006ce8 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8006cde:	2300      	movs	r3, #0
 8006ce0:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006ce2:	68bb      	ldr	r3, [r7, #8]
 8006ce4:	61bb      	str	r3, [r7, #24]
 8006ce6:	e003      	b.n	8006cf0 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8006ce8:	68bb      	ldr	r3, [r7, #8]
 8006cea:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006cec:	2300      	movs	r3, #0
 8006cee:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8006cf0:	e030      	b.n	8006d54 <HAL_UART_Transmit+0xd8>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	9300      	str	r3, [sp, #0]
 8006cf6:	697b      	ldr	r3, [r7, #20]
 8006cf8:	2200      	movs	r2, #0
 8006cfa:	2180      	movs	r1, #128	; 0x80
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f000 feff 	bl	8007b00 <UART_WaitOnFlagUntilTimeout>
 8006d02:	4603      	mov	r3, r0
 8006d04:	2b00      	cmp	r3, #0
 8006d06:	d005      	beq.n	8006d14 <HAL_UART_Transmit+0x98>
      {

        huart->gState = HAL_UART_STATE_READY;
 8006d08:	68fb      	ldr	r3, [r7, #12]
 8006d0a:	2220      	movs	r2, #32
 8006d0c:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

        return HAL_TIMEOUT;
 8006d10:	2303      	movs	r3, #3
 8006d12:	e03d      	b.n	8006d90 <HAL_UART_Transmit+0x114>
      }
      if (pdata8bits == NULL)
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	2b00      	cmp	r3, #0
 8006d18:	d10b      	bne.n	8006d32 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006d1a:	69bb      	ldr	r3, [r7, #24]
 8006d1c:	881b      	ldrh	r3, [r3, #0]
 8006d1e:	461a      	mov	r2, r3
 8006d20:	68fb      	ldr	r3, [r7, #12]
 8006d22:	681b      	ldr	r3, [r3, #0]
 8006d24:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006d28:	629a      	str	r2, [r3, #40]	; 0x28
        pdata16bits++;
 8006d2a:	69bb      	ldr	r3, [r7, #24]
 8006d2c:	3302      	adds	r3, #2
 8006d2e:	61bb      	str	r3, [r7, #24]
 8006d30:	e007      	b.n	8006d42 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 8006d32:	69fb      	ldr	r3, [r7, #28]
 8006d34:	781a      	ldrb	r2, [r3, #0]
 8006d36:	68fb      	ldr	r3, [r7, #12]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	629a      	str	r2, [r3, #40]	; 0x28
        pdata8bits++;
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	3301      	adds	r3, #1
 8006d40:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8006d42:	68fb      	ldr	r3, [r7, #12]
 8006d44:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d48:	b29b      	uxth	r3, r3
 8006d4a:	3b01      	subs	r3, #1
 8006d4c:	b29a      	uxth	r2, r3
 8006d4e:	68fb      	ldr	r3, [r7, #12]
 8006d50:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
    while (huart->TxXferCount > 0U)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8006d5a:	b29b      	uxth	r3, r3
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d1c8      	bne.n	8006cf2 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006d60:	683b      	ldr	r3, [r7, #0]
 8006d62:	9300      	str	r3, [sp, #0]
 8006d64:	697b      	ldr	r3, [r7, #20]
 8006d66:	2200      	movs	r2, #0
 8006d68:	2140      	movs	r1, #64	; 0x40
 8006d6a:	68f8      	ldr	r0, [r7, #12]
 8006d6c:	f000 fec8 	bl	8007b00 <UART_WaitOnFlagUntilTimeout>
 8006d70:	4603      	mov	r3, r0
 8006d72:	2b00      	cmp	r3, #0
 8006d74:	d005      	beq.n	8006d82 <HAL_UART_Transmit+0x106>
    {
      huart->gState = HAL_UART_STATE_READY;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2220      	movs	r2, #32
 8006d7a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      return HAL_TIMEOUT;
 8006d7e:	2303      	movs	r3, #3
 8006d80:	e006      	b.n	8006d90 <HAL_UART_Transmit+0x114>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8006d82:	68fb      	ldr	r3, [r7, #12]
 8006d84:	2220      	movs	r2, #32
 8006d86:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

    return HAL_OK;
 8006d8a:	2300      	movs	r3, #0
 8006d8c:	e000      	b.n	8006d90 <HAL_UART_Transmit+0x114>
  }
  else
  {
    return HAL_BUSY;
 8006d8e:	2302      	movs	r3, #2
  }
}
 8006d90:	4618      	mov	r0, r3
 8006d92:	3720      	adds	r7, #32
 8006d94:	46bd      	mov	sp, r7
 8006d96:	bd80      	pop	{r7, pc}

08006d98 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006d98:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8006d9c:	b092      	sub	sp, #72	; 0x48
 8006d9e:	af00      	add	r7, sp, #0
 8006da0:	6178      	str	r0, [r7, #20]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8006da2:	2300      	movs	r3, #0
 8006da4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8006da8:	697b      	ldr	r3, [r7, #20]
 8006daa:	689a      	ldr	r2, [r3, #8]
 8006dac:	697b      	ldr	r3, [r7, #20]
 8006dae:	691b      	ldr	r3, [r3, #16]
 8006db0:	431a      	orrs	r2, r3
 8006db2:	697b      	ldr	r3, [r7, #20]
 8006db4:	695b      	ldr	r3, [r3, #20]
 8006db6:	431a      	orrs	r2, r3
 8006db8:	697b      	ldr	r3, [r7, #20]
 8006dba:	69db      	ldr	r3, [r3, #28]
 8006dbc:	4313      	orrs	r3, r2
 8006dbe:	647b      	str	r3, [r7, #68]	; 0x44
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 8006dc0:	697b      	ldr	r3, [r7, #20]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	681a      	ldr	r2, [r3, #0]
 8006dc6:	4bbe      	ldr	r3, [pc, #760]	; (80070c0 <UART_SetConfig+0x328>)
 8006dc8:	4013      	ands	r3, r2
 8006dca:	697a      	ldr	r2, [r7, #20]
 8006dcc:	6812      	ldr	r2, [r2, #0]
 8006dce:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006dd0:	430b      	orrs	r3, r1
 8006dd2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006dd4:	697b      	ldr	r3, [r7, #20]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	685b      	ldr	r3, [r3, #4]
 8006dda:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 8006dde:	697b      	ldr	r3, [r7, #20]
 8006de0:	68da      	ldr	r2, [r3, #12]
 8006de2:	697b      	ldr	r3, [r7, #20]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	430a      	orrs	r2, r1
 8006de8:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 8006dea:	697b      	ldr	r3, [r7, #20]
 8006dec:	699b      	ldr	r3, [r3, #24]
 8006dee:	647b      	str	r3, [r7, #68]	; 0x44

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8006df0:	697b      	ldr	r3, [r7, #20]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	4ab3      	ldr	r2, [pc, #716]	; (80070c4 <UART_SetConfig+0x32c>)
 8006df6:	4293      	cmp	r3, r2
 8006df8:	d004      	beq.n	8006e04 <UART_SetConfig+0x6c>
  {
    tmpreg |= huart->Init.OneBitSampling;
 8006dfa:	697b      	ldr	r3, [r7, #20]
 8006dfc:	6a1b      	ldr	r3, [r3, #32]
 8006dfe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e00:	4313      	orrs	r3, r2
 8006e02:	647b      	str	r3, [r7, #68]	; 0x44
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8006e04:	697b      	ldr	r3, [r7, #20]
 8006e06:	681b      	ldr	r3, [r3, #0]
 8006e08:	689a      	ldr	r2, [r3, #8]
 8006e0a:	4baf      	ldr	r3, [pc, #700]	; (80070c8 <UART_SetConfig+0x330>)
 8006e0c:	4013      	ands	r3, r2
 8006e0e:	697a      	ldr	r2, [r7, #20]
 8006e10:	6812      	ldr	r2, [r2, #0]
 8006e12:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8006e14:	430b      	orrs	r3, r1
 8006e16:	6093      	str	r3, [r2, #8]

  /*-------------------------- USART PRESC Configuration -----------------------*/
  /* Configure
  * - UART Clock Prescaler : set PRESCALER according to huart->Init.ClockPrescaler value */
  MODIFY_REG(huart->Instance->PRESC, USART_PRESC_PRESCALER, huart->Init.ClockPrescaler);
 8006e18:	697b      	ldr	r3, [r7, #20]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006e1e:	f023 010f 	bic.w	r1, r3, #15
 8006e22:	697b      	ldr	r3, [r7, #20]
 8006e24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006e26:	697b      	ldr	r3, [r7, #20]
 8006e28:	681b      	ldr	r3, [r3, #0]
 8006e2a:	430a      	orrs	r2, r1
 8006e2c:	62da      	str	r2, [r3, #44]	; 0x2c

  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 8006e2e:	697b      	ldr	r3, [r7, #20]
 8006e30:	681b      	ldr	r3, [r3, #0]
 8006e32:	4aa6      	ldr	r2, [pc, #664]	; (80070cc <UART_SetConfig+0x334>)
 8006e34:	4293      	cmp	r3, r2
 8006e36:	d177      	bne.n	8006f28 <UART_SetConfig+0x190>
 8006e38:	4ba5      	ldr	r3, [pc, #660]	; (80070d0 <UART_SetConfig+0x338>)
 8006e3a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006e3c:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8006e40:	2b28      	cmp	r3, #40	; 0x28
 8006e42:	d86d      	bhi.n	8006f20 <UART_SetConfig+0x188>
 8006e44:	a201      	add	r2, pc, #4	; (adr r2, 8006e4c <UART_SetConfig+0xb4>)
 8006e46:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e4a:	bf00      	nop
 8006e4c:	08006ef1 	.word	0x08006ef1
 8006e50:	08006f21 	.word	0x08006f21
 8006e54:	08006f21 	.word	0x08006f21
 8006e58:	08006f21 	.word	0x08006f21
 8006e5c:	08006f21 	.word	0x08006f21
 8006e60:	08006f21 	.word	0x08006f21
 8006e64:	08006f21 	.word	0x08006f21
 8006e68:	08006f21 	.word	0x08006f21
 8006e6c:	08006ef9 	.word	0x08006ef9
 8006e70:	08006f21 	.word	0x08006f21
 8006e74:	08006f21 	.word	0x08006f21
 8006e78:	08006f21 	.word	0x08006f21
 8006e7c:	08006f21 	.word	0x08006f21
 8006e80:	08006f21 	.word	0x08006f21
 8006e84:	08006f21 	.word	0x08006f21
 8006e88:	08006f21 	.word	0x08006f21
 8006e8c:	08006f01 	.word	0x08006f01
 8006e90:	08006f21 	.word	0x08006f21
 8006e94:	08006f21 	.word	0x08006f21
 8006e98:	08006f21 	.word	0x08006f21
 8006e9c:	08006f21 	.word	0x08006f21
 8006ea0:	08006f21 	.word	0x08006f21
 8006ea4:	08006f21 	.word	0x08006f21
 8006ea8:	08006f21 	.word	0x08006f21
 8006eac:	08006f09 	.word	0x08006f09
 8006eb0:	08006f21 	.word	0x08006f21
 8006eb4:	08006f21 	.word	0x08006f21
 8006eb8:	08006f21 	.word	0x08006f21
 8006ebc:	08006f21 	.word	0x08006f21
 8006ec0:	08006f21 	.word	0x08006f21
 8006ec4:	08006f21 	.word	0x08006f21
 8006ec8:	08006f21 	.word	0x08006f21
 8006ecc:	08006f11 	.word	0x08006f11
 8006ed0:	08006f21 	.word	0x08006f21
 8006ed4:	08006f21 	.word	0x08006f21
 8006ed8:	08006f21 	.word	0x08006f21
 8006edc:	08006f21 	.word	0x08006f21
 8006ee0:	08006f21 	.word	0x08006f21
 8006ee4:	08006f21 	.word	0x08006f21
 8006ee8:	08006f21 	.word	0x08006f21
 8006eec:	08006f19 	.word	0x08006f19
 8006ef0:	2301      	movs	r3, #1
 8006ef2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ef6:	e222      	b.n	800733e <UART_SetConfig+0x5a6>
 8006ef8:	2304      	movs	r3, #4
 8006efa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006efe:	e21e      	b.n	800733e <UART_SetConfig+0x5a6>
 8006f00:	2308      	movs	r3, #8
 8006f02:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f06:	e21a      	b.n	800733e <UART_SetConfig+0x5a6>
 8006f08:	2310      	movs	r3, #16
 8006f0a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f0e:	e216      	b.n	800733e <UART_SetConfig+0x5a6>
 8006f10:	2320      	movs	r3, #32
 8006f12:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f16:	e212      	b.n	800733e <UART_SetConfig+0x5a6>
 8006f18:	2340      	movs	r3, #64	; 0x40
 8006f1a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f1e:	e20e      	b.n	800733e <UART_SetConfig+0x5a6>
 8006f20:	2380      	movs	r3, #128	; 0x80
 8006f22:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f26:	e20a      	b.n	800733e <UART_SetConfig+0x5a6>
 8006f28:	697b      	ldr	r3, [r7, #20]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	4a69      	ldr	r2, [pc, #420]	; (80070d4 <UART_SetConfig+0x33c>)
 8006f2e:	4293      	cmp	r3, r2
 8006f30:	d130      	bne.n	8006f94 <UART_SetConfig+0x1fc>
 8006f32:	4b67      	ldr	r3, [pc, #412]	; (80070d0 <UART_SetConfig+0x338>)
 8006f34:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006f36:	f003 0307 	and.w	r3, r3, #7
 8006f3a:	2b05      	cmp	r3, #5
 8006f3c:	d826      	bhi.n	8006f8c <UART_SetConfig+0x1f4>
 8006f3e:	a201      	add	r2, pc, #4	; (adr r2, 8006f44 <UART_SetConfig+0x1ac>)
 8006f40:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006f44:	08006f5d 	.word	0x08006f5d
 8006f48:	08006f65 	.word	0x08006f65
 8006f4c:	08006f6d 	.word	0x08006f6d
 8006f50:	08006f75 	.word	0x08006f75
 8006f54:	08006f7d 	.word	0x08006f7d
 8006f58:	08006f85 	.word	0x08006f85
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f62:	e1ec      	b.n	800733e <UART_SetConfig+0x5a6>
 8006f64:	2304      	movs	r3, #4
 8006f66:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f6a:	e1e8      	b.n	800733e <UART_SetConfig+0x5a6>
 8006f6c:	2308      	movs	r3, #8
 8006f6e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f72:	e1e4      	b.n	800733e <UART_SetConfig+0x5a6>
 8006f74:	2310      	movs	r3, #16
 8006f76:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f7a:	e1e0      	b.n	800733e <UART_SetConfig+0x5a6>
 8006f7c:	2320      	movs	r3, #32
 8006f7e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f82:	e1dc      	b.n	800733e <UART_SetConfig+0x5a6>
 8006f84:	2340      	movs	r3, #64	; 0x40
 8006f86:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f8a:	e1d8      	b.n	800733e <UART_SetConfig+0x5a6>
 8006f8c:	2380      	movs	r3, #128	; 0x80
 8006f8e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006f92:	e1d4      	b.n	800733e <UART_SetConfig+0x5a6>
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	681b      	ldr	r3, [r3, #0]
 8006f98:	4a4f      	ldr	r2, [pc, #316]	; (80070d8 <UART_SetConfig+0x340>)
 8006f9a:	4293      	cmp	r3, r2
 8006f9c:	d130      	bne.n	8007000 <UART_SetConfig+0x268>
 8006f9e:	4b4c      	ldr	r3, [pc, #304]	; (80070d0 <UART_SetConfig+0x338>)
 8006fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8006fa2:	f003 0307 	and.w	r3, r3, #7
 8006fa6:	2b05      	cmp	r3, #5
 8006fa8:	d826      	bhi.n	8006ff8 <UART_SetConfig+0x260>
 8006faa:	a201      	add	r2, pc, #4	; (adr r2, 8006fb0 <UART_SetConfig+0x218>)
 8006fac:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006fb0:	08006fc9 	.word	0x08006fc9
 8006fb4:	08006fd1 	.word	0x08006fd1
 8006fb8:	08006fd9 	.word	0x08006fd9
 8006fbc:	08006fe1 	.word	0x08006fe1
 8006fc0:	08006fe9 	.word	0x08006fe9
 8006fc4:	08006ff1 	.word	0x08006ff1
 8006fc8:	2300      	movs	r3, #0
 8006fca:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fce:	e1b6      	b.n	800733e <UART_SetConfig+0x5a6>
 8006fd0:	2304      	movs	r3, #4
 8006fd2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fd6:	e1b2      	b.n	800733e <UART_SetConfig+0x5a6>
 8006fd8:	2308      	movs	r3, #8
 8006fda:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fde:	e1ae      	b.n	800733e <UART_SetConfig+0x5a6>
 8006fe0:	2310      	movs	r3, #16
 8006fe2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fe6:	e1aa      	b.n	800733e <UART_SetConfig+0x5a6>
 8006fe8:	2320      	movs	r3, #32
 8006fea:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006fee:	e1a6      	b.n	800733e <UART_SetConfig+0x5a6>
 8006ff0:	2340      	movs	r3, #64	; 0x40
 8006ff2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ff6:	e1a2      	b.n	800733e <UART_SetConfig+0x5a6>
 8006ff8:	2380      	movs	r3, #128	; 0x80
 8006ffa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8006ffe:	e19e      	b.n	800733e <UART_SetConfig+0x5a6>
 8007000:	697b      	ldr	r3, [r7, #20]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	4a35      	ldr	r2, [pc, #212]	; (80070dc <UART_SetConfig+0x344>)
 8007006:	4293      	cmp	r3, r2
 8007008:	d130      	bne.n	800706c <UART_SetConfig+0x2d4>
 800700a:	4b31      	ldr	r3, [pc, #196]	; (80070d0 <UART_SetConfig+0x338>)
 800700c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800700e:	f003 0307 	and.w	r3, r3, #7
 8007012:	2b05      	cmp	r3, #5
 8007014:	d826      	bhi.n	8007064 <UART_SetConfig+0x2cc>
 8007016:	a201      	add	r2, pc, #4	; (adr r2, 800701c <UART_SetConfig+0x284>)
 8007018:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800701c:	08007035 	.word	0x08007035
 8007020:	0800703d 	.word	0x0800703d
 8007024:	08007045 	.word	0x08007045
 8007028:	0800704d 	.word	0x0800704d
 800702c:	08007055 	.word	0x08007055
 8007030:	0800705d 	.word	0x0800705d
 8007034:	2300      	movs	r3, #0
 8007036:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800703a:	e180      	b.n	800733e <UART_SetConfig+0x5a6>
 800703c:	2304      	movs	r3, #4
 800703e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007042:	e17c      	b.n	800733e <UART_SetConfig+0x5a6>
 8007044:	2308      	movs	r3, #8
 8007046:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800704a:	e178      	b.n	800733e <UART_SetConfig+0x5a6>
 800704c:	2310      	movs	r3, #16
 800704e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007052:	e174      	b.n	800733e <UART_SetConfig+0x5a6>
 8007054:	2320      	movs	r3, #32
 8007056:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800705a:	e170      	b.n	800733e <UART_SetConfig+0x5a6>
 800705c:	2340      	movs	r3, #64	; 0x40
 800705e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007062:	e16c      	b.n	800733e <UART_SetConfig+0x5a6>
 8007064:	2380      	movs	r3, #128	; 0x80
 8007066:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800706a:	e168      	b.n	800733e <UART_SetConfig+0x5a6>
 800706c:	697b      	ldr	r3, [r7, #20]
 800706e:	681b      	ldr	r3, [r3, #0]
 8007070:	4a1b      	ldr	r2, [pc, #108]	; (80070e0 <UART_SetConfig+0x348>)
 8007072:	4293      	cmp	r3, r2
 8007074:	d142      	bne.n	80070fc <UART_SetConfig+0x364>
 8007076:	4b16      	ldr	r3, [pc, #88]	; (80070d0 <UART_SetConfig+0x338>)
 8007078:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800707a:	f003 0307 	and.w	r3, r3, #7
 800707e:	2b05      	cmp	r3, #5
 8007080:	d838      	bhi.n	80070f4 <UART_SetConfig+0x35c>
 8007082:	a201      	add	r2, pc, #4	; (adr r2, 8007088 <UART_SetConfig+0x2f0>)
 8007084:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007088:	080070a1 	.word	0x080070a1
 800708c:	080070a9 	.word	0x080070a9
 8007090:	080070b1 	.word	0x080070b1
 8007094:	080070b9 	.word	0x080070b9
 8007098:	080070e5 	.word	0x080070e5
 800709c:	080070ed 	.word	0x080070ed
 80070a0:	2300      	movs	r3, #0
 80070a2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070a6:	e14a      	b.n	800733e <UART_SetConfig+0x5a6>
 80070a8:	2304      	movs	r3, #4
 80070aa:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ae:	e146      	b.n	800733e <UART_SetConfig+0x5a6>
 80070b0:	2308      	movs	r3, #8
 80070b2:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070b6:	e142      	b.n	800733e <UART_SetConfig+0x5a6>
 80070b8:	2310      	movs	r3, #16
 80070ba:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070be:	e13e      	b.n	800733e <UART_SetConfig+0x5a6>
 80070c0:	cfff69f3 	.word	0xcfff69f3
 80070c4:	58000c00 	.word	0x58000c00
 80070c8:	11fff4ff 	.word	0x11fff4ff
 80070cc:	40011000 	.word	0x40011000
 80070d0:	58024400 	.word	0x58024400
 80070d4:	40004400 	.word	0x40004400
 80070d8:	40004800 	.word	0x40004800
 80070dc:	40004c00 	.word	0x40004c00
 80070e0:	40005000 	.word	0x40005000
 80070e4:	2320      	movs	r3, #32
 80070e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070ea:	e128      	b.n	800733e <UART_SetConfig+0x5a6>
 80070ec:	2340      	movs	r3, #64	; 0x40
 80070ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070f2:	e124      	b.n	800733e <UART_SetConfig+0x5a6>
 80070f4:	2380      	movs	r3, #128	; 0x80
 80070f6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80070fa:	e120      	b.n	800733e <UART_SetConfig+0x5a6>
 80070fc:	697b      	ldr	r3, [r7, #20]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	4acb      	ldr	r2, [pc, #812]	; (8007430 <UART_SetConfig+0x698>)
 8007102:	4293      	cmp	r3, r2
 8007104:	d176      	bne.n	80071f4 <UART_SetConfig+0x45c>
 8007106:	4bcb      	ldr	r3, [pc, #812]	; (8007434 <UART_SetConfig+0x69c>)
 8007108:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800710a:	f003 0338 	and.w	r3, r3, #56	; 0x38
 800710e:	2b28      	cmp	r3, #40	; 0x28
 8007110:	d86c      	bhi.n	80071ec <UART_SetConfig+0x454>
 8007112:	a201      	add	r2, pc, #4	; (adr r2, 8007118 <UART_SetConfig+0x380>)
 8007114:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007118:	080071bd 	.word	0x080071bd
 800711c:	080071ed 	.word	0x080071ed
 8007120:	080071ed 	.word	0x080071ed
 8007124:	080071ed 	.word	0x080071ed
 8007128:	080071ed 	.word	0x080071ed
 800712c:	080071ed 	.word	0x080071ed
 8007130:	080071ed 	.word	0x080071ed
 8007134:	080071ed 	.word	0x080071ed
 8007138:	080071c5 	.word	0x080071c5
 800713c:	080071ed 	.word	0x080071ed
 8007140:	080071ed 	.word	0x080071ed
 8007144:	080071ed 	.word	0x080071ed
 8007148:	080071ed 	.word	0x080071ed
 800714c:	080071ed 	.word	0x080071ed
 8007150:	080071ed 	.word	0x080071ed
 8007154:	080071ed 	.word	0x080071ed
 8007158:	080071cd 	.word	0x080071cd
 800715c:	080071ed 	.word	0x080071ed
 8007160:	080071ed 	.word	0x080071ed
 8007164:	080071ed 	.word	0x080071ed
 8007168:	080071ed 	.word	0x080071ed
 800716c:	080071ed 	.word	0x080071ed
 8007170:	080071ed 	.word	0x080071ed
 8007174:	080071ed 	.word	0x080071ed
 8007178:	080071d5 	.word	0x080071d5
 800717c:	080071ed 	.word	0x080071ed
 8007180:	080071ed 	.word	0x080071ed
 8007184:	080071ed 	.word	0x080071ed
 8007188:	080071ed 	.word	0x080071ed
 800718c:	080071ed 	.word	0x080071ed
 8007190:	080071ed 	.word	0x080071ed
 8007194:	080071ed 	.word	0x080071ed
 8007198:	080071dd 	.word	0x080071dd
 800719c:	080071ed 	.word	0x080071ed
 80071a0:	080071ed 	.word	0x080071ed
 80071a4:	080071ed 	.word	0x080071ed
 80071a8:	080071ed 	.word	0x080071ed
 80071ac:	080071ed 	.word	0x080071ed
 80071b0:	080071ed 	.word	0x080071ed
 80071b4:	080071ed 	.word	0x080071ed
 80071b8:	080071e5 	.word	0x080071e5
 80071bc:	2301      	movs	r3, #1
 80071be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071c2:	e0bc      	b.n	800733e <UART_SetConfig+0x5a6>
 80071c4:	2304      	movs	r3, #4
 80071c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ca:	e0b8      	b.n	800733e <UART_SetConfig+0x5a6>
 80071cc:	2308      	movs	r3, #8
 80071ce:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071d2:	e0b4      	b.n	800733e <UART_SetConfig+0x5a6>
 80071d4:	2310      	movs	r3, #16
 80071d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071da:	e0b0      	b.n	800733e <UART_SetConfig+0x5a6>
 80071dc:	2320      	movs	r3, #32
 80071de:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071e2:	e0ac      	b.n	800733e <UART_SetConfig+0x5a6>
 80071e4:	2340      	movs	r3, #64	; 0x40
 80071e6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071ea:	e0a8      	b.n	800733e <UART_SetConfig+0x5a6>
 80071ec:	2380      	movs	r3, #128	; 0x80
 80071ee:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80071f2:	e0a4      	b.n	800733e <UART_SetConfig+0x5a6>
 80071f4:	697b      	ldr	r3, [r7, #20]
 80071f6:	681b      	ldr	r3, [r3, #0]
 80071f8:	4a8f      	ldr	r2, [pc, #572]	; (8007438 <UART_SetConfig+0x6a0>)
 80071fa:	4293      	cmp	r3, r2
 80071fc:	d130      	bne.n	8007260 <UART_SetConfig+0x4c8>
 80071fe:	4b8d      	ldr	r3, [pc, #564]	; (8007434 <UART_SetConfig+0x69c>)
 8007200:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007202:	f003 0307 	and.w	r3, r3, #7
 8007206:	2b05      	cmp	r3, #5
 8007208:	d826      	bhi.n	8007258 <UART_SetConfig+0x4c0>
 800720a:	a201      	add	r2, pc, #4	; (adr r2, 8007210 <UART_SetConfig+0x478>)
 800720c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007210:	08007229 	.word	0x08007229
 8007214:	08007231 	.word	0x08007231
 8007218:	08007239 	.word	0x08007239
 800721c:	08007241 	.word	0x08007241
 8007220:	08007249 	.word	0x08007249
 8007224:	08007251 	.word	0x08007251
 8007228:	2300      	movs	r3, #0
 800722a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800722e:	e086      	b.n	800733e <UART_SetConfig+0x5a6>
 8007230:	2304      	movs	r3, #4
 8007232:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007236:	e082      	b.n	800733e <UART_SetConfig+0x5a6>
 8007238:	2308      	movs	r3, #8
 800723a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800723e:	e07e      	b.n	800733e <UART_SetConfig+0x5a6>
 8007240:	2310      	movs	r3, #16
 8007242:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007246:	e07a      	b.n	800733e <UART_SetConfig+0x5a6>
 8007248:	2320      	movs	r3, #32
 800724a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800724e:	e076      	b.n	800733e <UART_SetConfig+0x5a6>
 8007250:	2340      	movs	r3, #64	; 0x40
 8007252:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007256:	e072      	b.n	800733e <UART_SetConfig+0x5a6>
 8007258:	2380      	movs	r3, #128	; 0x80
 800725a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800725e:	e06e      	b.n	800733e <UART_SetConfig+0x5a6>
 8007260:	697b      	ldr	r3, [r7, #20]
 8007262:	681b      	ldr	r3, [r3, #0]
 8007264:	4a75      	ldr	r2, [pc, #468]	; (800743c <UART_SetConfig+0x6a4>)
 8007266:	4293      	cmp	r3, r2
 8007268:	d130      	bne.n	80072cc <UART_SetConfig+0x534>
 800726a:	4b72      	ldr	r3, [pc, #456]	; (8007434 <UART_SetConfig+0x69c>)
 800726c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800726e:	f003 0307 	and.w	r3, r3, #7
 8007272:	2b05      	cmp	r3, #5
 8007274:	d826      	bhi.n	80072c4 <UART_SetConfig+0x52c>
 8007276:	a201      	add	r2, pc, #4	; (adr r2, 800727c <UART_SetConfig+0x4e4>)
 8007278:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800727c:	08007295 	.word	0x08007295
 8007280:	0800729d 	.word	0x0800729d
 8007284:	080072a5 	.word	0x080072a5
 8007288:	080072ad 	.word	0x080072ad
 800728c:	080072b5 	.word	0x080072b5
 8007290:	080072bd 	.word	0x080072bd
 8007294:	2300      	movs	r3, #0
 8007296:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800729a:	e050      	b.n	800733e <UART_SetConfig+0x5a6>
 800729c:	2304      	movs	r3, #4
 800729e:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072a2:	e04c      	b.n	800733e <UART_SetConfig+0x5a6>
 80072a4:	2308      	movs	r3, #8
 80072a6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072aa:	e048      	b.n	800733e <UART_SetConfig+0x5a6>
 80072ac:	2310      	movs	r3, #16
 80072ae:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072b2:	e044      	b.n	800733e <UART_SetConfig+0x5a6>
 80072b4:	2320      	movs	r3, #32
 80072b6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ba:	e040      	b.n	800733e <UART_SetConfig+0x5a6>
 80072bc:	2340      	movs	r3, #64	; 0x40
 80072be:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072c2:	e03c      	b.n	800733e <UART_SetConfig+0x5a6>
 80072c4:	2380      	movs	r3, #128	; 0x80
 80072c6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 80072ca:	e038      	b.n	800733e <UART_SetConfig+0x5a6>
 80072cc:	697b      	ldr	r3, [r7, #20]
 80072ce:	681b      	ldr	r3, [r3, #0]
 80072d0:	4a5b      	ldr	r2, [pc, #364]	; (8007440 <UART_SetConfig+0x6a8>)
 80072d2:	4293      	cmp	r3, r2
 80072d4:	d130      	bne.n	8007338 <UART_SetConfig+0x5a0>
 80072d6:	4b57      	ldr	r3, [pc, #348]	; (8007434 <UART_SetConfig+0x69c>)
 80072d8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80072da:	f003 0307 	and.w	r3, r3, #7
 80072de:	2b05      	cmp	r3, #5
 80072e0:	d826      	bhi.n	8007330 <UART_SetConfig+0x598>
 80072e2:	a201      	add	r2, pc, #4	; (adr r2, 80072e8 <UART_SetConfig+0x550>)
 80072e4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80072e8:	08007301 	.word	0x08007301
 80072ec:	08007309 	.word	0x08007309
 80072f0:	08007311 	.word	0x08007311
 80072f4:	08007319 	.word	0x08007319
 80072f8:	08007321 	.word	0x08007321
 80072fc:	08007329 	.word	0x08007329
 8007300:	2302      	movs	r3, #2
 8007302:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007306:	e01a      	b.n	800733e <UART_SetConfig+0x5a6>
 8007308:	2304      	movs	r3, #4
 800730a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800730e:	e016      	b.n	800733e <UART_SetConfig+0x5a6>
 8007310:	2308      	movs	r3, #8
 8007312:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007316:	e012      	b.n	800733e <UART_SetConfig+0x5a6>
 8007318:	2310      	movs	r3, #16
 800731a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800731e:	e00e      	b.n	800733e <UART_SetConfig+0x5a6>
 8007320:	2320      	movs	r3, #32
 8007322:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007326:	e00a      	b.n	800733e <UART_SetConfig+0x5a6>
 8007328:	2340      	movs	r3, #64	; 0x40
 800732a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 800732e:	e006      	b.n	800733e <UART_SetConfig+0x5a6>
 8007330:	2380      	movs	r3, #128	; 0x80
 8007332:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
 8007336:	e002      	b.n	800733e <UART_SetConfig+0x5a6>
 8007338:	2380      	movs	r3, #128	; 0x80
 800733a:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 800733e:	697b      	ldr	r3, [r7, #20]
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	4a3f      	ldr	r2, [pc, #252]	; (8007440 <UART_SetConfig+0x6a8>)
 8007344:	4293      	cmp	r3, r2
 8007346:	f040 80f8 	bne.w	800753a <UART_SetConfig+0x7a2>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 800734a:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800734e:	2b20      	cmp	r3, #32
 8007350:	dc46      	bgt.n	80073e0 <UART_SetConfig+0x648>
 8007352:	2b02      	cmp	r3, #2
 8007354:	f2c0 8082 	blt.w	800745c <UART_SetConfig+0x6c4>
 8007358:	3b02      	subs	r3, #2
 800735a:	2b1e      	cmp	r3, #30
 800735c:	d87e      	bhi.n	800745c <UART_SetConfig+0x6c4>
 800735e:	a201      	add	r2, pc, #4	; (adr r2, 8007364 <UART_SetConfig+0x5cc>)
 8007360:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007364:	080073e7 	.word	0x080073e7
 8007368:	0800745d 	.word	0x0800745d
 800736c:	080073ef 	.word	0x080073ef
 8007370:	0800745d 	.word	0x0800745d
 8007374:	0800745d 	.word	0x0800745d
 8007378:	0800745d 	.word	0x0800745d
 800737c:	080073ff 	.word	0x080073ff
 8007380:	0800745d 	.word	0x0800745d
 8007384:	0800745d 	.word	0x0800745d
 8007388:	0800745d 	.word	0x0800745d
 800738c:	0800745d 	.word	0x0800745d
 8007390:	0800745d 	.word	0x0800745d
 8007394:	0800745d 	.word	0x0800745d
 8007398:	0800745d 	.word	0x0800745d
 800739c:	0800740f 	.word	0x0800740f
 80073a0:	0800745d 	.word	0x0800745d
 80073a4:	0800745d 	.word	0x0800745d
 80073a8:	0800745d 	.word	0x0800745d
 80073ac:	0800745d 	.word	0x0800745d
 80073b0:	0800745d 	.word	0x0800745d
 80073b4:	0800745d 	.word	0x0800745d
 80073b8:	0800745d 	.word	0x0800745d
 80073bc:	0800745d 	.word	0x0800745d
 80073c0:	0800745d 	.word	0x0800745d
 80073c4:	0800745d 	.word	0x0800745d
 80073c8:	0800745d 	.word	0x0800745d
 80073cc:	0800745d 	.word	0x0800745d
 80073d0:	0800745d 	.word	0x0800745d
 80073d4:	0800745d 	.word	0x0800745d
 80073d8:	0800745d 	.word	0x0800745d
 80073dc:	0800744f 	.word	0x0800744f
 80073e0:	2b40      	cmp	r3, #64	; 0x40
 80073e2:	d037      	beq.n	8007454 <UART_SetConfig+0x6bc>
 80073e4:	e03a      	b.n	800745c <UART_SetConfig+0x6c4>
    {
      case UART_CLOCKSOURCE_D3PCLK1:
        pclk = HAL_RCCEx_GetD3PCLK1Freq();
 80073e6:	f7fe fe85 	bl	80060f4 <HAL_RCCEx_GetD3PCLK1Freq>
 80073ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80073ec:	e03c      	b.n	8007468 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80073ee:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073f2:	4618      	mov	r0, r3
 80073f4:	f7fe fe94 	bl	8006120 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 80073f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80073fa:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80073fc:	e034      	b.n	8007468 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 80073fe:	f107 0318 	add.w	r3, r7, #24
 8007402:	4618      	mov	r0, r3
 8007404:	f7fe ffe0 	bl	80063c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007408:	69fb      	ldr	r3, [r7, #28]
 800740a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800740c:	e02c      	b.n	8007468 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 800740e:	4b09      	ldr	r3, [pc, #36]	; (8007434 <UART_SetConfig+0x69c>)
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	f003 0320 	and.w	r3, r3, #32
 8007416:	2b00      	cmp	r3, #0
 8007418:	d016      	beq.n	8007448 <UART_SetConfig+0x6b0>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 800741a:	4b06      	ldr	r3, [pc, #24]	; (8007434 <UART_SetConfig+0x69c>)
 800741c:	681b      	ldr	r3, [r3, #0]
 800741e:	08db      	lsrs	r3, r3, #3
 8007420:	f003 0303 	and.w	r3, r3, #3
 8007424:	4a07      	ldr	r2, [pc, #28]	; (8007444 <UART_SetConfig+0x6ac>)
 8007426:	fa22 f303 	lsr.w	r3, r2, r3
 800742a:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 800742c:	e01c      	b.n	8007468 <UART_SetConfig+0x6d0>
 800742e:	bf00      	nop
 8007430:	40011400 	.word	0x40011400
 8007434:	58024400 	.word	0x58024400
 8007438:	40007800 	.word	0x40007800
 800743c:	40007c00 	.word	0x40007c00
 8007440:	58000c00 	.word	0x58000c00
 8007444:	03d09000 	.word	0x03d09000
          pclk = (uint32_t) HSI_VALUE;
 8007448:	4b9d      	ldr	r3, [pc, #628]	; (80076c0 <UART_SetConfig+0x928>)
 800744a:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800744c:	e00c      	b.n	8007468 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800744e:	4b9d      	ldr	r3, [pc, #628]	; (80076c4 <UART_SetConfig+0x92c>)
 8007450:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007452:	e009      	b.n	8007468 <UART_SetConfig+0x6d0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007454:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007458:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800745a:	e005      	b.n	8007468 <UART_SetConfig+0x6d0>
      default:
        pclk = 0U;
 800745c:	2300      	movs	r3, #0
 800745e:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 8007460:	2301      	movs	r3, #1
 8007462:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007466:	bf00      	nop
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 8007468:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800746a:	2b00      	cmp	r3, #0
 800746c:	f000 81de 	beq.w	800782c <UART_SetConfig+0xa94>
    {
      /* Compute clock after Prescaler */
      lpuart_ker_ck_pres = (pclk / UARTPrescTable[huart->Init.ClockPrescaler]);
 8007470:	697b      	ldr	r3, [r7, #20]
 8007472:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007474:	4a94      	ldr	r2, [pc, #592]	; (80076c8 <UART_SetConfig+0x930>)
 8007476:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800747a:	461a      	mov	r2, r3
 800747c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800747e:	fbb3 f3f2 	udiv	r3, r3, r2
 8007482:	633b      	str	r3, [r7, #48]	; 0x30

      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 8007484:	697b      	ldr	r3, [r7, #20]
 8007486:	685a      	ldr	r2, [r3, #4]
 8007488:	4613      	mov	r3, r2
 800748a:	005b      	lsls	r3, r3, #1
 800748c:	4413      	add	r3, r2
 800748e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007490:	429a      	cmp	r2, r3
 8007492:	d305      	bcc.n	80074a0 <UART_SetConfig+0x708>
          (lpuart_ker_ck_pres > (4096U * huart->Init.BaudRate)))
 8007494:	697b      	ldr	r3, [r7, #20]
 8007496:	685b      	ldr	r3, [r3, #4]
 8007498:	031b      	lsls	r3, r3, #12
      if ((lpuart_ker_ck_pres < (3U * huart->Init.BaudRate)) ||
 800749a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800749c:	429a      	cmp	r2, r3
 800749e:	d903      	bls.n	80074a8 <UART_SetConfig+0x710>
      {
        ret = HAL_ERROR;
 80074a0:	2301      	movs	r3, #1
 80074a2:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80074a6:	e1c1      	b.n	800782c <UART_SetConfig+0xa94>
      }
      else
      {
        /* Check computed UsartDiv value is in allocated range
           (it is forbidden to write values lower than 0x300 in the LPUART_BRR register) */
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80074a8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80074aa:	2200      	movs	r2, #0
 80074ac:	60bb      	str	r3, [r7, #8]
 80074ae:	60fa      	str	r2, [r7, #12]
 80074b0:	697b      	ldr	r3, [r7, #20]
 80074b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80074b4:	4a84      	ldr	r2, [pc, #528]	; (80076c8 <UART_SetConfig+0x930>)
 80074b6:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80074ba:	b29b      	uxth	r3, r3
 80074bc:	2200      	movs	r2, #0
 80074be:	603b      	str	r3, [r7, #0]
 80074c0:	607a      	str	r2, [r7, #4]
 80074c2:	e9d7 2300 	ldrd	r2, r3, [r7]
 80074c6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80074ca:	f7f8 ff61 	bl	8000390 <__aeabi_uldivmod>
 80074ce:	4602      	mov	r2, r0
 80074d0:	460b      	mov	r3, r1
 80074d2:	4610      	mov	r0, r2
 80074d4:	4619      	mov	r1, r3
 80074d6:	f04f 0200 	mov.w	r2, #0
 80074da:	f04f 0300 	mov.w	r3, #0
 80074de:	020b      	lsls	r3, r1, #8
 80074e0:	ea43 6310 	orr.w	r3, r3, r0, lsr #24
 80074e4:	0202      	lsls	r2, r0, #8
 80074e6:	6979      	ldr	r1, [r7, #20]
 80074e8:	6849      	ldr	r1, [r1, #4]
 80074ea:	0849      	lsrs	r1, r1, #1
 80074ec:	2000      	movs	r0, #0
 80074ee:	460c      	mov	r4, r1
 80074f0:	4605      	mov	r5, r0
 80074f2:	eb12 0804 	adds.w	r8, r2, r4
 80074f6:	eb43 0905 	adc.w	r9, r3, r5
 80074fa:	697b      	ldr	r3, [r7, #20]
 80074fc:	685b      	ldr	r3, [r3, #4]
 80074fe:	2200      	movs	r2, #0
 8007500:	469a      	mov	sl, r3
 8007502:	4693      	mov	fp, r2
 8007504:	4652      	mov	r2, sl
 8007506:	465b      	mov	r3, fp
 8007508:	4640      	mov	r0, r8
 800750a:	4649      	mov	r1, r9
 800750c:	f7f8 ff40 	bl	8000390 <__aeabi_uldivmod>
 8007510:	4602      	mov	r2, r0
 8007512:	460b      	mov	r3, r1
 8007514:	4613      	mov	r3, r2
 8007516:	63bb      	str	r3, [r7, #56]	; 0x38
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8007518:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800751a:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800751e:	d308      	bcc.n	8007532 <UART_SetConfig+0x79a>
 8007520:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007522:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007526:	d204      	bcs.n	8007532 <UART_SetConfig+0x79a>
        {
          huart->Instance->BRR = usartdiv;
 8007528:	697b      	ldr	r3, [r7, #20]
 800752a:	681b      	ldr	r3, [r3, #0]
 800752c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800752e:	60da      	str	r2, [r3, #12]
 8007530:	e17c      	b.n	800782c <UART_SetConfig+0xa94>
        }
        else
        {
          ret = HAL_ERROR;
 8007532:	2301      	movs	r3, #1
 8007534:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 8007538:	e178      	b.n	800782c <UART_SetConfig+0xa94>
      } /* if ( (lpuart_ker_ck_pres < (3 * huart->Init.BaudRate) ) ||
                (lpuart_ker_ck_pres > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	69db      	ldr	r3, [r3, #28]
 800753e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007542:	f040 80c5 	bne.w	80076d0 <UART_SetConfig+0x938>
  {
    switch (clocksource)
 8007546:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 800754a:	2b20      	cmp	r3, #32
 800754c:	dc48      	bgt.n	80075e0 <UART_SetConfig+0x848>
 800754e:	2b00      	cmp	r3, #0
 8007550:	db7b      	blt.n	800764a <UART_SetConfig+0x8b2>
 8007552:	2b20      	cmp	r3, #32
 8007554:	d879      	bhi.n	800764a <UART_SetConfig+0x8b2>
 8007556:	a201      	add	r2, pc, #4	; (adr r2, 800755c <UART_SetConfig+0x7c4>)
 8007558:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800755c:	080075e7 	.word	0x080075e7
 8007560:	080075ef 	.word	0x080075ef
 8007564:	0800764b 	.word	0x0800764b
 8007568:	0800764b 	.word	0x0800764b
 800756c:	080075f7 	.word	0x080075f7
 8007570:	0800764b 	.word	0x0800764b
 8007574:	0800764b 	.word	0x0800764b
 8007578:	0800764b 	.word	0x0800764b
 800757c:	08007607 	.word	0x08007607
 8007580:	0800764b 	.word	0x0800764b
 8007584:	0800764b 	.word	0x0800764b
 8007588:	0800764b 	.word	0x0800764b
 800758c:	0800764b 	.word	0x0800764b
 8007590:	0800764b 	.word	0x0800764b
 8007594:	0800764b 	.word	0x0800764b
 8007598:	0800764b 	.word	0x0800764b
 800759c:	08007617 	.word	0x08007617
 80075a0:	0800764b 	.word	0x0800764b
 80075a4:	0800764b 	.word	0x0800764b
 80075a8:	0800764b 	.word	0x0800764b
 80075ac:	0800764b 	.word	0x0800764b
 80075b0:	0800764b 	.word	0x0800764b
 80075b4:	0800764b 	.word	0x0800764b
 80075b8:	0800764b 	.word	0x0800764b
 80075bc:	0800764b 	.word	0x0800764b
 80075c0:	0800764b 	.word	0x0800764b
 80075c4:	0800764b 	.word	0x0800764b
 80075c8:	0800764b 	.word	0x0800764b
 80075cc:	0800764b 	.word	0x0800764b
 80075d0:	0800764b 	.word	0x0800764b
 80075d4:	0800764b 	.word	0x0800764b
 80075d8:	0800764b 	.word	0x0800764b
 80075dc:	0800763d 	.word	0x0800763d
 80075e0:	2b40      	cmp	r3, #64	; 0x40
 80075e2:	d02e      	beq.n	8007642 <UART_SetConfig+0x8aa>
 80075e4:	e031      	b.n	800764a <UART_SetConfig+0x8b2>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80075e6:	f7fc fd8f 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 80075ea:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075ec:	e033      	b.n	8007656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80075ee:	f7fc fda1 	bl	8004134 <HAL_RCC_GetPCLK2Freq>
 80075f2:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 80075f4:	e02f      	b.n	8007656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 80075f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80075fa:	4618      	mov	r0, r3
 80075fc:	f7fe fd90 	bl	8006120 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 8007600:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007602:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007604:	e027      	b.n	8007656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007606:	f107 0318 	add.w	r3, r7, #24
 800760a:	4618      	mov	r0, r3
 800760c:	f7fe fedc 	bl	80063c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 8007610:	69fb      	ldr	r3, [r7, #28]
 8007612:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007614:	e01f      	b.n	8007656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8007616:	4b2d      	ldr	r3, [pc, #180]	; (80076cc <UART_SetConfig+0x934>)
 8007618:	681b      	ldr	r3, [r3, #0]
 800761a:	f003 0320 	and.w	r3, r3, #32
 800761e:	2b00      	cmp	r3, #0
 8007620:	d009      	beq.n	8007636 <UART_SetConfig+0x89e>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 8007622:	4b2a      	ldr	r3, [pc, #168]	; (80076cc <UART_SetConfig+0x934>)
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	08db      	lsrs	r3, r3, #3
 8007628:	f003 0303 	and.w	r3, r3, #3
 800762c:	4a24      	ldr	r2, [pc, #144]	; (80076c0 <UART_SetConfig+0x928>)
 800762e:	fa22 f303 	lsr.w	r3, r2, r3
 8007632:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 8007634:	e00f      	b.n	8007656 <UART_SetConfig+0x8be>
          pclk = (uint32_t) HSI_VALUE;
 8007636:	4b22      	ldr	r3, [pc, #136]	; (80076c0 <UART_SetConfig+0x928>)
 8007638:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 800763a:	e00c      	b.n	8007656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 800763c:	4b21      	ldr	r3, [pc, #132]	; (80076c4 <UART_SetConfig+0x92c>)
 800763e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007640:	e009      	b.n	8007656 <UART_SetConfig+0x8be>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8007642:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8007646:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007648:	e005      	b.n	8007656 <UART_SetConfig+0x8be>
      default:
        pclk = 0U;
 800764a:	2300      	movs	r3, #0
 800764c:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 800764e:	2301      	movs	r3, #1
 8007650:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 8007654:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 8007656:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007658:	2b00      	cmp	r3, #0
 800765a:	f000 80e7 	beq.w	800782c <UART_SetConfig+0xa94>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 800765e:	697b      	ldr	r3, [r7, #20]
 8007660:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007662:	4a19      	ldr	r2, [pc, #100]	; (80076c8 <UART_SetConfig+0x930>)
 8007664:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8007668:	461a      	mov	r2, r3
 800766a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800766c:	fbb3 f3f2 	udiv	r3, r3, r2
 8007670:	005a      	lsls	r2, r3, #1
 8007672:	697b      	ldr	r3, [r7, #20]
 8007674:	685b      	ldr	r3, [r3, #4]
 8007676:	085b      	lsrs	r3, r3, #1
 8007678:	441a      	add	r2, r3
 800767a:	697b      	ldr	r3, [r7, #20]
 800767c:	685b      	ldr	r3, [r3, #4]
 800767e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007682:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8007684:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007686:	2b0f      	cmp	r3, #15
 8007688:	d916      	bls.n	80076b8 <UART_SetConfig+0x920>
 800768a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800768c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007690:	d212      	bcs.n	80076b8 <UART_SetConfig+0x920>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8007692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007694:	b29b      	uxth	r3, r3
 8007696:	f023 030f 	bic.w	r3, r3, #15
 800769a:	86fb      	strh	r3, [r7, #54]	; 0x36
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	085b      	lsrs	r3, r3, #1
 80076a0:	b29b      	uxth	r3, r3
 80076a2:	f003 0307 	and.w	r3, r3, #7
 80076a6:	b29a      	uxth	r2, r3
 80076a8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80076aa:	4313      	orrs	r3, r2
 80076ac:	86fb      	strh	r3, [r7, #54]	; 0x36
        huart->Instance->BRR = brrtemp;
 80076ae:	697b      	ldr	r3, [r7, #20]
 80076b0:	681b      	ldr	r3, [r3, #0]
 80076b2:	8efa      	ldrh	r2, [r7, #54]	; 0x36
 80076b4:	60da      	str	r2, [r3, #12]
 80076b6:	e0b9      	b.n	800782c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 80076b8:	2301      	movs	r3, #1
 80076ba:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
 80076be:	e0b5      	b.n	800782c <UART_SetConfig+0xa94>
 80076c0:	03d09000 	.word	0x03d09000
 80076c4:	003d0900 	.word	0x003d0900
 80076c8:	08008820 	.word	0x08008820
 80076cc:	58024400 	.word	0x58024400
      }
    }
  }
  else
  {
    switch (clocksource)
 80076d0:	f897 3043 	ldrb.w	r3, [r7, #67]	; 0x43
 80076d4:	2b20      	cmp	r3, #32
 80076d6:	dc49      	bgt.n	800776c <UART_SetConfig+0x9d4>
 80076d8:	2b00      	cmp	r3, #0
 80076da:	db7c      	blt.n	80077d6 <UART_SetConfig+0xa3e>
 80076dc:	2b20      	cmp	r3, #32
 80076de:	d87a      	bhi.n	80077d6 <UART_SetConfig+0xa3e>
 80076e0:	a201      	add	r2, pc, #4	; (adr r2, 80076e8 <UART_SetConfig+0x950>)
 80076e2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80076e6:	bf00      	nop
 80076e8:	08007773 	.word	0x08007773
 80076ec:	0800777b 	.word	0x0800777b
 80076f0:	080077d7 	.word	0x080077d7
 80076f4:	080077d7 	.word	0x080077d7
 80076f8:	08007783 	.word	0x08007783
 80076fc:	080077d7 	.word	0x080077d7
 8007700:	080077d7 	.word	0x080077d7
 8007704:	080077d7 	.word	0x080077d7
 8007708:	08007793 	.word	0x08007793
 800770c:	080077d7 	.word	0x080077d7
 8007710:	080077d7 	.word	0x080077d7
 8007714:	080077d7 	.word	0x080077d7
 8007718:	080077d7 	.word	0x080077d7
 800771c:	080077d7 	.word	0x080077d7
 8007720:	080077d7 	.word	0x080077d7
 8007724:	080077d7 	.word	0x080077d7
 8007728:	080077a3 	.word	0x080077a3
 800772c:	080077d7 	.word	0x080077d7
 8007730:	080077d7 	.word	0x080077d7
 8007734:	080077d7 	.word	0x080077d7
 8007738:	080077d7 	.word	0x080077d7
 800773c:	080077d7 	.word	0x080077d7
 8007740:	080077d7 	.word	0x080077d7
 8007744:	080077d7 	.word	0x080077d7
 8007748:	080077d7 	.word	0x080077d7
 800774c:	080077d7 	.word	0x080077d7
 8007750:	080077d7 	.word	0x080077d7
 8007754:	080077d7 	.word	0x080077d7
 8007758:	080077d7 	.word	0x080077d7
 800775c:	080077d7 	.word	0x080077d7
 8007760:	080077d7 	.word	0x080077d7
 8007764:	080077d7 	.word	0x080077d7
 8007768:	080077c9 	.word	0x080077c9
 800776c:	2b40      	cmp	r3, #64	; 0x40
 800776e:	d02e      	beq.n	80077ce <UART_SetConfig+0xa36>
 8007770:	e031      	b.n	80077d6 <UART_SetConfig+0xa3e>
    {
      case UART_CLOCKSOURCE_D2PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8007772:	f7fc fcc9 	bl	8004108 <HAL_RCC_GetPCLK1Freq>
 8007776:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007778:	e033      	b.n	80077e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_D2PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800777a:	f7fc fcdb 	bl	8004134 <HAL_RCC_GetPCLK2Freq>
 800777e:	63f8      	str	r0, [r7, #60]	; 0x3c
        break;
 8007780:	e02f      	b.n	80077e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL2:
        HAL_RCCEx_GetPLL2ClockFreq(&pll2_clocks);
 8007782:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007786:	4618      	mov	r0, r3
 8007788:	f7fe fcca 	bl	8006120 <HAL_RCCEx_GetPLL2ClockFreq>
        pclk = pll2_clocks.PLL2_Q_Frequency;
 800778c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800778e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 8007790:	e027      	b.n	80077e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_PLL3:
        HAL_RCCEx_GetPLL3ClockFreq(&pll3_clocks);
 8007792:	f107 0318 	add.w	r3, r7, #24
 8007796:	4618      	mov	r0, r3
 8007798:	f7fe fe16 	bl	80063c8 <HAL_RCCEx_GetPLL3ClockFreq>
        pclk = pll3_clocks.PLL3_Q_Frequency;
 800779c:	69fb      	ldr	r3, [r7, #28]
 800779e:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077a0:	e01f      	b.n	80077e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80077a2:	4b2d      	ldr	r3, [pc, #180]	; (8007858 <UART_SetConfig+0xac0>)
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	f003 0320 	and.w	r3, r3, #32
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d009      	beq.n	80077c2 <UART_SetConfig+0xa2a>
        {
          pclk = (uint32_t)(HSI_VALUE >> (__HAL_RCC_GET_HSI_DIVIDER() >> 3U));
 80077ae:	4b2a      	ldr	r3, [pc, #168]	; (8007858 <UART_SetConfig+0xac0>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	08db      	lsrs	r3, r3, #3
 80077b4:	f003 0303 	and.w	r3, r3, #3
 80077b8:	4a28      	ldr	r2, [pc, #160]	; (800785c <UART_SetConfig+0xac4>)
 80077ba:	fa22 f303 	lsr.w	r3, r2, r3
 80077be:	63fb      	str	r3, [r7, #60]	; 0x3c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80077c0:	e00f      	b.n	80077e2 <UART_SetConfig+0xa4a>
          pclk = (uint32_t) HSI_VALUE;
 80077c2:	4b26      	ldr	r3, [pc, #152]	; (800785c <UART_SetConfig+0xac4>)
 80077c4:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077c6:	e00c      	b.n	80077e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_CSI:
        pclk = (uint32_t) CSI_VALUE;
 80077c8:	4b25      	ldr	r3, [pc, #148]	; (8007860 <UART_SetConfig+0xac8>)
 80077ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077cc:	e009      	b.n	80077e2 <UART_SetConfig+0xa4a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80077ce:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 80077d2:	63fb      	str	r3, [r7, #60]	; 0x3c
        break;
 80077d4:	e005      	b.n	80077e2 <UART_SetConfig+0xa4a>
      default:
        pclk = 0U;
 80077d6:	2300      	movs	r3, #0
 80077d8:	63fb      	str	r3, [r7, #60]	; 0x3c
        ret = HAL_ERROR;
 80077da:	2301      	movs	r3, #1
 80077dc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
        break;
 80077e0:	bf00      	nop
    }

    if (pclk != 0U)
 80077e2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077e4:	2b00      	cmp	r3, #0
 80077e6:	d021      	beq.n	800782c <UART_SetConfig+0xa94>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate, huart->Init.ClockPrescaler));
 80077e8:	697b      	ldr	r3, [r7, #20]
 80077ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80077ec:	4a1d      	ldr	r2, [pc, #116]	; (8007864 <UART_SetConfig+0xacc>)
 80077ee:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80077f2:	461a      	mov	r2, r3
 80077f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80077f6:	fbb3 f2f2 	udiv	r2, r3, r2
 80077fa:	697b      	ldr	r3, [r7, #20]
 80077fc:	685b      	ldr	r3, [r3, #4]
 80077fe:	085b      	lsrs	r3, r3, #1
 8007800:	441a      	add	r2, r3
 8007802:	697b      	ldr	r3, [r7, #20]
 8007804:	685b      	ldr	r3, [r3, #4]
 8007806:	fbb2 f3f3 	udiv	r3, r2, r3
 800780a:	63bb      	str	r3, [r7, #56]	; 0x38
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800780c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800780e:	2b0f      	cmp	r3, #15
 8007810:	d909      	bls.n	8007826 <UART_SetConfig+0xa8e>
 8007812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007814:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007818:	d205      	bcs.n	8007826 <UART_SetConfig+0xa8e>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800781a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800781c:	b29a      	uxth	r2, r3
 800781e:	697b      	ldr	r3, [r7, #20]
 8007820:	681b      	ldr	r3, [r3, #0]
 8007822:	60da      	str	r2, [r3, #12]
 8007824:	e002      	b.n	800782c <UART_SetConfig+0xa94>
      }
      else
      {
        ret = HAL_ERROR;
 8007826:	2301      	movs	r3, #1
 8007828:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
      }
    }
  }

  /* Initialize the number of data to process during RX/TX ISR execution */
  huart->NbTxDataToProcess = 1;
 800782c:	697b      	ldr	r3, [r7, #20]
 800782e:	2201      	movs	r2, #1
 8007830:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
  huart->NbRxDataToProcess = 1;
 8007834:	697b      	ldr	r3, [r7, #20]
 8007836:	2201      	movs	r2, #1
 8007838:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800783c:	697b      	ldr	r3, [r7, #20]
 800783e:	2200      	movs	r2, #0
 8007840:	675a      	str	r2, [r3, #116]	; 0x74
  huart->TxISR = NULL;
 8007842:	697b      	ldr	r3, [r7, #20]
 8007844:	2200      	movs	r2, #0
 8007846:	679a      	str	r2, [r3, #120]	; 0x78

  return ret;
 8007848:	f897 3042 	ldrb.w	r3, [r7, #66]	; 0x42
}
 800784c:	4618      	mov	r0, r3
 800784e:	3748      	adds	r7, #72	; 0x48
 8007850:	46bd      	mov	sp, r7
 8007852:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007856:	bf00      	nop
 8007858:	58024400 	.word	0x58024400
 800785c:	03d09000 	.word	0x03d09000
 8007860:	003d0900 	.word	0x003d0900
 8007864:	08008820 	.word	0x08008820

08007868 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	2b00      	cmp	r3, #0
 800787a:	d00a      	beq.n	8007892 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	685b      	ldr	r3, [r3, #4]
 8007882:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800788a:	687b      	ldr	r3, [r7, #4]
 800788c:	681b      	ldr	r3, [r3, #0]
 800788e:	430a      	orrs	r2, r1
 8007890:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007896:	f003 0302 	and.w	r3, r3, #2
 800789a:	2b00      	cmp	r3, #0
 800789c:	d00a      	beq.n	80078b4 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	681b      	ldr	r3, [r3, #0]
 80078a2:	685b      	ldr	r3, [r3, #4]
 80078a4:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	430a      	orrs	r2, r1
 80078b2:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078b8:	f003 0304 	and.w	r3, r3, #4
 80078bc:	2b00      	cmp	r3, #0
 80078be:	d00a      	beq.n	80078d6 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80078c0:	687b      	ldr	r3, [r7, #4]
 80078c2:	681b      	ldr	r3, [r3, #0]
 80078c4:	685b      	ldr	r3, [r3, #4]
 80078c6:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 80078ce:	687b      	ldr	r3, [r7, #4]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	430a      	orrs	r2, r1
 80078d4:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80078d6:	687b      	ldr	r3, [r7, #4]
 80078d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078da:	f003 0308 	and.w	r3, r3, #8
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d00a      	beq.n	80078f8 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	685b      	ldr	r3, [r3, #4]
 80078e8:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	681b      	ldr	r3, [r3, #0]
 80078f4:	430a      	orrs	r2, r1
 80078f6:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80078fc:	f003 0310 	and.w	r3, r3, #16
 8007900:	2b00      	cmp	r3, #0
 8007902:	d00a      	beq.n	800791a <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	681b      	ldr	r3, [r3, #0]
 8007908:	689b      	ldr	r3, [r3, #8]
 800790a:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800790e:	687b      	ldr	r3, [r7, #4]
 8007910:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	681b      	ldr	r3, [r3, #0]
 8007916:	430a      	orrs	r2, r1
 8007918:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800791a:	687b      	ldr	r3, [r7, #4]
 800791c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800791e:	f003 0320 	and.w	r3, r3, #32
 8007922:	2b00      	cmp	r3, #0
 8007924:	d00a      	beq.n	800793c <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	689b      	ldr	r3, [r3, #8]
 800792c:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 8007930:	687b      	ldr	r3, [r7, #4]
 8007932:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8007934:	687b      	ldr	r3, [r7, #4]
 8007936:	681b      	ldr	r3, [r3, #0]
 8007938:	430a      	orrs	r2, r1
 800793a:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007940:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007944:	2b00      	cmp	r3, #0
 8007946:	d01a      	beq.n	800797e <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 8007948:	687b      	ldr	r3, [r7, #4]
 800794a:	681b      	ldr	r3, [r3, #0]
 800794c:	685b      	ldr	r3, [r3, #4]
 800794e:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007956:	687b      	ldr	r3, [r7, #4]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	430a      	orrs	r2, r1
 800795c:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007962:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007966:	d10a      	bne.n	800797e <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	685b      	ldr	r3, [r3, #4]
 800796e:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	430a      	orrs	r2, r1
 800797c:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800797e:	687b      	ldr	r3, [r7, #4]
 8007980:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007982:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007986:	2b00      	cmp	r3, #0
 8007988:	d00a      	beq.n	80079a0 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800798a:	687b      	ldr	r3, [r7, #4]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	685b      	ldr	r3, [r3, #4]
 8007990:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8007998:	687b      	ldr	r3, [r7, #4]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	430a      	orrs	r2, r1
 800799e:	605a      	str	r2, [r3, #4]
  }
}
 80079a0:	bf00      	nop
 80079a2:	370c      	adds	r7, #12
 80079a4:	46bd      	mov	sp, r7
 80079a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079aa:	4770      	bx	lr

080079ac <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b098      	sub	sp, #96	; 0x60
 80079b0:	af02      	add	r7, sp, #8
 80079b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2200      	movs	r2, #0
 80079b8:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80079bc:	f7f9 fb02 	bl	8000fc4 <HAL_GetTick>
 80079c0:	6578      	str	r0, [r7, #84]	; 0x54

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	681b      	ldr	r3, [r3, #0]
 80079c6:	681b      	ldr	r3, [r3, #0]
 80079c8:	f003 0308 	and.w	r3, r3, #8
 80079cc:	2b08      	cmp	r3, #8
 80079ce:	d12f      	bne.n	8007a30 <UART_CheckIdleState+0x84>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80079d0:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 80079d4:	9300      	str	r3, [sp, #0]
 80079d6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80079d8:	2200      	movs	r2, #0
 80079da:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 80079de:	6878      	ldr	r0, [r7, #4]
 80079e0:	f000 f88e 	bl	8007b00 <UART_WaitOnFlagUntilTimeout>
 80079e4:	4603      	mov	r3, r0
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d022      	beq.n	8007a30 <UART_CheckIdleState+0x84>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE_TXFNFIE));
 80079ea:	687b      	ldr	r3, [r7, #4]
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	63bb      	str	r3, [r7, #56]	; 0x38
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80079f0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80079f2:	e853 3f00 	ldrex	r3, [r3]
 80079f6:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80079f8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80079fa:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80079fe:	653b      	str	r3, [r7, #80]	; 0x50
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	681b      	ldr	r3, [r3, #0]
 8007a04:	461a      	mov	r2, r3
 8007a06:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8007a08:	647b      	str	r3, [r7, #68]	; 0x44
 8007a0a:	643a      	str	r2, [r7, #64]	; 0x40
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a0c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8007a0e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8007a10:	e841 2300 	strex	r3, r2, [r1]
 8007a14:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8007a16:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d1e6      	bne.n	80079ea <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	2220      	movs	r2, #32
 8007a20:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      __HAL_UNLOCK(huart);
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007a2c:	2303      	movs	r3, #3
 8007a2e:	e063      	b.n	8007af8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f003 0304 	and.w	r3, r3, #4
 8007a3a:	2b04      	cmp	r3, #4
 8007a3c:	d149      	bne.n	8007ad2 <UART_CheckIdleState+0x126>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8007a3e:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 8007a42:	9300      	str	r3, [sp, #0]
 8007a44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8007a46:	2200      	movs	r2, #0
 8007a48:	f44f 0180 	mov.w	r1, #4194304	; 0x400000
 8007a4c:	6878      	ldr	r0, [r7, #4]
 8007a4e:	f000 f857 	bl	8007b00 <UART_WaitOnFlagUntilTimeout>
 8007a52:	4603      	mov	r3, r0
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d03c      	beq.n	8007ad2 <UART_CheckIdleState+0x126>
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	681b      	ldr	r3, [r3, #0]
 8007a5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a60:	e853 3f00 	ldrex	r3, [r3]
 8007a64:	623b      	str	r3, [r7, #32]
   return(result);
 8007a66:	6a3b      	ldr	r3, [r7, #32]
 8007a68:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007a6c:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	461a      	mov	r2, r3
 8007a74:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007a76:	633b      	str	r3, [r7, #48]	; 0x30
 8007a78:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007a7a:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8007a7c:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007a7e:	e841 2300 	strex	r3, r2, [r1]
 8007a82:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8007a84:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007a86:	2b00      	cmp	r3, #0
 8007a88:	d1e6      	bne.n	8007a58 <UART_CheckIdleState+0xac>
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	3308      	adds	r3, #8
 8007a90:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007a92:	693b      	ldr	r3, [r7, #16]
 8007a94:	e853 3f00 	ldrex	r3, [r3]
 8007a98:	60fb      	str	r3, [r7, #12]
   return(result);
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	f023 0301 	bic.w	r3, r3, #1
 8007aa0:	64bb      	str	r3, [r7, #72]	; 0x48
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	3308      	adds	r3, #8
 8007aa8:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007aaa:	61fa      	str	r2, [r7, #28]
 8007aac:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007aae:	69b9      	ldr	r1, [r7, #24]
 8007ab0:	69fa      	ldr	r2, [r7, #28]
 8007ab2:	e841 2300 	strex	r3, r2, [r1]
 8007ab6:	617b      	str	r3, [r7, #20]
   return(result);
 8007ab8:	697b      	ldr	r3, [r7, #20]
 8007aba:	2b00      	cmp	r3, #0
 8007abc:	d1e5      	bne.n	8007a8a <UART_CheckIdleState+0xde>

      huart->RxState = HAL_UART_STATE_READY;
 8007abe:	687b      	ldr	r3, [r7, #4]
 8007ac0:	2220      	movs	r2, #32
 8007ac2:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c

      __HAL_UNLOCK(huart);
 8007ac6:	687b      	ldr	r3, [r7, #4]
 8007ac8:	2200      	movs	r2, #0
 8007aca:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8007ace:	2303      	movs	r3, #3
 8007ad0:	e012      	b.n	8007af8 <UART_CheckIdleState+0x14c>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2220      	movs	r2, #32
 8007ad6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  huart->RxState = HAL_UART_STATE_READY;
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2220      	movs	r2, #32
 8007ade:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2200      	movs	r2, #0
 8007ae6:	66da      	str	r2, [r3, #108]	; 0x6c
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8007ae8:	687b      	ldr	r3, [r7, #4]
 8007aea:	2200      	movs	r2, #0
 8007aec:	671a      	str	r2, [r3, #112]	; 0x70

  __HAL_UNLOCK(huart);
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	2200      	movs	r2, #0
 8007af2:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007af6:	2300      	movs	r3, #0
}
 8007af8:	4618      	mov	r0, r3
 8007afa:	3758      	adds	r7, #88	; 0x58
 8007afc:	46bd      	mov	sp, r7
 8007afe:	bd80      	pop	{r7, pc}

08007b00 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b084      	sub	sp, #16
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	60f8      	str	r0, [r7, #12]
 8007b08:	60b9      	str	r1, [r7, #8]
 8007b0a:	603b      	str	r3, [r7, #0]
 8007b0c:	4613      	mov	r3, r2
 8007b0e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007b10:	e049      	b.n	8007ba6 <UART_WaitOnFlagUntilTimeout+0xa6>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8007b12:	69bb      	ldr	r3, [r7, #24]
 8007b14:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007b18:	d045      	beq.n	8007ba6 <UART_WaitOnFlagUntilTimeout+0xa6>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8007b1a:	f7f9 fa53 	bl	8000fc4 <HAL_GetTick>
 8007b1e:	4602      	mov	r2, r0
 8007b20:	683b      	ldr	r3, [r7, #0]
 8007b22:	1ad3      	subs	r3, r2, r3
 8007b24:	69ba      	ldr	r2, [r7, #24]
 8007b26:	429a      	cmp	r2, r3
 8007b28:	d302      	bcc.n	8007b30 <UART_WaitOnFlagUntilTimeout+0x30>
 8007b2a:	69bb      	ldr	r3, [r7, #24]
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d101      	bne.n	8007b34 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8007b30:	2303      	movs	r3, #3
 8007b32:	e048      	b.n	8007bc6 <UART_WaitOnFlagUntilTimeout+0xc6>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8007b34:	68fb      	ldr	r3, [r7, #12]
 8007b36:	681b      	ldr	r3, [r3, #0]
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	f003 0304 	and.w	r3, r3, #4
 8007b3e:	2b00      	cmp	r3, #0
 8007b40:	d031      	beq.n	8007ba6 <UART_WaitOnFlagUntilTimeout+0xa6>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8007b42:	68fb      	ldr	r3, [r7, #12]
 8007b44:	681b      	ldr	r3, [r3, #0]
 8007b46:	69db      	ldr	r3, [r3, #28]
 8007b48:	f003 0308 	and.w	r3, r3, #8
 8007b4c:	2b08      	cmp	r3, #8
 8007b4e:	d110      	bne.n	8007b72 <UART_WaitOnFlagUntilTimeout+0x72>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	681b      	ldr	r3, [r3, #0]
 8007b54:	2208      	movs	r2, #8
 8007b56:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8007b58:	68f8      	ldr	r0, [r7, #12]
 8007b5a:	f000 f839 	bl	8007bd0 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	2208      	movs	r2, #8
 8007b62:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8007b66:	68fb      	ldr	r3, [r7, #12]
 8007b68:	2200      	movs	r2, #0
 8007b6a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

           return HAL_ERROR;
 8007b6e:	2301      	movs	r3, #1
 8007b70:	e029      	b.n	8007bc6 <UART_WaitOnFlagUntilTimeout+0xc6>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	69db      	ldr	r3, [r3, #28]
 8007b78:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8007b7c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8007b80:	d111      	bne.n	8007ba6 <UART_WaitOnFlagUntilTimeout+0xa6>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8007b82:	68fb      	ldr	r3, [r7, #12]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8007b8a:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8007b8c:	68f8      	ldr	r0, [r7, #12]
 8007b8e:	f000 f81f 	bl	8007bd0 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 8007b92:	68fb      	ldr	r3, [r7, #12]
 8007b94:	2220      	movs	r2, #32
 8007b96:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	2200      	movs	r2, #0
 8007b9e:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

          return HAL_TIMEOUT;
 8007ba2:	2303      	movs	r3, #3
 8007ba4:	e00f      	b.n	8007bc6 <UART_WaitOnFlagUntilTimeout+0xc6>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007ba6:	68fb      	ldr	r3, [r7, #12]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	69da      	ldr	r2, [r3, #28]
 8007bac:	68bb      	ldr	r3, [r7, #8]
 8007bae:	4013      	ands	r3, r2
 8007bb0:	68ba      	ldr	r2, [r7, #8]
 8007bb2:	429a      	cmp	r2, r3
 8007bb4:	bf0c      	ite	eq
 8007bb6:	2301      	moveq	r3, #1
 8007bb8:	2300      	movne	r3, #0
 8007bba:	b2db      	uxtb	r3, r3
 8007bbc:	461a      	mov	r2, r3
 8007bbe:	79fb      	ldrb	r3, [r7, #7]
 8007bc0:	429a      	cmp	r2, r3
 8007bc2:	d0a6      	beq.n	8007b12 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8007bc4:	2300      	movs	r3, #0
}
 8007bc6:	4618      	mov	r0, r3
 8007bc8:	3710      	adds	r7, #16
 8007bca:	46bd      	mov	sp, r7
 8007bcc:	bd80      	pop	{r7, pc}
	...

08007bd0 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007bd0:	b480      	push	{r7}
 8007bd2:	b095      	sub	sp, #84	; 0x54
 8007bd4:	af00      	add	r7, sp, #0
 8007bd6:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE_RXFNEIE | USART_CR1_PEIE));
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007bde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007be0:	e853 3f00 	ldrex	r3, [r3]
 8007be4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8007be6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007be8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007bec:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	461a      	mov	r2, r3
 8007bf4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8007bf6:	643b      	str	r3, [r7, #64]	; 0x40
 8007bf8:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007bfa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007bfc:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007bfe:	e841 2300 	strex	r3, r2, [r1]
 8007c02:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8007c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	d1e6      	bne.n	8007bd8 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, (USART_CR3_EIE | USART_CR3_RXFTIE));
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	3308      	adds	r3, #8
 8007c10:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c12:	6a3b      	ldr	r3, [r7, #32]
 8007c14:	e853 3f00 	ldrex	r3, [r3]
 8007c18:	61fb      	str	r3, [r7, #28]
   return(result);
 8007c1a:	69fa      	ldr	r2, [r7, #28]
 8007c1c:	4b1e      	ldr	r3, [pc, #120]	; (8007c98 <UART_EndRxTransfer+0xc8>)
 8007c1e:	4013      	ands	r3, r2
 8007c20:	64bb      	str	r3, [r7, #72]	; 0x48
 8007c22:	687b      	ldr	r3, [r7, #4]
 8007c24:	681b      	ldr	r3, [r3, #0]
 8007c26:	3308      	adds	r3, #8
 8007c28:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007c2a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007c2c:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c2e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007c30:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007c32:	e841 2300 	strex	r3, r2, [r1]
 8007c36:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8007c38:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007c3a:	2b00      	cmp	r3, #0
 8007c3c:	d1e5      	bne.n	8007c0a <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8007c42:	2b01      	cmp	r3, #1
 8007c44:	d118      	bne.n	8007c78 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	681b      	ldr	r3, [r3, #0]
 8007c4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007c4c:	68fb      	ldr	r3, [r7, #12]
 8007c4e:	e853 3f00 	ldrex	r3, [r3]
 8007c52:	60bb      	str	r3, [r7, #8]
   return(result);
 8007c54:	68bb      	ldr	r3, [r7, #8]
 8007c56:	f023 0310 	bic.w	r3, r3, #16
 8007c5a:	647b      	str	r3, [r7, #68]	; 0x44
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	681b      	ldr	r3, [r3, #0]
 8007c60:	461a      	mov	r2, r3
 8007c62:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8007c64:	61bb      	str	r3, [r7, #24]
 8007c66:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007c68:	6979      	ldr	r1, [r7, #20]
 8007c6a:	69ba      	ldr	r2, [r7, #24]
 8007c6c:	e841 2300 	strex	r3, r2, [r1]
 8007c70:	613b      	str	r3, [r7, #16]
   return(result);
 8007c72:	693b      	ldr	r3, [r7, #16]
 8007c74:	2b00      	cmp	r3, #0
 8007c76:	d1e6      	bne.n	8007c46 <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8007c78:	687b      	ldr	r3, [r7, #4]
 8007c7a:	2220      	movs	r2, #32
 8007c7c:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	2200      	movs	r2, #0
 8007c84:	66da      	str	r2, [r3, #108]	; 0x6c

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	2200      	movs	r2, #0
 8007c8a:	675a      	str	r2, [r3, #116]	; 0x74
}
 8007c8c:	bf00      	nop
 8007c8e:	3754      	adds	r7, #84	; 0x54
 8007c90:	46bd      	mov	sp, r7
 8007c92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c96:	4770      	bx	lr
 8007c98:	effffffe 	.word	0xeffffffe

08007c9c <HAL_UARTEx_DisableFifoMode>:
  * @brief  Disable the FIFO mode.
  * @param huart      UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_DisableFifoMode(UART_HandleTypeDef *huart)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b085      	sub	sp, #20
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]

  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007ca4:	687b      	ldr	r3, [r7, #4]
 8007ca6:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007caa:	2b01      	cmp	r3, #1
 8007cac:	d101      	bne.n	8007cb2 <HAL_UARTEx_DisableFifoMode+0x16>
 8007cae:	2302      	movs	r3, #2
 8007cb0:	e027      	b.n	8007d02 <HAL_UARTEx_DisableFifoMode+0x66>
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	2201      	movs	r2, #1
 8007cb6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	2224      	movs	r2, #36	; 0x24
 8007cbe:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	681a      	ldr	r2, [r3, #0]
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	f022 0201 	bic.w	r2, r2, #1
 8007cd8:	601a      	str	r2, [r3, #0]

  /* Enable FIFO mode */
  CLEAR_BIT(tmpcr1, USART_CR1_FIFOEN);
 8007cda:	68fb      	ldr	r3, [r7, #12]
 8007cdc:	f023 5300 	bic.w	r3, r3, #536870912	; 0x20000000
 8007ce0:	60fb      	str	r3, [r7, #12]
  huart->FifoMode = UART_FIFOMODE_DISABLE;
 8007ce2:	687b      	ldr	r3, [r7, #4]
 8007ce4:	2200      	movs	r2, #0
 8007ce6:	665a      	str	r2, [r3, #100]	; 0x64

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	68fa      	ldr	r2, [r7, #12]
 8007cee:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	2220      	movs	r2, #32
 8007cf4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	2200      	movs	r2, #0
 8007cfc:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d00:	2300      	movs	r3, #0
}
 8007d02:	4618      	mov	r0, r3
 8007d04:	3714      	adds	r7, #20
 8007d06:	46bd      	mov	sp, r7
 8007d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d0c:	4770      	bx	lr

08007d0e <HAL_UARTEx_SetTxFifoThreshold>:
  *            @arg @ref UART_TXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_TXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetTxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d0e:	b580      	push	{r7, lr}
 8007d10:	b084      	sub	sp, #16
 8007d12:	af00      	add	r7, sp, #0
 8007d14:	6078      	str	r0, [r7, #4]
 8007d16:	6039      	str	r1, [r7, #0]
  /* Check parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_TXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d1e:	2b01      	cmp	r3, #1
 8007d20:	d101      	bne.n	8007d26 <HAL_UARTEx_SetTxFifoThreshold+0x18>
 8007d22:	2302      	movs	r3, #2
 8007d24:	e02d      	b.n	8007d82 <HAL_UARTEx_SetTxFifoThreshold+0x74>
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	2201      	movs	r2, #1
 8007d2a:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2224      	movs	r2, #36	; 0x24
 8007d32:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	681b      	ldr	r3, [r3, #0]
 8007d3a:	681b      	ldr	r3, [r3, #0]
 8007d3c:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	681b      	ldr	r3, [r3, #0]
 8007d42:	681a      	ldr	r2, [r3, #0]
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	f022 0201 	bic.w	r2, r2, #1
 8007d4c:	601a      	str	r2, [r3, #0]

  /* Update TX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_TXFTCFG, Threshold);
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	689b      	ldr	r3, [r3, #8]
 8007d54:	f023 4160 	bic.w	r1, r3, #3758096384	; 0xe0000000
 8007d58:	687b      	ldr	r3, [r7, #4]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	683a      	ldr	r2, [r7, #0]
 8007d5e:	430a      	orrs	r2, r1
 8007d60:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 f850 	bl	8007e08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	681b      	ldr	r3, [r3, #0]
 8007d6c:	68fa      	ldr	r2, [r7, #12]
 8007d6e:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	2220      	movs	r2, #32
 8007d74:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	2200      	movs	r2, #0
 8007d7c:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007d80:	2300      	movs	r3, #0
}
 8007d82:	4618      	mov	r0, r3
 8007d84:	3710      	adds	r7, #16
 8007d86:	46bd      	mov	sp, r7
 8007d88:	bd80      	pop	{r7, pc}

08007d8a <HAL_UARTEx_SetRxFifoThreshold>:
  *            @arg @ref UART_RXFIFO_THRESHOLD_7_8
  *            @arg @ref UART_RXFIFO_THRESHOLD_8_8
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UARTEx_SetRxFifoThreshold(UART_HandleTypeDef *huart, uint32_t Threshold)
{
 8007d8a:	b580      	push	{r7, lr}
 8007d8c:	b084      	sub	sp, #16
 8007d8e:	af00      	add	r7, sp, #0
 8007d90:	6078      	str	r0, [r7, #4]
 8007d92:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_UART_FIFO_INSTANCE(huart->Instance));
  assert_param(IS_UART_RXFIFO_THRESHOLD(Threshold));

  /* Process Locked */
  __HAL_LOCK(huart);
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	f893 3084 	ldrb.w	r3, [r3, #132]	; 0x84
 8007d9a:	2b01      	cmp	r3, #1
 8007d9c:	d101      	bne.n	8007da2 <HAL_UARTEx_SetRxFifoThreshold+0x18>
 8007d9e:	2302      	movs	r3, #2
 8007da0:	e02d      	b.n	8007dfe <HAL_UARTEx_SetRxFifoThreshold+0x74>
 8007da2:	687b      	ldr	r3, [r7, #4]
 8007da4:	2201      	movs	r2, #1
 8007da6:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  huart->gState = HAL_UART_STATE_BUSY;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	2224      	movs	r2, #36	; 0x24
 8007dae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Save actual UART configuration */
  tmpcr1 = READ_REG(huart->Instance->CR1);
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	681b      	ldr	r3, [r3, #0]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	60fb      	str	r3, [r7, #12]

  /* Disable UART */
  __HAL_UART_DISABLE(huart);
 8007dba:	687b      	ldr	r3, [r7, #4]
 8007dbc:	681b      	ldr	r3, [r3, #0]
 8007dbe:	681a      	ldr	r2, [r3, #0]
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	681b      	ldr	r3, [r3, #0]
 8007dc4:	f022 0201 	bic.w	r2, r2, #1
 8007dc8:	601a      	str	r2, [r3, #0]

  /* Update RX threshold configuration */
  MODIFY_REG(huart->Instance->CR3, USART_CR3_RXFTCFG, Threshold);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	681b      	ldr	r3, [r3, #0]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	f023 6160 	bic.w	r1, r3, #234881024	; 0xe000000
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	681b      	ldr	r3, [r3, #0]
 8007dd8:	683a      	ldr	r2, [r7, #0]
 8007dda:	430a      	orrs	r2, r1
 8007ddc:	609a      	str	r2, [r3, #8]

  /* Determine the number of data to process during RX/TX ISR execution */
  UARTEx_SetNbDataToProcess(huart);
 8007dde:	6878      	ldr	r0, [r7, #4]
 8007de0:	f000 f812 	bl	8007e08 <UARTEx_SetNbDataToProcess>

  /* Restore UART configuration */
  WRITE_REG(huart->Instance->CR1, tmpcr1);
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	68fa      	ldr	r2, [r7, #12]
 8007dea:	601a      	str	r2, [r3, #0]

  huart->gState = HAL_UART_STATE_READY;
 8007dec:	687b      	ldr	r3, [r7, #4]
 8007dee:	2220      	movs	r2, #32
 8007df0:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	2200      	movs	r2, #0
 8007df8:	f883 2084 	strb.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8007dfc:	2300      	movs	r3, #0
}
 8007dfe:	4618      	mov	r0, r3
 8007e00:	3710      	adds	r7, #16
 8007e02:	46bd      	mov	sp, r7
 8007e04:	bd80      	pop	{r7, pc}
	...

08007e08 <UARTEx_SetNbDataToProcess>:
  *       the UART configuration registers.
  * @param huart UART handle.
  * @retval None
  */
static void UARTEx_SetNbDataToProcess(UART_HandleTypeDef *huart)
{
 8007e08:	b480      	push	{r7}
 8007e0a:	b085      	sub	sp, #20
 8007e0c:	af00      	add	r7, sp, #0
 8007e0e:	6078      	str	r0, [r7, #4]
  uint8_t rx_fifo_threshold;
  uint8_t tx_fifo_threshold;
  static const uint8_t numerator[] = {1U, 1U, 1U, 3U, 7U, 1U, 0U, 0U};
  static const uint8_t denominator[] = {8U, 4U, 2U, 4U, 8U, 1U, 1U, 1U};

  if (huart->FifoMode == UART_FIFOMODE_DISABLE)
 8007e10:	687b      	ldr	r3, [r7, #4]
 8007e12:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8007e14:	2b00      	cmp	r3, #0
 8007e16:	d108      	bne.n	8007e2a <UARTEx_SetNbDataToProcess+0x22>
  {
    huart->NbTxDataToProcess = 1U;
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	2201      	movs	r2, #1
 8007e1c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = 1U;
 8007e20:	687b      	ldr	r3, [r7, #4]
 8007e22:	2201      	movs	r2, #1
 8007e24:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
                               (uint16_t)denominator[tx_fifo_threshold];
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
                               (uint16_t)denominator[rx_fifo_threshold];
  }
}
 8007e28:	e031      	b.n	8007e8e <UARTEx_SetNbDataToProcess+0x86>
    rx_fifo_depth = RX_FIFO_DEPTH;
 8007e2a:	2310      	movs	r3, #16
 8007e2c:	73fb      	strb	r3, [r7, #15]
    tx_fifo_depth = TX_FIFO_DEPTH;
 8007e2e:	2310      	movs	r3, #16
 8007e30:	73bb      	strb	r3, [r7, #14]
    rx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_RXFTCFG) >> USART_CR3_RXFTCFG_Pos);
 8007e32:	687b      	ldr	r3, [r7, #4]
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	689b      	ldr	r3, [r3, #8]
 8007e38:	0e5b      	lsrs	r3, r3, #25
 8007e3a:	b2db      	uxtb	r3, r3
 8007e3c:	f003 0307 	and.w	r3, r3, #7
 8007e40:	737b      	strb	r3, [r7, #13]
    tx_fifo_threshold = (uint8_t)(READ_BIT(huart->Instance->CR3, USART_CR3_TXFTCFG) >> USART_CR3_TXFTCFG_Pos);
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	681b      	ldr	r3, [r3, #0]
 8007e46:	689b      	ldr	r3, [r3, #8]
 8007e48:	0f5b      	lsrs	r3, r3, #29
 8007e4a:	b2db      	uxtb	r3, r3
 8007e4c:	f003 0307 	and.w	r3, r3, #7
 8007e50:	733b      	strb	r3, [r7, #12]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e52:	7bbb      	ldrb	r3, [r7, #14]
 8007e54:	7b3a      	ldrb	r2, [r7, #12]
 8007e56:	4911      	ldr	r1, [pc, #68]	; (8007e9c <UARTEx_SetNbDataToProcess+0x94>)
 8007e58:	5c8a      	ldrb	r2, [r1, r2]
 8007e5a:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[tx_fifo_threshold];
 8007e5e:	7b3a      	ldrb	r2, [r7, #12]
 8007e60:	490f      	ldr	r1, [pc, #60]	; (8007ea0 <UARTEx_SetNbDataToProcess+0x98>)
 8007e62:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbTxDataToProcess = ((uint16_t)tx_fifo_depth * numerator[tx_fifo_threshold]) /
 8007e64:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e68:	b29a      	uxth	r2, r3
 8007e6a:	687b      	ldr	r3, [r7, #4]
 8007e6c:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e70:	7bfb      	ldrb	r3, [r7, #15]
 8007e72:	7b7a      	ldrb	r2, [r7, #13]
 8007e74:	4909      	ldr	r1, [pc, #36]	; (8007e9c <UARTEx_SetNbDataToProcess+0x94>)
 8007e76:	5c8a      	ldrb	r2, [r1, r2]
 8007e78:	fb02 f303 	mul.w	r3, r2, r3
                               (uint16_t)denominator[rx_fifo_threshold];
 8007e7c:	7b7a      	ldrb	r2, [r7, #13]
 8007e7e:	4908      	ldr	r1, [pc, #32]	; (8007ea0 <UARTEx_SetNbDataToProcess+0x98>)
 8007e80:	5c8a      	ldrb	r2, [r1, r2]
    huart->NbRxDataToProcess = ((uint16_t)rx_fifo_depth * numerator[rx_fifo_threshold]) /
 8007e82:	fb93 f3f2 	sdiv	r3, r3, r2
 8007e86:	b29a      	uxth	r2, r3
 8007e88:	687b      	ldr	r3, [r7, #4]
 8007e8a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
}
 8007e8e:	bf00      	nop
 8007e90:	3714      	adds	r7, #20
 8007e92:	46bd      	mov	sp, r7
 8007e94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e98:	4770      	bx	lr
 8007e9a:	bf00      	nop
 8007e9c:	08008838 	.word	0x08008838
 8007ea0:	08008840 	.word	0x08008840

08007ea4 <siprintf>:
 8007ea4:	b40e      	push	{r1, r2, r3}
 8007ea6:	b500      	push	{lr}
 8007ea8:	b09c      	sub	sp, #112	; 0x70
 8007eaa:	ab1d      	add	r3, sp, #116	; 0x74
 8007eac:	9002      	str	r0, [sp, #8]
 8007eae:	9006      	str	r0, [sp, #24]
 8007eb0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8007eb4:	4809      	ldr	r0, [pc, #36]	; (8007edc <siprintf+0x38>)
 8007eb6:	9107      	str	r1, [sp, #28]
 8007eb8:	9104      	str	r1, [sp, #16]
 8007eba:	4909      	ldr	r1, [pc, #36]	; (8007ee0 <siprintf+0x3c>)
 8007ebc:	f853 2b04 	ldr.w	r2, [r3], #4
 8007ec0:	9105      	str	r1, [sp, #20]
 8007ec2:	6800      	ldr	r0, [r0, #0]
 8007ec4:	9301      	str	r3, [sp, #4]
 8007ec6:	a902      	add	r1, sp, #8
 8007ec8:	f000 f992 	bl	80081f0 <_svfiprintf_r>
 8007ecc:	9b02      	ldr	r3, [sp, #8]
 8007ece:	2200      	movs	r2, #0
 8007ed0:	701a      	strb	r2, [r3, #0]
 8007ed2:	b01c      	add	sp, #112	; 0x70
 8007ed4:	f85d eb04 	ldr.w	lr, [sp], #4
 8007ed8:	b003      	add	sp, #12
 8007eda:	4770      	bx	lr
 8007edc:	2400005c 	.word	0x2400005c
 8007ee0:	ffff0208 	.word	0xffff0208

08007ee4 <memset>:
 8007ee4:	4402      	add	r2, r0
 8007ee6:	4603      	mov	r3, r0
 8007ee8:	4293      	cmp	r3, r2
 8007eea:	d100      	bne.n	8007eee <memset+0xa>
 8007eec:	4770      	bx	lr
 8007eee:	f803 1b01 	strb.w	r1, [r3], #1
 8007ef2:	e7f9      	b.n	8007ee8 <memset+0x4>

08007ef4 <__errno>:
 8007ef4:	4b01      	ldr	r3, [pc, #4]	; (8007efc <__errno+0x8>)
 8007ef6:	6818      	ldr	r0, [r3, #0]
 8007ef8:	4770      	bx	lr
 8007efa:	bf00      	nop
 8007efc:	2400005c 	.word	0x2400005c

08007f00 <__libc_init_array>:
 8007f00:	b570      	push	{r4, r5, r6, lr}
 8007f02:	4d0d      	ldr	r5, [pc, #52]	; (8007f38 <__libc_init_array+0x38>)
 8007f04:	4c0d      	ldr	r4, [pc, #52]	; (8007f3c <__libc_init_array+0x3c>)
 8007f06:	1b64      	subs	r4, r4, r5
 8007f08:	10a4      	asrs	r4, r4, #2
 8007f0a:	2600      	movs	r6, #0
 8007f0c:	42a6      	cmp	r6, r4
 8007f0e:	d109      	bne.n	8007f24 <__libc_init_array+0x24>
 8007f10:	4d0b      	ldr	r5, [pc, #44]	; (8007f40 <__libc_init_array+0x40>)
 8007f12:	4c0c      	ldr	r4, [pc, #48]	; (8007f44 <__libc_init_array+0x44>)
 8007f14:	f000 fc6a 	bl	80087ec <_init>
 8007f18:	1b64      	subs	r4, r4, r5
 8007f1a:	10a4      	asrs	r4, r4, #2
 8007f1c:	2600      	movs	r6, #0
 8007f1e:	42a6      	cmp	r6, r4
 8007f20:	d105      	bne.n	8007f2e <__libc_init_array+0x2e>
 8007f22:	bd70      	pop	{r4, r5, r6, pc}
 8007f24:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f28:	4798      	blx	r3
 8007f2a:	3601      	adds	r6, #1
 8007f2c:	e7ee      	b.n	8007f0c <__libc_init_array+0xc>
 8007f2e:	f855 3b04 	ldr.w	r3, [r5], #4
 8007f32:	4798      	blx	r3
 8007f34:	3601      	adds	r6, #1
 8007f36:	e7f2      	b.n	8007f1e <__libc_init_array+0x1e>
 8007f38:	08008884 	.word	0x08008884
 8007f3c:	08008884 	.word	0x08008884
 8007f40:	08008884 	.word	0x08008884
 8007f44:	08008888 	.word	0x08008888

08007f48 <__retarget_lock_acquire_recursive>:
 8007f48:	4770      	bx	lr

08007f4a <__retarget_lock_release_recursive>:
 8007f4a:	4770      	bx	lr

08007f4c <_free_r>:
 8007f4c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8007f4e:	2900      	cmp	r1, #0
 8007f50:	d044      	beq.n	8007fdc <_free_r+0x90>
 8007f52:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007f56:	9001      	str	r0, [sp, #4]
 8007f58:	2b00      	cmp	r3, #0
 8007f5a:	f1a1 0404 	sub.w	r4, r1, #4
 8007f5e:	bfb8      	it	lt
 8007f60:	18e4      	addlt	r4, r4, r3
 8007f62:	f000 f8df 	bl	8008124 <__malloc_lock>
 8007f66:	4a1e      	ldr	r2, [pc, #120]	; (8007fe0 <_free_r+0x94>)
 8007f68:	9801      	ldr	r0, [sp, #4]
 8007f6a:	6813      	ldr	r3, [r2, #0]
 8007f6c:	b933      	cbnz	r3, 8007f7c <_free_r+0x30>
 8007f6e:	6063      	str	r3, [r4, #4]
 8007f70:	6014      	str	r4, [r2, #0]
 8007f72:	b003      	add	sp, #12
 8007f74:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8007f78:	f000 b8da 	b.w	8008130 <__malloc_unlock>
 8007f7c:	42a3      	cmp	r3, r4
 8007f7e:	d908      	bls.n	8007f92 <_free_r+0x46>
 8007f80:	6825      	ldr	r5, [r4, #0]
 8007f82:	1961      	adds	r1, r4, r5
 8007f84:	428b      	cmp	r3, r1
 8007f86:	bf01      	itttt	eq
 8007f88:	6819      	ldreq	r1, [r3, #0]
 8007f8a:	685b      	ldreq	r3, [r3, #4]
 8007f8c:	1949      	addeq	r1, r1, r5
 8007f8e:	6021      	streq	r1, [r4, #0]
 8007f90:	e7ed      	b.n	8007f6e <_free_r+0x22>
 8007f92:	461a      	mov	r2, r3
 8007f94:	685b      	ldr	r3, [r3, #4]
 8007f96:	b10b      	cbz	r3, 8007f9c <_free_r+0x50>
 8007f98:	42a3      	cmp	r3, r4
 8007f9a:	d9fa      	bls.n	8007f92 <_free_r+0x46>
 8007f9c:	6811      	ldr	r1, [r2, #0]
 8007f9e:	1855      	adds	r5, r2, r1
 8007fa0:	42a5      	cmp	r5, r4
 8007fa2:	d10b      	bne.n	8007fbc <_free_r+0x70>
 8007fa4:	6824      	ldr	r4, [r4, #0]
 8007fa6:	4421      	add	r1, r4
 8007fa8:	1854      	adds	r4, r2, r1
 8007faa:	42a3      	cmp	r3, r4
 8007fac:	6011      	str	r1, [r2, #0]
 8007fae:	d1e0      	bne.n	8007f72 <_free_r+0x26>
 8007fb0:	681c      	ldr	r4, [r3, #0]
 8007fb2:	685b      	ldr	r3, [r3, #4]
 8007fb4:	6053      	str	r3, [r2, #4]
 8007fb6:	440c      	add	r4, r1
 8007fb8:	6014      	str	r4, [r2, #0]
 8007fba:	e7da      	b.n	8007f72 <_free_r+0x26>
 8007fbc:	d902      	bls.n	8007fc4 <_free_r+0x78>
 8007fbe:	230c      	movs	r3, #12
 8007fc0:	6003      	str	r3, [r0, #0]
 8007fc2:	e7d6      	b.n	8007f72 <_free_r+0x26>
 8007fc4:	6825      	ldr	r5, [r4, #0]
 8007fc6:	1961      	adds	r1, r4, r5
 8007fc8:	428b      	cmp	r3, r1
 8007fca:	bf04      	itt	eq
 8007fcc:	6819      	ldreq	r1, [r3, #0]
 8007fce:	685b      	ldreq	r3, [r3, #4]
 8007fd0:	6063      	str	r3, [r4, #4]
 8007fd2:	bf04      	itt	eq
 8007fd4:	1949      	addeq	r1, r1, r5
 8007fd6:	6021      	streq	r1, [r4, #0]
 8007fd8:	6054      	str	r4, [r2, #4]
 8007fda:	e7ca      	b.n	8007f72 <_free_r+0x26>
 8007fdc:	b003      	add	sp, #12
 8007fde:	bd30      	pop	{r4, r5, pc}
 8007fe0:	240002f8 	.word	0x240002f8

08007fe4 <sbrk_aligned>:
 8007fe4:	b570      	push	{r4, r5, r6, lr}
 8007fe6:	4e0e      	ldr	r6, [pc, #56]	; (8008020 <sbrk_aligned+0x3c>)
 8007fe8:	460c      	mov	r4, r1
 8007fea:	6831      	ldr	r1, [r6, #0]
 8007fec:	4605      	mov	r5, r0
 8007fee:	b911      	cbnz	r1, 8007ff6 <sbrk_aligned+0x12>
 8007ff0:	f000 fba6 	bl	8008740 <_sbrk_r>
 8007ff4:	6030      	str	r0, [r6, #0]
 8007ff6:	4621      	mov	r1, r4
 8007ff8:	4628      	mov	r0, r5
 8007ffa:	f000 fba1 	bl	8008740 <_sbrk_r>
 8007ffe:	1c43      	adds	r3, r0, #1
 8008000:	d00a      	beq.n	8008018 <sbrk_aligned+0x34>
 8008002:	1cc4      	adds	r4, r0, #3
 8008004:	f024 0403 	bic.w	r4, r4, #3
 8008008:	42a0      	cmp	r0, r4
 800800a:	d007      	beq.n	800801c <sbrk_aligned+0x38>
 800800c:	1a21      	subs	r1, r4, r0
 800800e:	4628      	mov	r0, r5
 8008010:	f000 fb96 	bl	8008740 <_sbrk_r>
 8008014:	3001      	adds	r0, #1
 8008016:	d101      	bne.n	800801c <sbrk_aligned+0x38>
 8008018:	f04f 34ff 	mov.w	r4, #4294967295
 800801c:	4620      	mov	r0, r4
 800801e:	bd70      	pop	{r4, r5, r6, pc}
 8008020:	240002fc 	.word	0x240002fc

08008024 <_malloc_r>:
 8008024:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008028:	1ccd      	adds	r5, r1, #3
 800802a:	f025 0503 	bic.w	r5, r5, #3
 800802e:	3508      	adds	r5, #8
 8008030:	2d0c      	cmp	r5, #12
 8008032:	bf38      	it	cc
 8008034:	250c      	movcc	r5, #12
 8008036:	2d00      	cmp	r5, #0
 8008038:	4607      	mov	r7, r0
 800803a:	db01      	blt.n	8008040 <_malloc_r+0x1c>
 800803c:	42a9      	cmp	r1, r5
 800803e:	d905      	bls.n	800804c <_malloc_r+0x28>
 8008040:	230c      	movs	r3, #12
 8008042:	603b      	str	r3, [r7, #0]
 8008044:	2600      	movs	r6, #0
 8008046:	4630      	mov	r0, r6
 8008048:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800804c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8008120 <_malloc_r+0xfc>
 8008050:	f000 f868 	bl	8008124 <__malloc_lock>
 8008054:	f8d8 3000 	ldr.w	r3, [r8]
 8008058:	461c      	mov	r4, r3
 800805a:	bb5c      	cbnz	r4, 80080b4 <_malloc_r+0x90>
 800805c:	4629      	mov	r1, r5
 800805e:	4638      	mov	r0, r7
 8008060:	f7ff ffc0 	bl	8007fe4 <sbrk_aligned>
 8008064:	1c43      	adds	r3, r0, #1
 8008066:	4604      	mov	r4, r0
 8008068:	d155      	bne.n	8008116 <_malloc_r+0xf2>
 800806a:	f8d8 4000 	ldr.w	r4, [r8]
 800806e:	4626      	mov	r6, r4
 8008070:	2e00      	cmp	r6, #0
 8008072:	d145      	bne.n	8008100 <_malloc_r+0xdc>
 8008074:	2c00      	cmp	r4, #0
 8008076:	d048      	beq.n	800810a <_malloc_r+0xe6>
 8008078:	6823      	ldr	r3, [r4, #0]
 800807a:	4631      	mov	r1, r6
 800807c:	4638      	mov	r0, r7
 800807e:	eb04 0903 	add.w	r9, r4, r3
 8008082:	f000 fb5d 	bl	8008740 <_sbrk_r>
 8008086:	4581      	cmp	r9, r0
 8008088:	d13f      	bne.n	800810a <_malloc_r+0xe6>
 800808a:	6821      	ldr	r1, [r4, #0]
 800808c:	1a6d      	subs	r5, r5, r1
 800808e:	4629      	mov	r1, r5
 8008090:	4638      	mov	r0, r7
 8008092:	f7ff ffa7 	bl	8007fe4 <sbrk_aligned>
 8008096:	3001      	adds	r0, #1
 8008098:	d037      	beq.n	800810a <_malloc_r+0xe6>
 800809a:	6823      	ldr	r3, [r4, #0]
 800809c:	442b      	add	r3, r5
 800809e:	6023      	str	r3, [r4, #0]
 80080a0:	f8d8 3000 	ldr.w	r3, [r8]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d038      	beq.n	800811a <_malloc_r+0xf6>
 80080a8:	685a      	ldr	r2, [r3, #4]
 80080aa:	42a2      	cmp	r2, r4
 80080ac:	d12b      	bne.n	8008106 <_malloc_r+0xe2>
 80080ae:	2200      	movs	r2, #0
 80080b0:	605a      	str	r2, [r3, #4]
 80080b2:	e00f      	b.n	80080d4 <_malloc_r+0xb0>
 80080b4:	6822      	ldr	r2, [r4, #0]
 80080b6:	1b52      	subs	r2, r2, r5
 80080b8:	d41f      	bmi.n	80080fa <_malloc_r+0xd6>
 80080ba:	2a0b      	cmp	r2, #11
 80080bc:	d917      	bls.n	80080ee <_malloc_r+0xca>
 80080be:	1961      	adds	r1, r4, r5
 80080c0:	42a3      	cmp	r3, r4
 80080c2:	6025      	str	r5, [r4, #0]
 80080c4:	bf18      	it	ne
 80080c6:	6059      	strne	r1, [r3, #4]
 80080c8:	6863      	ldr	r3, [r4, #4]
 80080ca:	bf08      	it	eq
 80080cc:	f8c8 1000 	streq.w	r1, [r8]
 80080d0:	5162      	str	r2, [r4, r5]
 80080d2:	604b      	str	r3, [r1, #4]
 80080d4:	4638      	mov	r0, r7
 80080d6:	f104 060b 	add.w	r6, r4, #11
 80080da:	f000 f829 	bl	8008130 <__malloc_unlock>
 80080de:	f026 0607 	bic.w	r6, r6, #7
 80080e2:	1d23      	adds	r3, r4, #4
 80080e4:	1af2      	subs	r2, r6, r3
 80080e6:	d0ae      	beq.n	8008046 <_malloc_r+0x22>
 80080e8:	1b9b      	subs	r3, r3, r6
 80080ea:	50a3      	str	r3, [r4, r2]
 80080ec:	e7ab      	b.n	8008046 <_malloc_r+0x22>
 80080ee:	42a3      	cmp	r3, r4
 80080f0:	6862      	ldr	r2, [r4, #4]
 80080f2:	d1dd      	bne.n	80080b0 <_malloc_r+0x8c>
 80080f4:	f8c8 2000 	str.w	r2, [r8]
 80080f8:	e7ec      	b.n	80080d4 <_malloc_r+0xb0>
 80080fa:	4623      	mov	r3, r4
 80080fc:	6864      	ldr	r4, [r4, #4]
 80080fe:	e7ac      	b.n	800805a <_malloc_r+0x36>
 8008100:	4634      	mov	r4, r6
 8008102:	6876      	ldr	r6, [r6, #4]
 8008104:	e7b4      	b.n	8008070 <_malloc_r+0x4c>
 8008106:	4613      	mov	r3, r2
 8008108:	e7cc      	b.n	80080a4 <_malloc_r+0x80>
 800810a:	230c      	movs	r3, #12
 800810c:	603b      	str	r3, [r7, #0]
 800810e:	4638      	mov	r0, r7
 8008110:	f000 f80e 	bl	8008130 <__malloc_unlock>
 8008114:	e797      	b.n	8008046 <_malloc_r+0x22>
 8008116:	6025      	str	r5, [r4, #0]
 8008118:	e7dc      	b.n	80080d4 <_malloc_r+0xb0>
 800811a:	605b      	str	r3, [r3, #4]
 800811c:	deff      	udf	#255	; 0xff
 800811e:	bf00      	nop
 8008120:	240002f8 	.word	0x240002f8

08008124 <__malloc_lock>:
 8008124:	4801      	ldr	r0, [pc, #4]	; (800812c <__malloc_lock+0x8>)
 8008126:	f7ff bf0f 	b.w	8007f48 <__retarget_lock_acquire_recursive>
 800812a:	bf00      	nop
 800812c:	240002f4 	.word	0x240002f4

08008130 <__malloc_unlock>:
 8008130:	4801      	ldr	r0, [pc, #4]	; (8008138 <__malloc_unlock+0x8>)
 8008132:	f7ff bf0a 	b.w	8007f4a <__retarget_lock_release_recursive>
 8008136:	bf00      	nop
 8008138:	240002f4 	.word	0x240002f4

0800813c <__ssputs_r>:
 800813c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008140:	688e      	ldr	r6, [r1, #8]
 8008142:	461f      	mov	r7, r3
 8008144:	42be      	cmp	r6, r7
 8008146:	680b      	ldr	r3, [r1, #0]
 8008148:	4682      	mov	sl, r0
 800814a:	460c      	mov	r4, r1
 800814c:	4690      	mov	r8, r2
 800814e:	d82c      	bhi.n	80081aa <__ssputs_r+0x6e>
 8008150:	898a      	ldrh	r2, [r1, #12]
 8008152:	f412 6f90 	tst.w	r2, #1152	; 0x480
 8008156:	d026      	beq.n	80081a6 <__ssputs_r+0x6a>
 8008158:	6965      	ldr	r5, [r4, #20]
 800815a:	6909      	ldr	r1, [r1, #16]
 800815c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8008160:	eba3 0901 	sub.w	r9, r3, r1
 8008164:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008168:	1c7b      	adds	r3, r7, #1
 800816a:	444b      	add	r3, r9
 800816c:	106d      	asrs	r5, r5, #1
 800816e:	429d      	cmp	r5, r3
 8008170:	bf38      	it	cc
 8008172:	461d      	movcc	r5, r3
 8008174:	0553      	lsls	r3, r2, #21
 8008176:	d527      	bpl.n	80081c8 <__ssputs_r+0x8c>
 8008178:	4629      	mov	r1, r5
 800817a:	f7ff ff53 	bl	8008024 <_malloc_r>
 800817e:	4606      	mov	r6, r0
 8008180:	b360      	cbz	r0, 80081dc <__ssputs_r+0xa0>
 8008182:	6921      	ldr	r1, [r4, #16]
 8008184:	464a      	mov	r2, r9
 8008186:	f000 faeb 	bl	8008760 <memcpy>
 800818a:	89a3      	ldrh	r3, [r4, #12]
 800818c:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8008190:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8008194:	81a3      	strh	r3, [r4, #12]
 8008196:	6126      	str	r6, [r4, #16]
 8008198:	6165      	str	r5, [r4, #20]
 800819a:	444e      	add	r6, r9
 800819c:	eba5 0509 	sub.w	r5, r5, r9
 80081a0:	6026      	str	r6, [r4, #0]
 80081a2:	60a5      	str	r5, [r4, #8]
 80081a4:	463e      	mov	r6, r7
 80081a6:	42be      	cmp	r6, r7
 80081a8:	d900      	bls.n	80081ac <__ssputs_r+0x70>
 80081aa:	463e      	mov	r6, r7
 80081ac:	6820      	ldr	r0, [r4, #0]
 80081ae:	4632      	mov	r2, r6
 80081b0:	4641      	mov	r1, r8
 80081b2:	f000 faab 	bl	800870c <memmove>
 80081b6:	68a3      	ldr	r3, [r4, #8]
 80081b8:	1b9b      	subs	r3, r3, r6
 80081ba:	60a3      	str	r3, [r4, #8]
 80081bc:	6823      	ldr	r3, [r4, #0]
 80081be:	4433      	add	r3, r6
 80081c0:	6023      	str	r3, [r4, #0]
 80081c2:	2000      	movs	r0, #0
 80081c4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081c8:	462a      	mov	r2, r5
 80081ca:	f000 fad7 	bl	800877c <_realloc_r>
 80081ce:	4606      	mov	r6, r0
 80081d0:	2800      	cmp	r0, #0
 80081d2:	d1e0      	bne.n	8008196 <__ssputs_r+0x5a>
 80081d4:	6921      	ldr	r1, [r4, #16]
 80081d6:	4650      	mov	r0, sl
 80081d8:	f7ff feb8 	bl	8007f4c <_free_r>
 80081dc:	230c      	movs	r3, #12
 80081de:	f8ca 3000 	str.w	r3, [sl]
 80081e2:	89a3      	ldrh	r3, [r4, #12]
 80081e4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80081e8:	81a3      	strh	r3, [r4, #12]
 80081ea:	f04f 30ff 	mov.w	r0, #4294967295
 80081ee:	e7e9      	b.n	80081c4 <__ssputs_r+0x88>

080081f0 <_svfiprintf_r>:
 80081f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081f4:	4698      	mov	r8, r3
 80081f6:	898b      	ldrh	r3, [r1, #12]
 80081f8:	061b      	lsls	r3, r3, #24
 80081fa:	b09d      	sub	sp, #116	; 0x74
 80081fc:	4607      	mov	r7, r0
 80081fe:	460d      	mov	r5, r1
 8008200:	4614      	mov	r4, r2
 8008202:	d50e      	bpl.n	8008222 <_svfiprintf_r+0x32>
 8008204:	690b      	ldr	r3, [r1, #16]
 8008206:	b963      	cbnz	r3, 8008222 <_svfiprintf_r+0x32>
 8008208:	2140      	movs	r1, #64	; 0x40
 800820a:	f7ff ff0b 	bl	8008024 <_malloc_r>
 800820e:	6028      	str	r0, [r5, #0]
 8008210:	6128      	str	r0, [r5, #16]
 8008212:	b920      	cbnz	r0, 800821e <_svfiprintf_r+0x2e>
 8008214:	230c      	movs	r3, #12
 8008216:	603b      	str	r3, [r7, #0]
 8008218:	f04f 30ff 	mov.w	r0, #4294967295
 800821c:	e0d0      	b.n	80083c0 <_svfiprintf_r+0x1d0>
 800821e:	2340      	movs	r3, #64	; 0x40
 8008220:	616b      	str	r3, [r5, #20]
 8008222:	2300      	movs	r3, #0
 8008224:	9309      	str	r3, [sp, #36]	; 0x24
 8008226:	2320      	movs	r3, #32
 8008228:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800822c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008230:	2330      	movs	r3, #48	; 0x30
 8008232:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80083d8 <_svfiprintf_r+0x1e8>
 8008236:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800823a:	f04f 0901 	mov.w	r9, #1
 800823e:	4623      	mov	r3, r4
 8008240:	469a      	mov	sl, r3
 8008242:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008246:	b10a      	cbz	r2, 800824c <_svfiprintf_r+0x5c>
 8008248:	2a25      	cmp	r2, #37	; 0x25
 800824a:	d1f9      	bne.n	8008240 <_svfiprintf_r+0x50>
 800824c:	ebba 0b04 	subs.w	fp, sl, r4
 8008250:	d00b      	beq.n	800826a <_svfiprintf_r+0x7a>
 8008252:	465b      	mov	r3, fp
 8008254:	4622      	mov	r2, r4
 8008256:	4629      	mov	r1, r5
 8008258:	4638      	mov	r0, r7
 800825a:	f7ff ff6f 	bl	800813c <__ssputs_r>
 800825e:	3001      	adds	r0, #1
 8008260:	f000 80a9 	beq.w	80083b6 <_svfiprintf_r+0x1c6>
 8008264:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8008266:	445a      	add	r2, fp
 8008268:	9209      	str	r2, [sp, #36]	; 0x24
 800826a:	f89a 3000 	ldrb.w	r3, [sl]
 800826e:	2b00      	cmp	r3, #0
 8008270:	f000 80a1 	beq.w	80083b6 <_svfiprintf_r+0x1c6>
 8008274:	2300      	movs	r3, #0
 8008276:	f04f 32ff 	mov.w	r2, #4294967295
 800827a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800827e:	f10a 0a01 	add.w	sl, sl, #1
 8008282:	9304      	str	r3, [sp, #16]
 8008284:	9307      	str	r3, [sp, #28]
 8008286:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800828a:	931a      	str	r3, [sp, #104]	; 0x68
 800828c:	4654      	mov	r4, sl
 800828e:	2205      	movs	r2, #5
 8008290:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008294:	4850      	ldr	r0, [pc, #320]	; (80083d8 <_svfiprintf_r+0x1e8>)
 8008296:	f7f8 f82b 	bl	80002f0 <memchr>
 800829a:	9a04      	ldr	r2, [sp, #16]
 800829c:	b9d8      	cbnz	r0, 80082d6 <_svfiprintf_r+0xe6>
 800829e:	06d0      	lsls	r0, r2, #27
 80082a0:	bf44      	itt	mi
 80082a2:	2320      	movmi	r3, #32
 80082a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082a8:	0711      	lsls	r1, r2, #28
 80082aa:	bf44      	itt	mi
 80082ac:	232b      	movmi	r3, #43	; 0x2b
 80082ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80082b2:	f89a 3000 	ldrb.w	r3, [sl]
 80082b6:	2b2a      	cmp	r3, #42	; 0x2a
 80082b8:	d015      	beq.n	80082e6 <_svfiprintf_r+0xf6>
 80082ba:	9a07      	ldr	r2, [sp, #28]
 80082bc:	4654      	mov	r4, sl
 80082be:	2000      	movs	r0, #0
 80082c0:	f04f 0c0a 	mov.w	ip, #10
 80082c4:	4621      	mov	r1, r4
 80082c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80082ca:	3b30      	subs	r3, #48	; 0x30
 80082cc:	2b09      	cmp	r3, #9
 80082ce:	d94d      	bls.n	800836c <_svfiprintf_r+0x17c>
 80082d0:	b1b0      	cbz	r0, 8008300 <_svfiprintf_r+0x110>
 80082d2:	9207      	str	r2, [sp, #28]
 80082d4:	e014      	b.n	8008300 <_svfiprintf_r+0x110>
 80082d6:	eba0 0308 	sub.w	r3, r0, r8
 80082da:	fa09 f303 	lsl.w	r3, r9, r3
 80082de:	4313      	orrs	r3, r2
 80082e0:	9304      	str	r3, [sp, #16]
 80082e2:	46a2      	mov	sl, r4
 80082e4:	e7d2      	b.n	800828c <_svfiprintf_r+0x9c>
 80082e6:	9b03      	ldr	r3, [sp, #12]
 80082e8:	1d19      	adds	r1, r3, #4
 80082ea:	681b      	ldr	r3, [r3, #0]
 80082ec:	9103      	str	r1, [sp, #12]
 80082ee:	2b00      	cmp	r3, #0
 80082f0:	bfbb      	ittet	lt
 80082f2:	425b      	neglt	r3, r3
 80082f4:	f042 0202 	orrlt.w	r2, r2, #2
 80082f8:	9307      	strge	r3, [sp, #28]
 80082fa:	9307      	strlt	r3, [sp, #28]
 80082fc:	bfb8      	it	lt
 80082fe:	9204      	strlt	r2, [sp, #16]
 8008300:	7823      	ldrb	r3, [r4, #0]
 8008302:	2b2e      	cmp	r3, #46	; 0x2e
 8008304:	d10c      	bne.n	8008320 <_svfiprintf_r+0x130>
 8008306:	7863      	ldrb	r3, [r4, #1]
 8008308:	2b2a      	cmp	r3, #42	; 0x2a
 800830a:	d134      	bne.n	8008376 <_svfiprintf_r+0x186>
 800830c:	9b03      	ldr	r3, [sp, #12]
 800830e:	1d1a      	adds	r2, r3, #4
 8008310:	681b      	ldr	r3, [r3, #0]
 8008312:	9203      	str	r2, [sp, #12]
 8008314:	2b00      	cmp	r3, #0
 8008316:	bfb8      	it	lt
 8008318:	f04f 33ff 	movlt.w	r3, #4294967295
 800831c:	3402      	adds	r4, #2
 800831e:	9305      	str	r3, [sp, #20]
 8008320:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80083e8 <_svfiprintf_r+0x1f8>
 8008324:	7821      	ldrb	r1, [r4, #0]
 8008326:	2203      	movs	r2, #3
 8008328:	4650      	mov	r0, sl
 800832a:	f7f7 ffe1 	bl	80002f0 <memchr>
 800832e:	b138      	cbz	r0, 8008340 <_svfiprintf_r+0x150>
 8008330:	9b04      	ldr	r3, [sp, #16]
 8008332:	eba0 000a 	sub.w	r0, r0, sl
 8008336:	2240      	movs	r2, #64	; 0x40
 8008338:	4082      	lsls	r2, r0
 800833a:	4313      	orrs	r3, r2
 800833c:	3401      	adds	r4, #1
 800833e:	9304      	str	r3, [sp, #16]
 8008340:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008344:	4825      	ldr	r0, [pc, #148]	; (80083dc <_svfiprintf_r+0x1ec>)
 8008346:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800834a:	2206      	movs	r2, #6
 800834c:	f7f7 ffd0 	bl	80002f0 <memchr>
 8008350:	2800      	cmp	r0, #0
 8008352:	d038      	beq.n	80083c6 <_svfiprintf_r+0x1d6>
 8008354:	4b22      	ldr	r3, [pc, #136]	; (80083e0 <_svfiprintf_r+0x1f0>)
 8008356:	bb1b      	cbnz	r3, 80083a0 <_svfiprintf_r+0x1b0>
 8008358:	9b03      	ldr	r3, [sp, #12]
 800835a:	3307      	adds	r3, #7
 800835c:	f023 0307 	bic.w	r3, r3, #7
 8008360:	3308      	adds	r3, #8
 8008362:	9303      	str	r3, [sp, #12]
 8008364:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008366:	4433      	add	r3, r6
 8008368:	9309      	str	r3, [sp, #36]	; 0x24
 800836a:	e768      	b.n	800823e <_svfiprintf_r+0x4e>
 800836c:	fb0c 3202 	mla	r2, ip, r2, r3
 8008370:	460c      	mov	r4, r1
 8008372:	2001      	movs	r0, #1
 8008374:	e7a6      	b.n	80082c4 <_svfiprintf_r+0xd4>
 8008376:	2300      	movs	r3, #0
 8008378:	3401      	adds	r4, #1
 800837a:	9305      	str	r3, [sp, #20]
 800837c:	4619      	mov	r1, r3
 800837e:	f04f 0c0a 	mov.w	ip, #10
 8008382:	4620      	mov	r0, r4
 8008384:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008388:	3a30      	subs	r2, #48	; 0x30
 800838a:	2a09      	cmp	r2, #9
 800838c:	d903      	bls.n	8008396 <_svfiprintf_r+0x1a6>
 800838e:	2b00      	cmp	r3, #0
 8008390:	d0c6      	beq.n	8008320 <_svfiprintf_r+0x130>
 8008392:	9105      	str	r1, [sp, #20]
 8008394:	e7c4      	b.n	8008320 <_svfiprintf_r+0x130>
 8008396:	fb0c 2101 	mla	r1, ip, r1, r2
 800839a:	4604      	mov	r4, r0
 800839c:	2301      	movs	r3, #1
 800839e:	e7f0      	b.n	8008382 <_svfiprintf_r+0x192>
 80083a0:	ab03      	add	r3, sp, #12
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	462a      	mov	r2, r5
 80083a6:	4b0f      	ldr	r3, [pc, #60]	; (80083e4 <_svfiprintf_r+0x1f4>)
 80083a8:	a904      	add	r1, sp, #16
 80083aa:	4638      	mov	r0, r7
 80083ac:	f3af 8000 	nop.w
 80083b0:	1c42      	adds	r2, r0, #1
 80083b2:	4606      	mov	r6, r0
 80083b4:	d1d6      	bne.n	8008364 <_svfiprintf_r+0x174>
 80083b6:	89ab      	ldrh	r3, [r5, #12]
 80083b8:	065b      	lsls	r3, r3, #25
 80083ba:	f53f af2d 	bmi.w	8008218 <_svfiprintf_r+0x28>
 80083be:	9809      	ldr	r0, [sp, #36]	; 0x24
 80083c0:	b01d      	add	sp, #116	; 0x74
 80083c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083c6:	ab03      	add	r3, sp, #12
 80083c8:	9300      	str	r3, [sp, #0]
 80083ca:	462a      	mov	r2, r5
 80083cc:	4b05      	ldr	r3, [pc, #20]	; (80083e4 <_svfiprintf_r+0x1f4>)
 80083ce:	a904      	add	r1, sp, #16
 80083d0:	4638      	mov	r0, r7
 80083d2:	f000 f879 	bl	80084c8 <_printf_i>
 80083d6:	e7eb      	b.n	80083b0 <_svfiprintf_r+0x1c0>
 80083d8:	08008848 	.word	0x08008848
 80083dc:	08008852 	.word	0x08008852
 80083e0:	00000000 	.word	0x00000000
 80083e4:	0800813d 	.word	0x0800813d
 80083e8:	0800884e 	.word	0x0800884e

080083ec <_printf_common>:
 80083ec:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80083f0:	4616      	mov	r6, r2
 80083f2:	4699      	mov	r9, r3
 80083f4:	688a      	ldr	r2, [r1, #8]
 80083f6:	690b      	ldr	r3, [r1, #16]
 80083f8:	f8dd 8020 	ldr.w	r8, [sp, #32]
 80083fc:	4293      	cmp	r3, r2
 80083fe:	bfb8      	it	lt
 8008400:	4613      	movlt	r3, r2
 8008402:	6033      	str	r3, [r6, #0]
 8008404:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8008408:	4607      	mov	r7, r0
 800840a:	460c      	mov	r4, r1
 800840c:	b10a      	cbz	r2, 8008412 <_printf_common+0x26>
 800840e:	3301      	adds	r3, #1
 8008410:	6033      	str	r3, [r6, #0]
 8008412:	6823      	ldr	r3, [r4, #0]
 8008414:	0699      	lsls	r1, r3, #26
 8008416:	bf42      	ittt	mi
 8008418:	6833      	ldrmi	r3, [r6, #0]
 800841a:	3302      	addmi	r3, #2
 800841c:	6033      	strmi	r3, [r6, #0]
 800841e:	6825      	ldr	r5, [r4, #0]
 8008420:	f015 0506 	ands.w	r5, r5, #6
 8008424:	d106      	bne.n	8008434 <_printf_common+0x48>
 8008426:	f104 0a19 	add.w	sl, r4, #25
 800842a:	68e3      	ldr	r3, [r4, #12]
 800842c:	6832      	ldr	r2, [r6, #0]
 800842e:	1a9b      	subs	r3, r3, r2
 8008430:	42ab      	cmp	r3, r5
 8008432:	dc26      	bgt.n	8008482 <_printf_common+0x96>
 8008434:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8008438:	1e13      	subs	r3, r2, #0
 800843a:	6822      	ldr	r2, [r4, #0]
 800843c:	bf18      	it	ne
 800843e:	2301      	movne	r3, #1
 8008440:	0692      	lsls	r2, r2, #26
 8008442:	d42b      	bmi.n	800849c <_printf_common+0xb0>
 8008444:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8008448:	4649      	mov	r1, r9
 800844a:	4638      	mov	r0, r7
 800844c:	47c0      	blx	r8
 800844e:	3001      	adds	r0, #1
 8008450:	d01e      	beq.n	8008490 <_printf_common+0xa4>
 8008452:	6823      	ldr	r3, [r4, #0]
 8008454:	6922      	ldr	r2, [r4, #16]
 8008456:	f003 0306 	and.w	r3, r3, #6
 800845a:	2b04      	cmp	r3, #4
 800845c:	bf02      	ittt	eq
 800845e:	68e5      	ldreq	r5, [r4, #12]
 8008460:	6833      	ldreq	r3, [r6, #0]
 8008462:	1aed      	subeq	r5, r5, r3
 8008464:	68a3      	ldr	r3, [r4, #8]
 8008466:	bf0c      	ite	eq
 8008468:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800846c:	2500      	movne	r5, #0
 800846e:	4293      	cmp	r3, r2
 8008470:	bfc4      	itt	gt
 8008472:	1a9b      	subgt	r3, r3, r2
 8008474:	18ed      	addgt	r5, r5, r3
 8008476:	2600      	movs	r6, #0
 8008478:	341a      	adds	r4, #26
 800847a:	42b5      	cmp	r5, r6
 800847c:	d11a      	bne.n	80084b4 <_printf_common+0xc8>
 800847e:	2000      	movs	r0, #0
 8008480:	e008      	b.n	8008494 <_printf_common+0xa8>
 8008482:	2301      	movs	r3, #1
 8008484:	4652      	mov	r2, sl
 8008486:	4649      	mov	r1, r9
 8008488:	4638      	mov	r0, r7
 800848a:	47c0      	blx	r8
 800848c:	3001      	adds	r0, #1
 800848e:	d103      	bne.n	8008498 <_printf_common+0xac>
 8008490:	f04f 30ff 	mov.w	r0, #4294967295
 8008494:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008498:	3501      	adds	r5, #1
 800849a:	e7c6      	b.n	800842a <_printf_common+0x3e>
 800849c:	18e1      	adds	r1, r4, r3
 800849e:	1c5a      	adds	r2, r3, #1
 80084a0:	2030      	movs	r0, #48	; 0x30
 80084a2:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 80084a6:	4422      	add	r2, r4
 80084a8:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 80084ac:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 80084b0:	3302      	adds	r3, #2
 80084b2:	e7c7      	b.n	8008444 <_printf_common+0x58>
 80084b4:	2301      	movs	r3, #1
 80084b6:	4622      	mov	r2, r4
 80084b8:	4649      	mov	r1, r9
 80084ba:	4638      	mov	r0, r7
 80084bc:	47c0      	blx	r8
 80084be:	3001      	adds	r0, #1
 80084c0:	d0e6      	beq.n	8008490 <_printf_common+0xa4>
 80084c2:	3601      	adds	r6, #1
 80084c4:	e7d9      	b.n	800847a <_printf_common+0x8e>
	...

080084c8 <_printf_i>:
 80084c8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80084cc:	7e0f      	ldrb	r7, [r1, #24]
 80084ce:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 80084d0:	2f78      	cmp	r7, #120	; 0x78
 80084d2:	4691      	mov	r9, r2
 80084d4:	4680      	mov	r8, r0
 80084d6:	460c      	mov	r4, r1
 80084d8:	469a      	mov	sl, r3
 80084da:	f101 0243 	add.w	r2, r1, #67	; 0x43
 80084de:	d807      	bhi.n	80084f0 <_printf_i+0x28>
 80084e0:	2f62      	cmp	r7, #98	; 0x62
 80084e2:	d80a      	bhi.n	80084fa <_printf_i+0x32>
 80084e4:	2f00      	cmp	r7, #0
 80084e6:	f000 80d4 	beq.w	8008692 <_printf_i+0x1ca>
 80084ea:	2f58      	cmp	r7, #88	; 0x58
 80084ec:	f000 80c0 	beq.w	8008670 <_printf_i+0x1a8>
 80084f0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80084f4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 80084f8:	e03a      	b.n	8008570 <_printf_i+0xa8>
 80084fa:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 80084fe:	2b15      	cmp	r3, #21
 8008500:	d8f6      	bhi.n	80084f0 <_printf_i+0x28>
 8008502:	a101      	add	r1, pc, #4	; (adr r1, 8008508 <_printf_i+0x40>)
 8008504:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008508:	08008561 	.word	0x08008561
 800850c:	08008575 	.word	0x08008575
 8008510:	080084f1 	.word	0x080084f1
 8008514:	080084f1 	.word	0x080084f1
 8008518:	080084f1 	.word	0x080084f1
 800851c:	080084f1 	.word	0x080084f1
 8008520:	08008575 	.word	0x08008575
 8008524:	080084f1 	.word	0x080084f1
 8008528:	080084f1 	.word	0x080084f1
 800852c:	080084f1 	.word	0x080084f1
 8008530:	080084f1 	.word	0x080084f1
 8008534:	08008679 	.word	0x08008679
 8008538:	080085a1 	.word	0x080085a1
 800853c:	08008633 	.word	0x08008633
 8008540:	080084f1 	.word	0x080084f1
 8008544:	080084f1 	.word	0x080084f1
 8008548:	0800869b 	.word	0x0800869b
 800854c:	080084f1 	.word	0x080084f1
 8008550:	080085a1 	.word	0x080085a1
 8008554:	080084f1 	.word	0x080084f1
 8008558:	080084f1 	.word	0x080084f1
 800855c:	0800863b 	.word	0x0800863b
 8008560:	682b      	ldr	r3, [r5, #0]
 8008562:	1d1a      	adds	r2, r3, #4
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	602a      	str	r2, [r5, #0]
 8008568:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800856c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8008570:	2301      	movs	r3, #1
 8008572:	e09f      	b.n	80086b4 <_printf_i+0x1ec>
 8008574:	6820      	ldr	r0, [r4, #0]
 8008576:	682b      	ldr	r3, [r5, #0]
 8008578:	0607      	lsls	r7, r0, #24
 800857a:	f103 0104 	add.w	r1, r3, #4
 800857e:	6029      	str	r1, [r5, #0]
 8008580:	d501      	bpl.n	8008586 <_printf_i+0xbe>
 8008582:	681e      	ldr	r6, [r3, #0]
 8008584:	e003      	b.n	800858e <_printf_i+0xc6>
 8008586:	0646      	lsls	r6, r0, #25
 8008588:	d5fb      	bpl.n	8008582 <_printf_i+0xba>
 800858a:	f9b3 6000 	ldrsh.w	r6, [r3]
 800858e:	2e00      	cmp	r6, #0
 8008590:	da03      	bge.n	800859a <_printf_i+0xd2>
 8008592:	232d      	movs	r3, #45	; 0x2d
 8008594:	4276      	negs	r6, r6
 8008596:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800859a:	485a      	ldr	r0, [pc, #360]	; (8008704 <_printf_i+0x23c>)
 800859c:	230a      	movs	r3, #10
 800859e:	e012      	b.n	80085c6 <_printf_i+0xfe>
 80085a0:	682b      	ldr	r3, [r5, #0]
 80085a2:	6820      	ldr	r0, [r4, #0]
 80085a4:	1d19      	adds	r1, r3, #4
 80085a6:	6029      	str	r1, [r5, #0]
 80085a8:	0605      	lsls	r5, r0, #24
 80085aa:	d501      	bpl.n	80085b0 <_printf_i+0xe8>
 80085ac:	681e      	ldr	r6, [r3, #0]
 80085ae:	e002      	b.n	80085b6 <_printf_i+0xee>
 80085b0:	0641      	lsls	r1, r0, #25
 80085b2:	d5fb      	bpl.n	80085ac <_printf_i+0xe4>
 80085b4:	881e      	ldrh	r6, [r3, #0]
 80085b6:	4853      	ldr	r0, [pc, #332]	; (8008704 <_printf_i+0x23c>)
 80085b8:	2f6f      	cmp	r7, #111	; 0x6f
 80085ba:	bf0c      	ite	eq
 80085bc:	2308      	moveq	r3, #8
 80085be:	230a      	movne	r3, #10
 80085c0:	2100      	movs	r1, #0
 80085c2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 80085c6:	6865      	ldr	r5, [r4, #4]
 80085c8:	60a5      	str	r5, [r4, #8]
 80085ca:	2d00      	cmp	r5, #0
 80085cc:	bfa2      	ittt	ge
 80085ce:	6821      	ldrge	r1, [r4, #0]
 80085d0:	f021 0104 	bicge.w	r1, r1, #4
 80085d4:	6021      	strge	r1, [r4, #0]
 80085d6:	b90e      	cbnz	r6, 80085dc <_printf_i+0x114>
 80085d8:	2d00      	cmp	r5, #0
 80085da:	d04b      	beq.n	8008674 <_printf_i+0x1ac>
 80085dc:	4615      	mov	r5, r2
 80085de:	fbb6 f1f3 	udiv	r1, r6, r3
 80085e2:	fb03 6711 	mls	r7, r3, r1, r6
 80085e6:	5dc7      	ldrb	r7, [r0, r7]
 80085e8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 80085ec:	4637      	mov	r7, r6
 80085ee:	42bb      	cmp	r3, r7
 80085f0:	460e      	mov	r6, r1
 80085f2:	d9f4      	bls.n	80085de <_printf_i+0x116>
 80085f4:	2b08      	cmp	r3, #8
 80085f6:	d10b      	bne.n	8008610 <_printf_i+0x148>
 80085f8:	6823      	ldr	r3, [r4, #0]
 80085fa:	07de      	lsls	r6, r3, #31
 80085fc:	d508      	bpl.n	8008610 <_printf_i+0x148>
 80085fe:	6923      	ldr	r3, [r4, #16]
 8008600:	6861      	ldr	r1, [r4, #4]
 8008602:	4299      	cmp	r1, r3
 8008604:	bfde      	ittt	le
 8008606:	2330      	movle	r3, #48	; 0x30
 8008608:	f805 3c01 	strble.w	r3, [r5, #-1]
 800860c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008610:	1b52      	subs	r2, r2, r5
 8008612:	6122      	str	r2, [r4, #16]
 8008614:	f8cd a000 	str.w	sl, [sp]
 8008618:	464b      	mov	r3, r9
 800861a:	aa03      	add	r2, sp, #12
 800861c:	4621      	mov	r1, r4
 800861e:	4640      	mov	r0, r8
 8008620:	f7ff fee4 	bl	80083ec <_printf_common>
 8008624:	3001      	adds	r0, #1
 8008626:	d14a      	bne.n	80086be <_printf_i+0x1f6>
 8008628:	f04f 30ff 	mov.w	r0, #4294967295
 800862c:	b004      	add	sp, #16
 800862e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008632:	6823      	ldr	r3, [r4, #0]
 8008634:	f043 0320 	orr.w	r3, r3, #32
 8008638:	6023      	str	r3, [r4, #0]
 800863a:	4833      	ldr	r0, [pc, #204]	; (8008708 <_printf_i+0x240>)
 800863c:	2778      	movs	r7, #120	; 0x78
 800863e:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8008642:	6823      	ldr	r3, [r4, #0]
 8008644:	6829      	ldr	r1, [r5, #0]
 8008646:	061f      	lsls	r7, r3, #24
 8008648:	f851 6b04 	ldr.w	r6, [r1], #4
 800864c:	d402      	bmi.n	8008654 <_printf_i+0x18c>
 800864e:	065f      	lsls	r7, r3, #25
 8008650:	bf48      	it	mi
 8008652:	b2b6      	uxthmi	r6, r6
 8008654:	07df      	lsls	r7, r3, #31
 8008656:	bf48      	it	mi
 8008658:	f043 0320 	orrmi.w	r3, r3, #32
 800865c:	6029      	str	r1, [r5, #0]
 800865e:	bf48      	it	mi
 8008660:	6023      	strmi	r3, [r4, #0]
 8008662:	b91e      	cbnz	r6, 800866c <_printf_i+0x1a4>
 8008664:	6823      	ldr	r3, [r4, #0]
 8008666:	f023 0320 	bic.w	r3, r3, #32
 800866a:	6023      	str	r3, [r4, #0]
 800866c:	2310      	movs	r3, #16
 800866e:	e7a7      	b.n	80085c0 <_printf_i+0xf8>
 8008670:	4824      	ldr	r0, [pc, #144]	; (8008704 <_printf_i+0x23c>)
 8008672:	e7e4      	b.n	800863e <_printf_i+0x176>
 8008674:	4615      	mov	r5, r2
 8008676:	e7bd      	b.n	80085f4 <_printf_i+0x12c>
 8008678:	682b      	ldr	r3, [r5, #0]
 800867a:	6826      	ldr	r6, [r4, #0]
 800867c:	6961      	ldr	r1, [r4, #20]
 800867e:	1d18      	adds	r0, r3, #4
 8008680:	6028      	str	r0, [r5, #0]
 8008682:	0635      	lsls	r5, r6, #24
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	d501      	bpl.n	800868c <_printf_i+0x1c4>
 8008688:	6019      	str	r1, [r3, #0]
 800868a:	e002      	b.n	8008692 <_printf_i+0x1ca>
 800868c:	0670      	lsls	r0, r6, #25
 800868e:	d5fb      	bpl.n	8008688 <_printf_i+0x1c0>
 8008690:	8019      	strh	r1, [r3, #0]
 8008692:	2300      	movs	r3, #0
 8008694:	6123      	str	r3, [r4, #16]
 8008696:	4615      	mov	r5, r2
 8008698:	e7bc      	b.n	8008614 <_printf_i+0x14c>
 800869a:	682b      	ldr	r3, [r5, #0]
 800869c:	1d1a      	adds	r2, r3, #4
 800869e:	602a      	str	r2, [r5, #0]
 80086a0:	681d      	ldr	r5, [r3, #0]
 80086a2:	6862      	ldr	r2, [r4, #4]
 80086a4:	2100      	movs	r1, #0
 80086a6:	4628      	mov	r0, r5
 80086a8:	f7f7 fe22 	bl	80002f0 <memchr>
 80086ac:	b108      	cbz	r0, 80086b2 <_printf_i+0x1ea>
 80086ae:	1b40      	subs	r0, r0, r5
 80086b0:	6060      	str	r0, [r4, #4]
 80086b2:	6863      	ldr	r3, [r4, #4]
 80086b4:	6123      	str	r3, [r4, #16]
 80086b6:	2300      	movs	r3, #0
 80086b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80086bc:	e7aa      	b.n	8008614 <_printf_i+0x14c>
 80086be:	6923      	ldr	r3, [r4, #16]
 80086c0:	462a      	mov	r2, r5
 80086c2:	4649      	mov	r1, r9
 80086c4:	4640      	mov	r0, r8
 80086c6:	47d0      	blx	sl
 80086c8:	3001      	adds	r0, #1
 80086ca:	d0ad      	beq.n	8008628 <_printf_i+0x160>
 80086cc:	6823      	ldr	r3, [r4, #0]
 80086ce:	079b      	lsls	r3, r3, #30
 80086d0:	d413      	bmi.n	80086fa <_printf_i+0x232>
 80086d2:	68e0      	ldr	r0, [r4, #12]
 80086d4:	9b03      	ldr	r3, [sp, #12]
 80086d6:	4298      	cmp	r0, r3
 80086d8:	bfb8      	it	lt
 80086da:	4618      	movlt	r0, r3
 80086dc:	e7a6      	b.n	800862c <_printf_i+0x164>
 80086de:	2301      	movs	r3, #1
 80086e0:	4632      	mov	r2, r6
 80086e2:	4649      	mov	r1, r9
 80086e4:	4640      	mov	r0, r8
 80086e6:	47d0      	blx	sl
 80086e8:	3001      	adds	r0, #1
 80086ea:	d09d      	beq.n	8008628 <_printf_i+0x160>
 80086ec:	3501      	adds	r5, #1
 80086ee:	68e3      	ldr	r3, [r4, #12]
 80086f0:	9903      	ldr	r1, [sp, #12]
 80086f2:	1a5b      	subs	r3, r3, r1
 80086f4:	42ab      	cmp	r3, r5
 80086f6:	dcf2      	bgt.n	80086de <_printf_i+0x216>
 80086f8:	e7eb      	b.n	80086d2 <_printf_i+0x20a>
 80086fa:	2500      	movs	r5, #0
 80086fc:	f104 0619 	add.w	r6, r4, #25
 8008700:	e7f5      	b.n	80086ee <_printf_i+0x226>
 8008702:	bf00      	nop
 8008704:	08008859 	.word	0x08008859
 8008708:	0800886a 	.word	0x0800886a

0800870c <memmove>:
 800870c:	4288      	cmp	r0, r1
 800870e:	b510      	push	{r4, lr}
 8008710:	eb01 0402 	add.w	r4, r1, r2
 8008714:	d902      	bls.n	800871c <memmove+0x10>
 8008716:	4284      	cmp	r4, r0
 8008718:	4623      	mov	r3, r4
 800871a:	d807      	bhi.n	800872c <memmove+0x20>
 800871c:	1e43      	subs	r3, r0, #1
 800871e:	42a1      	cmp	r1, r4
 8008720:	d008      	beq.n	8008734 <memmove+0x28>
 8008722:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008726:	f803 2f01 	strb.w	r2, [r3, #1]!
 800872a:	e7f8      	b.n	800871e <memmove+0x12>
 800872c:	4402      	add	r2, r0
 800872e:	4601      	mov	r1, r0
 8008730:	428a      	cmp	r2, r1
 8008732:	d100      	bne.n	8008736 <memmove+0x2a>
 8008734:	bd10      	pop	{r4, pc}
 8008736:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800873a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800873e:	e7f7      	b.n	8008730 <memmove+0x24>

08008740 <_sbrk_r>:
 8008740:	b538      	push	{r3, r4, r5, lr}
 8008742:	4d06      	ldr	r5, [pc, #24]	; (800875c <_sbrk_r+0x1c>)
 8008744:	2300      	movs	r3, #0
 8008746:	4604      	mov	r4, r0
 8008748:	4608      	mov	r0, r1
 800874a:	602b      	str	r3, [r5, #0]
 800874c:	f7f8 fb54 	bl	8000df8 <_sbrk>
 8008750:	1c43      	adds	r3, r0, #1
 8008752:	d102      	bne.n	800875a <_sbrk_r+0x1a>
 8008754:	682b      	ldr	r3, [r5, #0]
 8008756:	b103      	cbz	r3, 800875a <_sbrk_r+0x1a>
 8008758:	6023      	str	r3, [r4, #0]
 800875a:	bd38      	pop	{r3, r4, r5, pc}
 800875c:	240002f0 	.word	0x240002f0

08008760 <memcpy>:
 8008760:	440a      	add	r2, r1
 8008762:	4291      	cmp	r1, r2
 8008764:	f100 33ff 	add.w	r3, r0, #4294967295
 8008768:	d100      	bne.n	800876c <memcpy+0xc>
 800876a:	4770      	bx	lr
 800876c:	b510      	push	{r4, lr}
 800876e:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008772:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008776:	4291      	cmp	r1, r2
 8008778:	d1f9      	bne.n	800876e <memcpy+0xe>
 800877a:	bd10      	pop	{r4, pc}

0800877c <_realloc_r>:
 800877c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008780:	4680      	mov	r8, r0
 8008782:	4614      	mov	r4, r2
 8008784:	460e      	mov	r6, r1
 8008786:	b921      	cbnz	r1, 8008792 <_realloc_r+0x16>
 8008788:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800878c:	4611      	mov	r1, r2
 800878e:	f7ff bc49 	b.w	8008024 <_malloc_r>
 8008792:	b92a      	cbnz	r2, 80087a0 <_realloc_r+0x24>
 8008794:	f7ff fbda 	bl	8007f4c <_free_r>
 8008798:	4625      	mov	r5, r4
 800879a:	4628      	mov	r0, r5
 800879c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80087a0:	f000 f81b 	bl	80087da <_malloc_usable_size_r>
 80087a4:	4284      	cmp	r4, r0
 80087a6:	4607      	mov	r7, r0
 80087a8:	d802      	bhi.n	80087b0 <_realloc_r+0x34>
 80087aa:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 80087ae:	d812      	bhi.n	80087d6 <_realloc_r+0x5a>
 80087b0:	4621      	mov	r1, r4
 80087b2:	4640      	mov	r0, r8
 80087b4:	f7ff fc36 	bl	8008024 <_malloc_r>
 80087b8:	4605      	mov	r5, r0
 80087ba:	2800      	cmp	r0, #0
 80087bc:	d0ed      	beq.n	800879a <_realloc_r+0x1e>
 80087be:	42bc      	cmp	r4, r7
 80087c0:	4622      	mov	r2, r4
 80087c2:	4631      	mov	r1, r6
 80087c4:	bf28      	it	cs
 80087c6:	463a      	movcs	r2, r7
 80087c8:	f7ff ffca 	bl	8008760 <memcpy>
 80087cc:	4631      	mov	r1, r6
 80087ce:	4640      	mov	r0, r8
 80087d0:	f7ff fbbc 	bl	8007f4c <_free_r>
 80087d4:	e7e1      	b.n	800879a <_realloc_r+0x1e>
 80087d6:	4635      	mov	r5, r6
 80087d8:	e7df      	b.n	800879a <_realloc_r+0x1e>

080087da <_malloc_usable_size_r>:
 80087da:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80087de:	1f18      	subs	r0, r3, #4
 80087e0:	2b00      	cmp	r3, #0
 80087e2:	bfbc      	itt	lt
 80087e4:	580b      	ldrlt	r3, [r1, r0]
 80087e6:	18c0      	addlt	r0, r0, r3
 80087e8:	4770      	bx	lr
	...

080087ec <_init>:
 80087ec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087ee:	bf00      	nop
 80087f0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087f2:	bc08      	pop	{r3}
 80087f4:	469e      	mov	lr, r3
 80087f6:	4770      	bx	lr

080087f8 <_fini>:
 80087f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80087fa:	bf00      	nop
 80087fc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80087fe:	bc08      	pop	{r3}
 8008800:	469e      	mov	lr, r3
 8008802:	4770      	bx	lr
